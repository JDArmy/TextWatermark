{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"\u5173\u4e8e","text":""},{"location":"about/#about","title":"About","text":"<p>JD.Army</p>"},{"location":"changelog/","title":"\u66f4\u65b0\u65e5\u5fd7","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#018","title":"0.1.8","text":"<ul> <li>Add <code>dont_check_version</code> parameter to <code>TextWatermark.init_from_params</code></li> </ul>"},{"location":"changelog/#017","title":"0.1.7","text":"<ul> <li>Change Python restricted dependencies of <code>mkdocs-include-markdown-plugin</code> in <code>pyproject.toml</code>, so  <code>python = \"^3.8,&lt;3.12\"</code> in <code>[tool.poetry.dependencies]</code> can be changed to <code>python = \"^3.8\"</code></li> </ul>"},{"location":"changelog/#016","title":"0.1.6","text":"<ul> <li>Bug fix: <code>TextWatermark.init_from_params</code> going wrong when <code>set_tpl</code> mode</li> <li>Bug fix: Error when checking if <code>wm_str</code> larger than <code>wm_max</code> in method <code>TextWatermark.insert_watermark</code></li> <li>Bug fix: Wrong watermarked when setting <code>wm_flag_bit</code> to <code>False</code> in method <code>TextWatermark.insert_watermark</code></li> </ul>"},{"location":"changelog/#015","title":"0.1.5","text":"<ul> <li>add <code>init_from_params</code> static method to <code>TextWatermark</code>, <code>TextWatermark</code> can be init from exported params.</li> </ul>"},{"location":"changelog/#014","title":"0.1.4","text":"<ul> <li>fixes dependencies</li> </ul>"},{"location":"changelog/#013","title":"0.1.3","text":"<ul> <li>add <code>--no-flag-bit</code> command to cmdline, and wm_flag_bit parameter to <code>__init__</code> method of <code>TextWatermark</code> class.</li> </ul>"},{"location":"changelog/#012","title":"0.1.2","text":"<ul> <li>add retrieve watermark from binary static method <code>retrieve_watermark_from_bin</code> to TextWatermark class and the cmd line.</li> <li>add examples to docs</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<p>init of <code>TextWatermark</code></p>"},{"location":"cmdline/","title":"CMD Line","text":""},{"location":"cmdline/#run-textwatermark-from-the-cmd-line","title":"Run textwatermark from the CMD line","text":""},{"location":"cmdline/#textwatermark-help","title":"textwatermark --help","text":"Bash Session<pre><code>$ textwatermark --help\n\nUsage: textwatermark [OPTIONS] COMMAND [ARGS]...\n  Main commands\nOptions:\n  -V, --version  Show version and exit.\n  -v, --verbose  Show more info.\n  --debug        Enable debug.\n  --help         Show this message and exit.\nCommands:\n  insert    Insert watermark to text\n  retrieve  Retrieve watermark from watermarked text\n</code></pre>"},{"location":"cmdline/#insert-watermark-to-text","title":"Insert Watermark To Text","text":""},{"location":"cmdline/#textwatermark-insert-help","title":"textwatermark insert --help","text":"Bash Session<pre><code>$ textwatermark insert --help\n\nUsage: textwatermark insert [OPTIONS]\n  Insert watermark to text\n  Examples:\n  Insert watermark to text file:\n  `textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -t\n  HOMOGRAPH_NUMBERS -x 999999999 -w 123456789 `\n  Export params to out_file:\n  `textwatermark -v insert -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x\n  999999999 -w 123456789 -e -o 'out.txt'`\nOptions:\n  -f, --text-file TEXT           Text file waiting for watermarking\n  -o, --out-file TEXT            Watermarked file to be saved\n  -m, --wm-mode TEXT             Watermark mode value in defines.WMMode\n                                 [required]\n  -t, --template-type TEXT       Template type in templates  [required]\n  -x, --wm-max TEXT              Max value or string of the watermark\n                                 [required]\n  -w, --wm-str TEXT              Watermark string  [required]\n  -b, --wm-base INTEGER          Base conversion of watermark string\n  -k, --template-chars-key TEXT  Key of template confusables chars\n  -l, --wm-loop                  If True then inserts watermark in a loop,\n                                 Defaults to False\n  -i, --start-at INTEGER         Index of where the watermark will be\n                                 inserted. Defaults to 0.\n  -e, --export-params            If True then export watermark params\n  -n, --no-flag-bit              If True then do not add a flag bit to\n                                 watermark\n  --help                         Show this message and exit.\n</code></pre>"},{"location":"cmdline/#insert-watermark-example","title":"Insert Watermark Example","text":""},{"location":"cmdline/#print-watermarked-text-to-the-console","title":"Print Watermarked Text To The Console","text":"Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/number.txt' -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999 -w 123\n\u04c02\ud835\udfd1\ud835\udfd2\ud835\udfd3\u2cd2\ud835\udfdf890\n</code></pre>"},{"location":"cmdline/#save-watermarked-text-to-file","title":"Save Watermarked Text To File","text":"Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/number.txt' -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999 -w 123 -o out.txt\n\nSave watermarked text to output file: /Projects/JDArmy/TextWatermark/textwatermark/out.txt\nOrgin text length is: 10\nWatermarked text length is: 10\n</code></pre>"},{"location":"cmdline/#export-parameters-example","title":"Export Parameters Example","text":""},{"location":"cmdline/#export-parameters-to-the-console","title":"Export Parameters To The Console","text":"Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/number.txt' -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999 -w 123 -e\n\n{\"tpl_type\": \"HOMOGRAPH_NUMBERS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 7, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 7, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.0\"}\n</code></pre>"},{"location":"cmdline/#export-parameters-to-file","title":"Export Parameters To File","text":"Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/number.txt' -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999 -w 123 -e -o out.txt\n\nExport params save to output file: /Projects/JDArmy/TextWatermark/textwatermark/out.txt\n</code></pre>"},{"location":"cmdline/#retrieve-watermark-from-text","title":"Retrieve Watermark From Text","text":""},{"location":"cmdline/#textwatermark-retrieve-help","title":"textwatermark retrieve --help","text":"Bash Session<pre><code>$ textwatermark retrieve --help\n\nUsage: textwatermark retrieve [OPTIONS]\n  Retrieve watermark from watermarked text\n  Examples:\n  `textwatermark retrieve -f ./out.txt -p '{the param json string export by\n  command:insert and option:--export-params}'`\nOptions:\n  -f, --wm-text-file TEXT    Text file already be watermarked\n  -b, --wm-binary TEXT       Watermark string in binary\n  -p, --params-json TEXT     Param json when watermarking text  [required]\n  -F, --dont-check-version   Don't check versions between params and\n                             library\n  --help                     Show this message and exit.\n</code></pre>"},{"location":"cmdline/#retrieve-watermark-from-text-example","title":"Retrieve Watermark From Text Example","text":"Bash Session<pre><code>$ textwatermark -v retrieve -f out.txt -p '{\"tpl_type\": \"HOMOGRAPH_NUMBERS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 7, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 7, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.0\"}'\nThe retrieved watermark is: 123\n</code></pre>"},{"location":"cmdline/#retrieve-watermark-from-binary-string","title":"Retrieve Watermark From Binary String","text":"<p>Most of the time, such as taking screenshots or photographs, we can not retrieve watermarks automatically. We can only manually compare text features to extract watermarks. Watermarks will be expressed in binary to any encoded base (0-9, A-Z) of characters.</p> <p>Then we can use <code>--wm-binary</code> parameter to retrieve the watermark.</p> Bash Session<pre><code>$ textwatermark -v retrieve -b 10010000011000100000101000110000111 -p '{\"tpl_type\": \"FONT_SIZE\", \"confusables_chars\": [], \"confusables_chars_key\": \"110\", \"wm_base\": 2, \"method\": 3, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.1\"}' -F\n\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"development/","title":"\u5f00\u53d1\u6587\u6863","text":""},{"location":"development/#begin","title":"Begin","text":""},{"location":"development/#init-project-environment","title":"Init project environment","text":"Bash<pre><code>$ git init\n$ git config\n\n$ poetry lock\n# install poetry\n$ poetry install\n\n# creating isolated virtual python environments\n$ virtualenv venv\n$ . venv/bin/activate\n\n# install textwatermark in editable mode\n$ pip install --editable .\n</code></pre>"},{"location":"development/#develop","title":"Develop","text":"<ul> <li>code</li> <li>git commit</li> <li>poetry run pytest</li> <li>poetry run mkdocs serve</li> <li>tox</li> </ul>"},{"location":"development/#delivery","title":"Delivery","text":""},{"location":"development/#run-tox","title":"Run tox","text":"<p>Run tox to format code style and check test.</p> <ul> <li>tox</li> </ul>"},{"location":"development/#git-tag","title":"Git tag","text":"<p>Modify package version value, then commit.</p> <p>Add tag</p> <ul> <li>git tag -a v0.1.0</li> </ul>"},{"location":"development/#build","title":"Build","text":"<p>Build this tag distribution package.</p> <ul> <li>poetry build</li> <li>poetry run mkdocs build</li> </ul>"},{"location":"development/#upload-index-server","title":"Upload index server","text":"<p>Upload to PyPI server, or pass <code>--repository https://pypi.org/simple</code> to specify index server.</p> <ul> <li>poetry publish</li> </ul>"},{"location":"example/","title":"\u6837\u4f8b","text":""},{"location":"example/#example","title":"Example","text":""},{"location":"example/#binary_representation","title":"BINARY_REPRESENTATION","text":"<p>--template-chars-key can be set to any key in combining_chars, invisible_chars and whitespace_chars</p> InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t BINARY_REPRESENTATION -k '\\u0300'\n1\u0300\u670810\u0300\u65e5,\u7f8e\u56fe\u516c\u53f8\u0300\u521b\u0300\u59cb\u4eba\u517cC\u0300EO\u5434\u6b23\u9e3f\u53d1\u0300\u9001\u4e86\u0300\u4e00\u5c01\u5185\u90e8\u0300\u5168\u0300\u5458\u90ae\u4ef6,\u6d89\u0300\u53ca\u0300\u7ecf\u0300\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"BINARY_REPRESENTATION\", \"confusables_chars\": [], \"confusables_chars_key\": \"\u0300\", \"wm_base\": 2, \"method\": 5, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#combining_chars","title":"COMBINING_CHARS","text":"InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t COMBINING_CHARS\n\n1\u0301\u6708\u03011\u03000\u0311\u65e5\u0306,\u0340\u7f8e\u030c\u56fe\u0341\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"COMBINING_CHARS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 36, \"method\": 4, \"wm_mode\": 5, \"wm_len\": 8, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#font_color","title":"FONT_COLOR","text":"<p>--template-chars-key can be set to any key in font_color</p> InsertWeb ViewRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t FONT_COLOR -k 'black4'\n&lt;span style=\"color: #444\"&gt;1&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u6708&lt;/span&gt;&lt;span style=\"color: #000\"&gt;1&lt;/span&gt;&lt;span style=\"color: #444\"&gt;0&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u65e5&lt;/span&gt;&lt;span style=\"color: #000\"&gt;,&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u7f8e&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u56fe&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u516c&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u53f8&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u521b&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u59cb&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u4eba&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u517c&lt;/span&gt;&lt;span style=\"color: #444\"&gt;C&lt;/span&gt;&lt;span style=\"color: #000\"&gt;E&lt;/span&gt;&lt;span style=\"color: #000\"&gt;O&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u5434&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u6b23&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u9e3f&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u53d1&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u9001&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u4e86&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u4e00&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u5c01&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u5185&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u90e8&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u5168&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u5458&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u90ae&lt;/span&gt;&lt;span style=\"color: #000\"&gt;\u4ef6&lt;/span&gt;&lt;span style=\"color: #000\"&gt;,&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u6d89&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u53ca&lt;/span&gt;&lt;span style=\"color: #444\"&gt;\u7ecf&lt;/span&gt;\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> <p>1\u670810\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002 \u2026\u2026</p> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"FONT_COLOR\", \"confusables_chars\": [], \"confusables_chars_key\": \"black4\", \"wm_base\": 2, \"method\": 3, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#font_float","title":"FONT_FLOAT","text":"<p>--template-chars-key can be set to any key in font_float</p> InsertWeb ViewRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t FONT_FLOAT -k 'up3'  &lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;1&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u6708&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;1&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;0&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u65e5&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;,&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u7f8e&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u56fe&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u516c&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u53f8&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u521b&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u59cb&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u4eba&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u517c&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;C&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;E&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;O&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u5434&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u6b23&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u9e3f&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u53d1&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u9001&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u4e86&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u4e00&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u5c01&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u5185&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u90e8&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u5168&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u5458&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u90ae&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;\u4ef6&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:0;\"&gt;,&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u6d89&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u53ca&lt;/span&gt;&lt;span style=\"display: inline-block;position: relative;top:-3px;\"&gt;\u7ecf&lt;/span&gt;\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> <p>1\u670810\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002</p> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"FONT_FLOAT\", \"confusables_chars\": [], \"confusables_chars_key\": \"up3\", \"wm_base\": 2, \"method\": 3, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#font_size","title":"FONT_SIZE","text":"<p>--template-chars-key can be set to any key in font_size</p> InsertWeb ViewRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t FONT_SIZE -k '110' &lt;span style=\"font-size: 110%\"&gt;1&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u6708&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;1&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;0&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u65e5&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;,&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u7f8e&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u56fe&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u516c&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u53f8&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u521b&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u59cb&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u4eba&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u517c&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;C&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;E&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;O&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u5434&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u6b23&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u9e3f&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u53d1&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u9001&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u4e86&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u4e00&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u5c01&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u5185&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u90e8&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u5168&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u5458&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u90ae&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;\u4ef6&lt;/span&gt;&lt;span style=\"font-size: 100%\"&gt;,&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u6d89&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u53ca&lt;/span&gt;&lt;span style=\"font-size: 110%\"&gt;\u7ecf&lt;/span&gt;\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> <p>1\u670810\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002 \u2026\u2026</p> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"FONT_SIZE\", \"confusables_chars\": [], \"confusables_chars_key\": \"110\", \"wm_base\": 2, \"method\": 3, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#font_style","title":"FONT_STYLE","text":"<p>--template-chars-key can be set to any key in font_style</p> InsertWeb ViewRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t FONT_STYLE -k 'text-decoration-underline'\n&lt;span style=\"text-decoration:underline;\"&gt;1&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u6708&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;1&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;0&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u65e5&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;,&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u7f8e&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u56fe&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u516c&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u53f8&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u521b&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u59cb&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u4eba&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u517c&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;C&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;E&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;O&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u5434&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u6b23&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u9e3f&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u53d1&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u9001&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u4e86&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u4e00&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u5c01&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u5185&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u90e8&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u5168&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u5458&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u90ae&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;\u4ef6&lt;/span&gt;&lt;span style=\"text-decoration:none;\"&gt;,&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u6d89&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u53ca&lt;/span&gt;&lt;span style=\"text-decoration:underline;\"&gt;\u7ecf&lt;/span&gt;\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> <p>1\u670810\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002 \u2026\u2026</p> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"FONT_STYLE\", \"confusables_chars\": [], \"confusables_chars_key\": \"text-decoration-underline\", \"wm_base\": 2, \"method\": 3, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#font_weight","title":"FONT_WEIGHT","text":"<p>--template-chars-key can be set to any key in font_weight</p> InsertWeb ViewRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t FONT_WEIGHT -k 'bolder'\n&lt;span style=\"font-weight: bolder;\"&gt;1&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u6708&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;1&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;0&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u65e5&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;,&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u7f8e&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u56fe&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u516c&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u53f8&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u521b&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u59cb&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u4eba&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u517c&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;C&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;E&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;O&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u5434&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u6b23&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u9e3f&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u53d1&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u9001&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u4e86&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u4e00&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u5c01&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u5185&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u90e8&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u5168&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u5458&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u90ae&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;\u4ef6&lt;/span&gt;&lt;span style=\"font-weight: normal;\"&gt;,&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u6d89&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u53ca&lt;/span&gt;&lt;span style=\"font-weight: bolder;\"&gt;\u7ecf&lt;/span&gt;\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> <p>1\u670810\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002 \u2026\u2026</p> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"FONT_WEIGHT\", \"confusables_chars\": [], \"confusables_chars_key\": \"bolder\", \"wm_base\": 2, \"method\": 3, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#homograph_chinese","title":"HOMOGRAPH_CHINESE","text":"InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t HOMOGRAPH_CHINESE                1\u2f4910\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\uf9ba\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u02f4\u79d1\u6280\u521b\u65b0\u02f4\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\uf938\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u90ae\u4ef6\u663e\u2f70,\u7f8e\u56fe\u516c\u53f8\u5c06\u5bf9\ufa72\u4f53\u5458\u5de5\u8fdb\u884c\u80a1\u7968\u5956\u52b1,\u8fd9\u662f\u7f8e\u56fe\u516c\u53f8\u4e0e\u5458\u5de5\u5171\u4eab\u7ecf\u8425\ud87e\udcb2\u679c\u02f4\u5171\u8d74\u957f\u671f\u53d1\u5c55\u7684\u5fc3\u613f\u3002\n\u6b64\u5916,\u90ae\u4ef6\u8fd8\u900f\u9732\u7f8e\u56fe\u4f4d\u4e8e\u53a6\u2ed4\u7684\u603b\u90e8\u65b0\u2f24\u53a6\ud87e\udc2f\u5c06\u542f\u7528\u3002\u636e\u5434\u6b23\u9e3f\u4ecb\u7ecd,\u65b0\u5927\u53a6\u9664\u4e86\u5168\u9762\u63d0\u5347\u7684\u529e\u516c\u7a7a\u95f4,\u8fd8\u5305\u62ec\u4f01\u4e1a\u5c55\u5385\u3001\u57f9\u8bad\u4e2d\u5fc3\u3001\u76f4\u64ad\u4e2d\u5fc3\u3001\u827a\u672f\u4e2d\u5fc3\u3001\u9910\u5385\u3001\u5496\u5561\u5385\u3001\u5065\u8eab\u623f\u3001\u56fe\u4e66\u9986\u3001\u7a7a\u4e2d\u82b1\u56ed\u7b49\u914d\u5957\u8bbe\u65bd\u3002\n\u516c\u5f00\u4fe1\u606f\u663e\u793a,\u7f8e\u56fe\u516c\u53f8\u4e8e2020\u5e74\u8d2d\u4e70\u4e86\u4e00\u680b\u4f4d\u4e8e\u53a6\u95e8\u7f8e\u5cf0\u521b\u8c37\u7684\u529e\u516c\u697c,\u603b\u5efa\u7b51\u9762\u79ef\u7ea63.42\u4e07\u5e73\u65b9\u7c73\u3002\n\u90a3\u4e48\u9664\u4e86\u5916\u754c\u6700\u5173\u6ce8\u7684\u5168\u5458\u80a1\u6743\u53d1\u653e\u4ee5\u53ca\u5165\u4f4f\u5168\u65b0\u603b\u90e8\u5927\u697c\u5916,\u90ae\u4ef6\u8fd8\u900f\u9732\u4e86\u54ea\u4e9b\u91cd\u8981\u4fe1\u606f\u5462\uff1f\u5176\u5b9e\u4f59\u4e0b\u7684\u4fe1\u606f\u66f4\u503c\u5f97\u6295\u8d44\u4eba\u5173\u6ce8\u3002\n\u90ae\u4ef6\u4fe1\u606f,2022\u5e74\u662f\u7f8e\u56fe\u5fd9\u4e2d\u6709\u5e8f\u3001\u7a33\u4e2d\u6c42\u8fdb\u7684\u4e00\u5e74\u3002\u516c\u53f8\u5bf9\u7f8e\u56fe\u79c0\u79c0\u3001\u7f8e\u989c\u76f8\u673a\u3001Wink\u3001\u7f8e\u56fe\u8bc1\u4ef6\u7167\u7b49\u51e0\u6b3e\u4ea7\u54c1\u7684\u7a81\u7834\u548c\u8868\u73b0,\u5bf9AI\u7ed8\u753b\u529f\u80fd\u64ac\u52a8\u7f8e\u56fe\u6d77\u5916\u4ea7\u54c1\u6392\u540d\u6500\u5347\u8868\u793a\u6ee1\u610f\u3002,\u6b64\u5916,\u4f34\u968f\u7740\u8d8a\u6765\u8d8a\u597d\u7684\u5e02\u573a\u53cd\u9988\u548c\u8d22\u52a1\u72b6\u51b5,\u7f8e\u56fe\u516c\u53f8\u5168\u5458\u90fd\u6536\u83b7\u4e86\u4e45\u8fdd\u7684\u4fe1\u5fc3\u548c\u6597\u5fd7\u3002\u5f88\u663e\u7136,\u7f8e\u56fe\u516c\u53f8\u65e0\u8bba\u662f\u9ad8\u5c42\u8fd8\u662f\u5458\u5de5,\u5bf9\u7f8e\u56fe\u7684\u672a\u6765\u90fd\u5145\u6ee1\u4e86\u4fe1\u5fc3\u3002\n\u8fd9\u79cd\u5185\u90e8\u51dd\u805a\u7684\u6c14\u6c1b\u6765\u6e90\u4e8e\u54ea\u5462\uff1f\u636e\u6089,\u7f8e\u56fe\u516c\u53f82022\u5e74\u4e0a\u534a\u5e74\u8d22\u62a5,\u4e0a\u534a\u5e74\u603b\u6536\u5165\u4eba\u6c11\u5e019.712\u4ebf\u5143,\u540c\u6bd4\u589e\u957f20.5%\u3002\u622a\u6b62\u52302022\u5e746\u6708,\u7f8e\u56fe\u516c\u53f8\u6708\u6d3b\u8dc3\u7528\u6237\u6570\u8fbe2.409\u4ebf,\u73af\u6bd42021\u5e7412\u6708\u589e\u957f4.5%\u3002\u4f18\u79c0\u7684\u4e1a\u7ee9\u4e0b,\u7f8e\u56fe\u786e\u5b9e\u6709\u7406\u7531\u5bf9\u672a\u6765\u4fdd\u6301\u5145\u5206\u7684\u4e50\u89c2\u3002\n\u800c2023\u5e74\u662f\u7f8e\u56fe\u6210\u7acb15\u5468\u5e74,\u7f8e\u56fe\u628a\u8fd9\u4e00\u5e74\u770b\u4f5c\u7f8e\u56fe\u516c\u53f8\u7684\u65b0\u8d77\u70b9,\u5e0c\u671b\u80fd\u4e3a\u7528\u6237\u548c\u5ba2\u6237\u6301\u7eed\u63d0\u4f9b\u66f4\u597d\u7684\u5f71\u50cf\u4ea7\u54c1\u548c\u6570\u5b57\u5316\u89e3\u51b3\u65b9\u6848,\u4e5f\u5e2e\u52a9\u6bcf\u4e00\u4f4d\u540c\u4e8b\u8ffd\u6c42\u548c\u5b9e\u73b0\u66f4\u7f8e\u597d\u7684\u751f\u6d3b\u76ee\u6807\u3002\n\u4ece\u5b9e\u9645\u4e1a\u52a1\u5c42\u9762\u770b,\u7f8e\u56fe\u7684\u4e1a\u52a1\u6218\u7565\u5df2\u7ecf\u975e\u5e38\u6e05\u6670,\u6a2a\u5411\u770b,C\u7aef\u7684VIP\u8ba2\u9605\u4e1a\u52a1\u53caB\u7aef\u7684SaaS\u53ca\u76f8\u5173\u4e1a\u52a1\u90fd\u83b7\u5f97\u4e86\u5927\u5e45\u5ea6\u7684\u9006\u52bf\u6210\u957f,\u6708\u6d3b\u6570\u636e\u4e5f\u73af\u6bd4\u51c0\u589e\uff1b\u800c\u7eb5\u5411\u770b,\u7f8e\u56fe\u4e5f\u5728\u4e0d\u65ad\u805a\u7126\u5f71\u50cf\u6838\u5fc3\u80fd\u529b,\u901a\u8fc7\u4eba\u5de5\u667a\u80fd,\u7ee7\u7eed\u6df1\u5316BC\u4e24\u7aef\u4e1a\u52a1\u7684\u7ade\u4e89\u58c1\u5792\u3002\u901a\u8fc7\u6210\u719f\u4e14\u5df2\u88ab\u5e02\u573a\u68c0\u9a8c\u7684\u5546\u4e1a\u8def\u5f84\u6301\u7eed\u53d1\u529b,\u6295\u8d44\u4eba\u6709\u7406\u7531\u770b\u597d\u7f8e\u56fe\u57282023\u5e74\u7684\u4e1a\u7ee9\u8868\u73b0\u3002\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"HOMOGRAPH_CHINESE\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 2, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 35, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#homograph_letters","title":"HOMOGRAPH_LETTERS","text":"InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t HOMOGRAPH_LETTERS      1\u670810\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517c\u216dE\u2d54\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u90ae\u4ef6\u663e\u793a,\u7f8e\u56fe\u516c\u53f8\u5c06\u5bf9\u5168\u4f53\u5458\u5de5\u8fdb\u884c\u80a1\u7968\u5956\u52b1,\u8fd9\u662f\u7f8e\u56fe\u516c\u53f8\u4e0e\u5458\u5de5\u5171\u4eab\u7ecf\u8425\u6210\u679c\u3001\u5171\u8d74\u957f\u671f\u53d1\u5c55\u7684\u5fc3\u613f\u3002\n\u6b64\u5916,\u90ae\u4ef6\u8fd8\u900f\u9732\u7f8e\u56fe\u4f4d\u4e8e\u53a6\u95e8\u7684\u603b\u90e8\u65b0\u5927\u53a6\u5373\u5c06\u542f\u7528\u3002\u636e\u5434\u6b23\u9e3f\u4ecb\u7ecd,\u65b0\u5927\u53a6\u9664\u4e86\u5168\u9762\u63d0\u5347\u7684\u529e\u516c\u7a7a\u95f4,\u8fd8\u5305\u62ec\u4f01\u4e1a\u5c55\u5385\u3001\u57f9\u8bad\u4e2d\u5fc3\u3001\u76f4\u64ad\u4e2d\u5fc3\u3001\u827a\u672f\u4e2d\u5fc3\u3001\u9910\u5385\u3001\u5496\u5561\u5385\u3001\u5065\u8eab\u623f\u3001\u56fe\u4e66\u9986\u3001\u7a7a\u4e2d\u82b1\u56ed\u7b49\u914d\u5957\u8bbe\u65bd\u3002\n\u516c\u5f00\u4fe1\u606f\u663e\u793a,\u7f8e\u56fe\u516c\u53f8\u4e8e2020\u5e74\u8d2d\u4e70\u4e86\u4e00\u680b\u4f4d\u4e8e\u53a6\u95e8\u7f8e\u5cf0\u521b\u8c37\u7684\u529e\u516c\u697c,\u603b\u5efa\u7b51\u9762\u79ef\u7ea63.42\u4e07\u5e73\u65b9\u7c73\u3002\n\u90a3\u4e48\u9664\u4e86\u5916\u754c\u6700\u5173\u6ce8\u7684\u5168\u5458\u80a1\u6743\u53d1\u653e\u4ee5\u53ca\u5165\u4f4f\u5168\u65b0\u603b\u90e8\u5927\u697c\u5916,\u90ae\u4ef6\u8fd8\u900f\u9732\u4e86\u54ea\u4e9b\u91cd\u8981\u4fe1\u606f\u5462?\u5176\u5b9e\u4f59\u4e0b\u7684\u4fe1\u606f\u66f4\u503c\u5f97\u6295\u8d44\u4eba\u5173\u6ce8\u3002\n\u90ae\u4ef6\u4fe1\u606f,2022\u5e74\u662f\u7f8e\u56fe\u5fd9\u4e2d\u6709\u5e8f\u3001\u7a33\u4e2d\u6c42\u8fdb\u7684\u4e00\u5e74\u3002\u516c\u53f8\u5bf9\u7f8e\u56fe\u79c0\u79c0\u3001\u7f8e\u989c\u76f8\u673a\u3001W\ud835\udc22n\ud835\ude60\u3001\u7f8e\u56fe\u8bc1\u4ef6\u7167\u7b49\u51e0\u6b3e\u4ea7\u54c1\u7684\u7a81\u7834\u548c\u8868\u73b0,\u5bf9A\ud835\udc08\u7ed8\u753b\u529f\u80fd\u64ac\u52a8\u7f8e\u56fe\u6d77\u5916\u4ea7\u54c1\u6392\u540d\u6500\u5347\u8868\u793a\u6ee1\u610f\u3002,\u6b64\u5916,\u4f34\u968f\u7740\u8d8a\u6765\u8d8a\u597d\u7684\u5e02\u573a\u53cd\u9988\u548c\u8d22\u52a1\u72b6\u51b5,\u7f8e\u56fe\u516c\u53f8\u5168\u5458\u90fd\u6536\u83b7\u4e86\u4e45\u8fdd\u7684\u4fe1\u5fc3\u548c\u6597\u5fd7\u3002\u5f88\u663e\u7136,\u7f8e\u56fe\u516c\u53f8\u65e0\u8bba\u662f\u9ad8\u5c42\u8fd8\u662f\u5458\u5de5,\u5bf9\u7f8e\u56fe\u7684\u672a\u6765\u90fd\u5145\u6ee1\u4e86\u4fe1\u5fc3\u3002\n\u8fd9\u79cd\u5185\u90e8\u51dd\u805a\u7684\u6c14\u6c1b\u6765\u6e90\u4e8e\u54ea\u5462?\u636e\u6089,\u7f8e\u56fe\u516c\u53f82022\u5e74\u4e0a\u534a\u5e74\u8d22\u62a5,\u4e0a\u534a\u5e74\u603b\u6536\u5165\u4eba\u6c11\u5e019.712\u4ebf\u5143,\u540c\u6bd4\u589e\u957f20.5%\u3002\u622a\u6b62\u52302022\u5e746\u6708,\u7f8e\u56fe\u516c\u53f8\u6708\u6d3b\u8dc3\u7528\u6237\u6570\u8fbe2.409\u4ebf,\u73af\u6bd42021\u5e7412\u6708\u589e\u957f4.5%\u3002\u4f18\u79c0\u7684\u4e1a\u7ee9\u4e0b,\u7f8e\u56fe\u786e\u5b9e\u6709\u7406\u7531\u5bf9\u672a\u6765\u4fdd\u6301\u5145\u5206\u7684\u4e50\u89c2\u3002\n\u800c2023\u5e74\u662f\u7f8e\u56fe\u6210\u7acb15\u5468\u5e74,\u7f8e\u56fe\u628a\u8fd9\u4e00\u5e74\u770b\u4f5c\u7f8e\u56fe\u516c\u53f8\u7684\u65b0\u8d77\u70b9,\u5e0c\u671b\u80fd\u4e3a\u7528\u6237\u548c\u5ba2\u6237\u6301\u7eed\u63d0\u4f9b\u66f4\u597d\u7684\u5f71\u50cf\u4ea7\u54c1\u548c\u6570\u5b57\u5316\u89e3\u51b3\u65b9\u6848,\u4e5f\u5e2e\u52a9\u6bcf\u4e00\u4f4d\u540c\u4e8b\u8ffd\u6c42\u548c\u5b9e\u73b0\u66f4\u7f8e\u597d\u7684\u751f\u6d3b\u76ee\u6807\u3002\n\u4ece\u5b9e\u9645\u4e1a\u52a1\u5c42\u9762\u770b,\u7f8e\u56fe\u7684\u4e1a\u52a1\u6218\u7565\u5df2\u7ecf\u975e\u5e38\u6e05\u6670,\u6a2a\u5411\u770b,C\u7aef\u7684\ud835\udc15I\ud835\uddaf\u8ba2\u9605\u4e1a\u52a1\u53caB\u7aef\u7684SaaS\u53ca\u76f8\u5173\u4e1a\u52a1\u90fd\u83b7\u5f97\u4e86\u5927\u5e45\u5ea6\u7684\u9006\u52bf\u6210\u957f,\u6708\u6d3b\u6570\u636e\u4e5f\u73af\u6bd4\u51c0\u589e;\u800c\u7eb5\u5411\u770b,\u7f8e\u56fe\u4e5f\u5728\u4e0d\u65ad\u805a\u7126\u5f71\u50cf\u6838\u5fc3\u80fd\u529b,\u901a\u8fc7\u4eba\u5de5\u667a\u80fd,\u7ee7\u7eed\u6df1\u5316BC\u4e24\u7aef\u4e1a\u52a1\u7684\u7ade\u4e89\u58c1\u5792\u3002\u901a\u8fc7\u6210\u719f\u4e14\u5df2\u88ab\u5e02\u573a\u68c0\u9a8c\u7684\u5546\u4e1a\u8def\u5f84\u6301\u7eed\u53d1\u529b,\u6295\u8d44\u4eba\u6709\u7406\u7531\u770b\u597d\u7f8e\u56fe\u57282023\u5e74\u7684\u4e1a\u7ee9\u8868\u73b0\u3002\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"HOMOGRAPH_LETTERS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 8, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 13, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#homograph_numbers","title":"HOMOGRAPH_NUMBERS","text":"InsertRetrieveWith --no-flag-bit option Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t HOMOGRAPH_NUMBERS   \u04c0\u6708\u04c00\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u90ae\u4ef6\u663e\u793a,\u7f8e\u56fe\u516c\u53f8\u5c06\u5bf9\u5168\u4f53\u5458\u5de5\u8fdb\u884c\u80a1\u7968\u5956\u52b1,\u8fd9\u662f\u7f8e\u56fe\u516c\u53f8\u4e0e\u5458\u5de5\u5171\u4eab\u7ecf\u8425\u6210\u679c\u3001\u5171\u8d74\u957f\u671f\u53d1\u5c55\u7684\u5fc3\u613f\u3002\n\u6b64\u5916,\u90ae\u4ef6\u8fd8\u900f\u9732\u7f8e\u56fe\u4f4d\u4e8e\u53a6\u95e8\u7684\u603b\u90e8\u65b0\u5927\u53a6\u5373\u5c06\u542f\u7528\u3002\u636e\u5434\u6b23\u9e3f\u4ecb\u7ecd,\u65b0\u5927\u53a6\u9664\u4e86\u5168\u9762\u63d0\u5347\u7684\u529e\u516c\u7a7a\u95f4,\u8fd8\u5305\u62ec\u4f01\u4e1a\u5c55\u5385\u3001\u57f9\u8bad\u4e2d\u5fc3\u3001\u76f4\u64ad\u4e2d\u5fc3\u3001\u827a\u672f\u4e2d\u5fc3\u3001\u9910\u5385\u3001\u5496\u5561\u5385\u3001\u5065\u8eab\u623f\u3001\u56fe\u4e66\u9986\u3001\u7a7a\u4e2d\u82b1\u56ed\u7b49\u914d\u5957\u8bbe\u65bd\u3002\n\u516c\u5f00\u4fe1\u606f\u663e\u793a,\u7f8e\u56fe\u516c\u53f8\u4e8e\ud835\udfee\ud835\udfce\ud835\udfd00\u5e74\u8d2d\u4e70\u4e86\u4e00\u680b\u4f4d\u4e8e\u53a6\u95e8\u7f8e\u5cf0\u521b\u8c37\u7684\u529e\u516c\u697c,\u603b\u5efa\u7b51\u9762\u79ef\u7ea6\u2ccc.\ud835\udfd2\ud835\udfda\u4e07\u5e73\u65b9\u7c73\u3002\n\u90a3\u4e48\u9664\u4e86\u5916\u754c\u6700\u5173\u6ce8\u7684\u5168\u5458\u80a1\u6743\u53d1\u653e\u4ee5\u53ca\u5165\u4f4f\u5168\u65b0\u603b\u90e8\u5927\u697c\u5916,\u90ae\u4ef6\u8fd8\u900f\u9732\u4e86\u54ea\u4e9b\u91cd\u8981\u4fe1\u606f\u5462?\u5176\u5b9e\u4f59\u4e0b\u7684\u4fe1\u606f\u66f4\u503c\u5f97\u6295\u8d44\u4eba\u5173\u6ce8\u3002\n\u90ae\u4ef6\u4fe1\u606f,\ud835\udfe4\ud835\udfec\ud835\udff82\u5e74\u662f\u7f8e\u56fe\u5fd9\u4e2d\u6709\u5e8f\u3001\u7a33\u4e2d\u6c42\u8fdb\u7684\u4e00\u5e74\u3002\u516c\u53f8\u5bf9\u7f8e\u56fe\u79c0\u79c0\u3001\u7f8e\u989c\u76f8\u673a\u3001Wink\u3001\u7f8e\u56fe\u8bc1\u4ef6\u7167\u7b49\u51e0\u6b3e\u4ea7\u54c1\u7684\u7a81\u7834\u548c\u8868\u73b0,\u5bf9AI\u7ed8\u753b\u529f\u80fd\u64ac\u52a8\u7f8e\u56fe\u6d77\u5916\u4ea7\u54c1\u6392\u540d\u6500\u5347\u8868\u793a\u6ee1\u610f\u3002,\u6b64\u5916,\u4f34\u968f\u7740\u8d8a\u6765\u8d8a\u597d\u7684\u5e02\u573a\u53cd\u9988\u548c\u8d22\u52a1\u72b6\u51b5,\u7f8e\u56fe\u516c\u53f8\u5168\u5458\u90fd\u6536\u83b7\u4e86\u4e45\u8fdd\u7684\u4fe1\u5fc3\u548c\u6597\u5fd7\u3002\u5f88\u663e\u7136,\u7f8e\u56fe\u516c\u53f8\u65e0\u8bba\u662f\u9ad8\u5c42\u8fd8\u662f\u5458\u5de5,\u5bf9\u7f8e\u56fe\u7684\u672a\u6765\u90fd\u5145\u6ee1\u4e86\u4fe1\u5fc3\u3002\n\u8fd9\u79cd\u5185\u90e8\u51dd\u805a\u7684\u6c14\u6c1b\u6765\u6e90\u4e8e\u54ea\u5462?\u636e\u6089,\u7f8e\u56fe\u516c\u53f82022\u5e74\u4e0a\u534a\u5e74\u8d22\u62a5,\u4e0a\u534a\u5e74\u603b\u6536\u5165\u4eba\u6c11\u5e019.712\u4ebf\u5143,\u540c\u6bd4\u589e\u957f20.5%\u3002\u622a\u6b62\u52302022\u5e746\u6708,\u7f8e\u56fe\u516c\u53f8\u6708\u6d3b\u8dc3\u7528\u6237\u6570\u8fbe2.409\u4ebf,\u73af\u6bd42021\u5e7412\u6708\u589e\u957f4.5%\u3002\u4f18\u79c0\u7684\u4e1a\u7ee9\u4e0b,\u7f8e\u56fe\u786e\u5b9e\u6709\u7406\u7531\u5bf9\u672a\u6765\u4fdd\u6301\u5145\u5206\u7684\u4e50\u89c2\u3002\n\u800c2023\u5e74\u662f\u7f8e\u56fe\u6210\u7acb15\u5468\u5e74,\u7f8e\u56fe\u628a\u8fd9\u4e00\u5e74\u770b\u4f5c\u7f8e\u56fe\u516c\u53f8\u7684\u65b0\u8d77\u70b9,\u5e0c\u671b\u80fd\u4e3a\u7528\u6237\u548c\u5ba2\u6237\u6301\u7eed\u63d0\u4f9b\u66f4\u597d\u7684\u5f71\u50cf\u4ea7\u54c1\u548c\u6570\u5b57\u5316\u89e3\u51b3\u65b9\u6848,\u4e5f\u5e2e\u52a9\u6bcf\u4e00\u4f4d\u540c\u4e8b\u8ffd\u6c42\u548c\u5b9e\u73b0\u66f4\u7f8e\u597d\u7684\u751f\u6d3b\u76ee\u6807\u3002\n\u4ece\u5b9e\u9645\u4e1a\u52a1\u5c42\u9762\u770b,\u7f8e\u56fe\u7684\u4e1a\u52a1\u6218\u7565\u5df2\u7ecf\u975e\u5e38\u6e05\u6670,\u6a2a\u5411\u770b,C\u7aef\u7684VIP\u8ba2\u9605\u4e1a\u52a1\u53caB\u7aef\u7684SaaS\u53ca\u76f8\u5173\u4e1a\u52a1\u90fd\u83b7\u5f97\u4e86\u5927\u5e45\u5ea6\u7684\u9006\u52bf\u6210\u957f,\u6708\u6d3b\u6570\u636e\u4e5f\u73af\u6bd4\u51c0\u589e;\u800c\u7eb5\u5411\u770b,\u7f8e\u56fe\u4e5f\u5728\u4e0d\u65ad\u805a\u7126\u5f71\u50cf\u6838\u5fc3\u80fd\u529b,\u901a\u8fc7\u4eba\u5de5\u667a\u80fd,\u7ee7\u7eed\u6df1\u5316BC\u4e24\u7aef\u4e1a\u52a1\u7684\u7ade\u4e89\u58c1\u5792\u3002\u901a\u8fc7\u6210\u719f\u4e14\u5df2\u88ab\u5e02\u573a\u68c0\u9a8c\u7684\u5546\u4e1a\u8def\u5f84\u6301\u7eed\u53d1\u529b,\u6295\u8d44\u4eba\u6709\u7406\u7531\u770b\u597d\u7f8e\u56fe\u57282023\u5e74\u7684\u4e1a\u7ee9\u8868\u73b0\u3002\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"HOMOGRAPH_NUMBERS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 7, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 13, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre> Bash Session<pre><code>$ textwatermark -v insert -f /tmp/tmp_for_test_textwatermark.txt -m REAL_NUMBER -t HOMOGRAPH_NUMBERS -x \"1977326742\" -w \"1977326741\"  -n\n\n\ud835\udff7\ud835\udff8\ud835\udff9\ud835\udffa\ud835\udffb\ud835\udffc\ud835\udffd\ud835\udffe\ud835\udfff\ud835\udff6\ud835\udfed\n$ textwatermark retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"HOMOGRAPH_NUMBERS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 7, \"method\": 1, \"wm_mode\": 1, \"wm_len\": 11, \"wm_flag_bit\": false, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.3\"}'\n1977326741\n</code></pre>"},{"location":"example/#homograph_punctuations","title":"HOMOGRAPH_PUNCTUATIONS","text":"InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -t HOMOGRAPH_PUNCTUATIONS      1\u670810\u65e5\u066b\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u90ae\u4ef6\u663e\u793a\u066b\u7f8e\u56fe\u516c\u53f8\u5c06\u5bf9\u5168\u4f53\u5458\u5de5\u8fdb\u884c\u80a1\u7968\u5956\u52b1\u201a\u8fd9\u662f\u7f8e\u56fe\u516c\u53f8\u4e0e\u5458\u5de5\u5171\u4eab\u7ecf\u8425\u6210\u679c\u3001\u5171\u8d74\u957f\u671f\u53d1\u5c55\u7684\u5fc3\u613f\u3002\n\u6b64\u5916\u201a\u90ae\u4ef6\u8fd8\u900f\u9732\u7f8e\u56fe\u4f4d\u4e8e\u53a6\u95e8\u7684\u603b\u90e8\u65b0\u5927\u53a6\u5373\u5c06\u542f\u7528\u3002\u636e\u5434\u6b23\u9e3f\u4ecb\u7ecd,\u65b0\u5927\u53a6\u9664\u4e86\u5168\u9762\u63d0\u5347\u7684\u529e\u516c\u7a7a\u95f4,\u8fd8\u5305\u62ec\u4f01\u4e1a\u5c55\u5385\u3001\u57f9\u8bad\u4e2d\u5fc3\u3001\u76f4\u64ad\u4e2d\u5fc3\u3001\u827a\u672f\u4e2d\u5fc3\u3001\u9910\u5385\u3001\u5496\u5561\u5385\u3001\u5065\u8eab\u623f\u3001\u56fe\u4e66\u9986\u3001\u7a7a\u4e2d\u82b1\u56ed\u7b49\u914d\u5957\u8bbe\u65bd\u3002\n\u516c\u5f00\u4fe1\u606f\u663e\u793a,\u7f8e\u56fe\u516c\u53f8\u4e8e2020\u5e74\u8d2d\u4e70\u4e86\u4e00\u680b\u4f4d\u4e8e\u53a6\u95e8\u7f8e\u5cf0\u521b\u8c37\u7684\u529e\u516c\u697c\u201a\u603b\u5efa\u7b51\u9762\u79ef\u7ea63.42\u4e07\u5e73\u65b9\u7c73\u3002\n\u90a3\u4e48\u9664\u4e86\u5916\u754c\u6700\u5173\u6ce8\u7684\u5168\u5458\u80a1\u6743\u53d1\u653e\u4ee5\u53ca\u5165\u4f4f\u5168\u65b0\u603b\u90e8\u5927\u697c\u5916\u066b\u90ae\u4ef6\u8fd8\u900f\u9732\u4e86\u54ea\u4e9b\u91cd\u8981\u4fe1\u606f\u5462\u097d\u5176\u5b9e\u4f59\u4e0b\u7684\u4fe1\u606f\u66f4\u503c\u5f97\u6295\u8d44\u4eba\u5173\u6ce8\u3002\n\u90ae\u4ef6\u4fe1\u606f,2022\u5e74\u662f\u7f8e\u56fe\u5fd9\u4e2d\u6709\u5e8f\u3001\u7a33\u4e2d\u6c42\u8fdb\u7684\u4e00\u5e74\u3002\u516c\u53f8\u5bf9\u7f8e\u56fe\u79c0\u79c0\u3001\u7f8e\u989c\u76f8\u673a\u3001Wink\u3001\u7f8e\u56fe\u8bc1\u4ef6\u7167\u7b49\u51e0\u6b3e\u4ea7\u54c1\u7684\u7a81\u7834\u548c\u8868\u73b0\u201a\u5bf9AI\u7ed8\u753b\u529f\u80fd\u64ac\u52a8\u7f8e\u56fe\u6d77\u5916\u4ea7\u54c1\u6392\u540d\u6500\u5347\u8868\u793a\u6ee1\u610f\u3002\u201a\u6b64\u5916,\u4f34\u968f\u7740\u8d8a\u6765\u8d8a\u597d\u7684\u5e02\u573a\u53cd\u9988\u548c\u8d22\u52a1\u72b6\u51b5\u201a\u7f8e\u56fe\u516c\u53f8\u5168\u5458\u90fd\u6536\u83b7\u4e86\u4e45\u8fdd\u7684\u4fe1\u5fc3\u548c\u6597\u5fd7\u3002\u5f88\u663e\u7136\u066b\u7f8e\u56fe\u516c\u53f8\u65e0\u8bba\u662f\u9ad8\u5c42\u8fd8\u662f\u5458\u5de5,\u5bf9\u7f8e\u56fe\u7684\u672a\u6765\u90fd\u5145\u6ee1\u4e86\u4fe1\u5fc3\u3002\n\u8fd9\u79cd\u5185\u90e8\u51dd\u805a\u7684\u6c14\u6c1b\u6765\u6e90\u4e8e\u54ea\u5462\u097d\u636e\u6089,\u7f8e\u56fe\u516c\u53f82022\u5e74\u4e0a\u534a\u5e74\u8d22\u62a5,\u4e0a\u534a\u5e74\u603b\u6536\u5165\u4eba\u6c11\u5e019.712\u4ebf\u5143,\u540c\u6bd4\u589e\u957f20.5%\u3002\u622a\u6b62\u52302022\u5e746\u6708,\u7f8e\u56fe\u516c\u53f8\u6708\u6d3b\u8dc3\u7528\u6237\u6570\u8fbe2.409\u4ebf,\u73af\u6bd42021\u5e7412\u6708\u589e\u957f4.5%\u3002\u4f18\u79c0\u7684\u4e1a\u7ee9\u4e0b,\u7f8e\u56fe\u786e\u5b9e\u6709\u7406\u7531\u5bf9\u672a\u6765\u4fdd\u6301\u5145\u5206\u7684\u4e50\u89c2\u3002\n\u800c2023\u5e74\u662f\u7f8e\u56fe\u6210\u7acb15\u5468\u5e74,\u7f8e\u56fe\u628a\u8fd9\u4e00\u5e74\u770b\u4f5c\u7f8e\u56fe\u516c\u53f8\u7684\u65b0\u8d77\u70b9,\u5e0c\u671b\u80fd\u4e3a\u7528\u6237\u548c\u5ba2\u6237\u6301\u7eed\u63d0\u4f9b\u66f4\u597d\u7684\u5f71\u50cf\u4ea7\u54c1\u548c\u6570\u5b57\u5316\u89e3\u51b3\u65b9\u6848,\u4e5f\u5e2e\u52a9\u6bcf\u4e00\u4f4d\u540c\u4e8b\u8ffd\u6c42\u548c\u5b9e\u73b0\u66f4\u7f8e\u597d\u7684\u751f\u6d3b\u76ee\u6807\u3002\n\u4ece\u5b9e\u9645\u4e1a\u52a1\u5c42\u9762\u770b,\u7f8e\u56fe\u7684\u4e1a\u52a1\u6218\u7565\u5df2\u7ecf\u975e\u5e38\u6e05\u6670,\u6a2a\u5411\u770b,C\u7aef\u7684VIP\u8ba2\u9605\u4e1a\u52a1\u53caB\u7aef\u7684SaaS\u53ca\u76f8\u5173\u4e1a\u52a1\u90fd\u83b7\u5f97\u4e86\u5927\u5e45\u5ea6\u7684\u9006\u52bf\u6210\u957f,\u6708\u6d3b\u6570\u636e\u4e5f\u73af\u6bd4\u51c0\u589e;\u800c\u7eb5\u5411\u770b,\u7f8e\u56fe\u4e5f\u5728\u4e0d\u65ad\u805a\u7126\u5f71\u50cf\u6838\u5fc3\u80fd\u529b,\u901a\u8fc7\u4eba\u5de5\u667a\u80fd,\u7ee7\u7eed\u6df1\u5316BC\u4e24\u7aef\u4e1a\u52a1\u7684\u7ade\u4e89\u58c1\u5792\u3002\u901a\u8fc7\u6210\u719f\u4e14\u5df2\u88ab\u5e02\u573a\u68c0\u9a8c\u7684\u5546\u4e1a\u8def\u5f84\u6301\u7eed\u53d1\u529b,\u6295\u8d44\u4eba\u6709\u7406\u7531\u770b\u597d\u7f8e\u56fe\u57282023\u5e74\u7684\u4e1a\u7ee9\u8868\u73b0\u3002\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"HOMOGRAPH_PUNCTUATIONS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 3, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 23, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#html_empty_tags","title":"HTML_EMPTY_TAGS","text":"InsertWeb ViewRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -i 1 -t HTML_EMPTY_TAGS                     1&lt;abbr&gt;&lt;/abbr&gt;&lt;abbr&gt;&lt;/abbr&gt;&lt;strong&gt;&lt;/strong&gt;&lt;dfn&gt;&lt;/dfn&gt;&lt;bdo&gt;&lt;/bdo&gt;&lt;a&gt;&lt;/a&gt;&lt;var&gt;&lt;/var&gt;&lt;sup&gt;&lt;/sup&gt;&lt;bdo&gt;&lt;/bdo&gt;\u670810\u65e5, \u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6, \u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001 \u79d1\u6280\u521b\u65b0\u3001 \u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762, \u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> <p>1\u670810\u65e5, \u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6, \u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001 \u79d1\u6280\u521b\u65b0\u3001 \u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762, \u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002 \u2026\u2026</p> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"HTML_EMPTY_TAGS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 20, \"method\": 2, \"wm_mode\": 5, \"wm_len\": 9, \"wm_loop\": false, \"start_at\": 1, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#invisible_chars","title":"INVISIBLE_CHARS","text":"InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999999 -w 123456 -i 1 -t INVISIBLE_CHARS\n\n1\u061c\u180c\ufe07\u180e\ufe0d\ufe0c\u200f\ufe0b\u670810\u65e5,\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001\u79d1\u6280\u521b\u65b0\u3001\u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762,\u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"INVISIBLE_CHARS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 29, \"method\": 2, \"wm_mode\": 5, \"wm_len\": 8, \"wm_loop\": false, \"start_at\": 1, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123456\n</code></pre>"},{"location":"example/#space_chars","title":"SPACE_CHARS","text":"InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 9 -w 1 -i 1 -t SPACE_CHARS\n\n1\u670810\u65e5,\u2002\u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6,\u2003\u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001 \u79d1\u6280\u521b\u65b0\u3001 \u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762, \u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"SPACE_CHARS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 4, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 3, \"wm_loop\": false, \"start_at\": 1, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 7\n</code></pre>"},{"location":"example/#whitespace_chars","title":"WHITESPACE_CHARS","text":"InsertRetrieve Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -x 999 -w 743 -i 1 -t WHITESPACE_CHARS      1\u2000 \u202f \u200a\u2009\u670810\u65e5, \u7f8e\u56fe\u516c\u53f8\u521b\u59cb\u4eba\u517cCEO\u5434\u6b23\u9e3f\u53d1\u9001\u4e86\u4e00\u5c01\u5185\u90e8\u5168\u5458\u90ae\u4ef6, \u6d89\u53ca\u7ecf\u8425\u6218\u7565\u3001 \u79d1\u6280\u521b\u65b0\u3001 \u672a\u6765\u53d1\u5c55\u7b49\u591a\u4e2a\u5c42\u9762, \u540c\u65f6\u5434\u6b23\u9e3f\u8fd8\u5728\u8fd9\u5c01\u90ae\u4ef6\u4e2d\u900f\u9732\u4e86\u7f8e\u56fe\u5168\u5458\u80a1\u7968\u6fc0\u52b1\u548c\u642c\u8fc1\u65b0\u603b\u90e8\u5927\u53a6\u4e24\u4e2a\u6d88\u606f\u3002\n\u2026\u2026\n</code></pre> Bash Session<pre><code>$ textwatermark -v retrieve -f /tmp/out.txt -p '{\"tpl_type\": \"WHITESPACE_CHARS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 14, \"method\": 2, \"wm_mode\": 5, \"wm_len\": 6, \"wm_loop\": false, \"start_at\": 1, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 743\n</code></pre>"},{"location":"","title":"\u9996\u9875","text":""},{"location":"#_1","title":"\u9996\u9875","text":""},{"location":"#_2","title":"\u8981\u6c42","text":"<p>Tested on Python <code>&gt;= 3.10</code></p>"},{"location":"#_3","title":"\u5b89\u88c5","text":""},{"location":"#pip","title":"\u4f7f\u7528Pip","text":"<p><code>$ pip install textwatermark</code></p>"},{"location":"#_4","title":"\u4ece\u6e90\u4ee3\u7801","text":"Bash<pre><code>git clone https://github.com/JDArmy/TextWatermark.git\n\ncd TextWatermark\n\npip install .\n\n# or in editable mode\npip install --editable .\n</code></pre>"},{"location":"#_5","title":"\u4f7f\u7528","text":""},{"location":"#_6","title":"\u547d\u4ee4\u884c","text":""},{"location":"#_7","title":"\u63d2\u5165\u6c34\u5370\u5230\u6587\u672c","text":"Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/number.txt' -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999 -w 123\n\u04c02\ud835\udfd1\ud835\udfd2\ud835\udfd3\u2cd2\ud835\udfdf890\n</code></pre>"},{"location":"#_8","title":"\u4fdd\u5b58\u6c34\u5370\u53c2\u6570","text":"Bash Session<pre><code>$ textwatermark -v insert -f './tests/text/number.txt' -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999 -w 123 -e\n\n{\"tpl_type\": \"HOMOGRAPH_NUMBERS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 7, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 7, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}\n</code></pre>"},{"location":"#_9","title":"\u4ece\u6587\u672c\u63d0\u53d6\u6c34\u5370","text":"Bash Session<pre><code>$ textwatermark -v retrieve -f out.txt -p '{\"tpl_type\": \"HOMOGRAPH_NUMBERS\", \"confusables_chars\": [], \"confusables_chars_key\": \"\", \"wm_base\": 7, \"method\": 1, \"wm_mode\": 5, \"wm_len\": 7, \"wm_loop\": false, \"start_at\": 0, \"version\": \"0.1.2\"}'\nThe retrieved watermark is: 123\n</code></pre>"},{"location":"#_10","title":"\u4ee3\u7801","text":"Python<pre><code>'''Sample Example'''\nimport os\nfrom textwatermark.defines import WMMode\nfrom textwatermark.main import TextWatermark\nfrom textwatermark.template_type import WMTemplateType\n# 1.Init TextWatermark instance\nwm_mode = WMMode.REAL_NUMBER\nwm = TextWatermark(wm_mode=wm_mode)\n# 2.Choose a watermark template\nwm.set_tpl_type(tpl_type=WMTemplateType.HOMOGRAPH_NUMBERS)\n# 3.Set the maximum value of the watermark string\nwm_max = '9'*9\nwm.set_wm_max(wm_max=wm_max)\n# 4.Set the text to be watermarked\nwm.set_text_file(path=os.path.abspath('../tests/text/1.txt'))\n# 5.Insert watermark string to text\nwm_str = '123456789'\nwm_text = wm.insert_watermark(wm_str=wm_str)\nprint(wm_text)\n##############################################################\n# Save the parameters to retrieve the watermark\nparams = wm.export_params()\n# retrieve the watermark\nwm_out_str = TextWatermark.retrieve_watermark(wm_text=wm_text, params=params)\nassert wm_out_str == wm_str\n</code></pre>"},{"location":"#_11","title":"\u66f4\u591a","text":"<p>\u53c2\u89c1\uff1a\u7528\u6cd5</p>"},{"location":"#_12","title":"\u6c34\u5370\u6a21\u677f\u652f\u6301\u60c5\u51b5","text":"WMTemplateType       \u6a21\u677f\u53c2\u6570             Applicable scene       \u9002\u7528\u573a\u666f             Text featureless       \u6587\u672c\u65e0\u7279\u5f81             Support characters       \u652f\u6301\u5b57\u7b26             Plain Text       \u7eaf\u6587\u672c      Concealment        Paste       \u7c98\u8d34             Screenshot       \u622a\u56fe             Photograph       \u5c4f\u6444             Format       \u683c\u5f0f             Style       \u6837\u5f0f             Shape       \u5b57\u5f62             Meaning       \u5b57\u4e49             Number       \u6570\u5b57             Letter       \u5b57\u6bcd             Chinese       \u6c49\u5b57             Special       \u7279\u6b8a      INVISIBLE_CHARS       \u4e0d\u53ef\u89c1\u5b57\u7b26      \u2713 \u00d7 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 High WHITESPACE_CHARS       \u7a7a\u767d\u5b57\u7b26      \u2713 \u00d7 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Medium SPACE_CHARS       \u7a7a\u683c\u5b57\u7b26      \u2713 \u2713 \u2713 \u00d7 \u2713 \u2713 \u2713 \u00d7 \u2713 \u00d7 \u00d7 \u2713 Medium COMBINING_CHARS       \u7ec4\u5408\u5b57\u7b26      \u2713 \u2713 \u2713 \u2713 \u2713 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Medium HOMOGRAPH_NUMBERS       \u540c\u5f62\u5f02\u4e49-\u6570\u5b57      \u2713 \u237b \u237b \u2713 \u2713 \u237b \u00d7 \u2713 \u00d7 \u00d7 \u00d7 \u2713 Low HOMOGRAPH_LETTERS       \u540c\u5f62\u5f02\u4e49-\u5b57\u6bcd      \u2713 \u00d7 \u00d7 \u2713 \u2713 \u237b \u00d7 \u00d7 \u2713 \u00d7 \u00d7 \u2713 Low HOMOGRAPH_CHINESE       \u540c\u5f62\u5f02\u4e49-\u4e2d\u6587      \u2713 \u00d7 \u00d7 \u2713 \u2713 \u2713 \u2713 \u00d7 \u00d7 \u2713 \u00d7 \u2713 Low HOMOGRAPH_PUNCTUATIONS       \u540c\u5f62\u5f02\u4e49-\u6807\u70b9      \u2713 \u00d7 \u00d7 \u2713 \u2713 \u237b \u2713 \u00d7 \u00d7 \u00d7 \u2713 \u2713 Medium FONT_COLOR       \u5b57\u4f53\u989c\u8272      \u237b \u2713 \u2713 \u2713 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u00d7 Medium FONT_SIZE       \u5b57\u4f53\u5927\u5c0f      \u237b \u2713 \u2713 \u2713 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u00d7 Low FONT_WEIGHT       \u5b57\u4f53\u7c97\u7ec6      \u237b \u2713 \u2713 \u2713 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u00d7 Low FONT_FLOAT       \u5b57\u4f53\u6d6e\u52a8      \u237b \u2713 \u2713 \u2713 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u00d7 Low FONT_STYLE       \u81ea\u5b9a\u4e49\u6837\u5f0f      \u237b \u2713 \u2713 \u2713 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u00d7 Low HTML_EMPTY_TAGS       \u7a7aHTML\u5b9e\u4f53      \u237b \u00d7 \u00d7 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u00d7 Low BINARY_REPRESENTATION       \u4e8c\u8fdb\u5236\u8868\u793a      \u2713 \u237b \u237b \u237b \u2713 \u237b \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 High"},{"location":"templates/","title":"\u6c34\u5370\u6a21\u677f","text":""},{"location":"templates/#templates","title":"Templates","text":""},{"location":"templates/#binary_representation","title":"BINARY_REPRESENTATION","text":"<p>Insert the selected character after the text to represent a 1 in binary, otherwise 0.</p> <p>The characters are from combining_chars, invisible_chars and whitespace_chars.</p> confusables_chars_key is needed <p>You can choose one of the characters to insert the watermark</p> Differents between combining_chars, invisible_chars and whitespace_chars <p>combining_chars: Small but recognizable difference in characters  before and after watermarking</p> <p>invisible_chars: You can't see the difference between before  and after inserting the watermark</p> <p>whitespace_chars: There is a small but recognizable difference in  the spacing of characters before and after watermarking</p>"},{"location":"templates/#textwatermark.templates.binary_representation.CONFUSABLES_CHARS_LIST","title":"<code>CONFUSABLES_CHARS_LIST = combining_chars.CONFUSABLES_CHARS + invisible_chars.CONFUSABLES_CHARS + whitespace_chars.CONFUSABLES_CHARS + ['\\x7f']</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.binary_representation.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = dict(zip(CONFUSABLES_CHARS_LIST, CONFUSABLES_CHARS_LIST))</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.binary_representation.method","title":"<code>method = WMMethod.APPEND_AS_BINARY</code>  <code>module-attribute</code>","text":""},{"location":"templates/#combining_chars","title":"COMBINING_CHARS","text":"<p>In concept, a combining character is a mark of some kind intended to be positioned relative to  some other character, which is referred to as its associated base character.</p> Python<pre><code>'''\nIn concept, a combining character is a mark of some kind intended to be positioned relative to \nsome other character, which is referred to as its associated base character.\n'''\nfrom textwatermark.defines import WMMethod\n# \u7ec4\u5408\u5b57\u7b26\uff0c\u5982\u97f3\u6807\u7b49\nCONFUSABLES_CHARS = [\n'\\u0300', '\\u0301', '\\u0302', '\\u0303', '\\u0304', '\\u0306', '\\u0307', '\\u0308',\n'\\u0309', '\\u030a', '\\u030b', '\\u030c', '\\u030f', '\\u0311', '\\u031b', '\\u0323',\n'\\u0324', '\\u0325', '\\u0326', '\\u0327', '\\u0328', '\\u032d', '\\u032e', '\\u0330',\n'\\u0331', '\\u0338', '\\u0340', '\\u0341', '\\u0344', '\\u0487', '\\u05ba', '\\u08e3',\n'\\u0f72', '\\u0f7c', '\\u0f7d', '\\u0f80', '\\u2cef', '\\u2cf0', '\\u2cf1', '\\ua66f',\n'\\ua674', '\\ua675', '\\ua676', '\\ua677', '\\ua678', '\\ua679', '\\ua67a', '\\ua67b',\n'\\ua67c', '\\ua67d', '\\ua69f',\n]\nmethod = WMMethod.APPEND_TO_CHAR\n</code></pre>"},{"location":"templates/#textwatermark.templates.combining_chars.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = ['\u0300', '\u0301', '\u0302', '\u0303', '\u0304', '\u0306', '\u0307', '\u0308', '\u0309', '\u030a', '\u030b', '\u030c', '\u030f', '\u0311', '\u031b', '\u0323', '\u0324', '\u0325', '\u0326', '\u0327', '\u0328', '\u032d', '\u032e', '\u0330', '\u0331', '\u0338', '\u0340', '\u0341', '\u0344', '\u0487', '\u05ba', '\u08e3', '\u0f72', '\u0f7c', '\u0f7d', '\u0f80', '\u2cef', '\u2cf0', '\u2cf1', '\ua66f', '\ua674', '\ua675', '\ua676', '\ua677', '\ua678', '\ua679', '\ua67a', '\ua67b', '\ua67c', '\ua67d', '\ua69f']</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.combining_chars.method","title":"<code>method = WMMethod.APPEND_TO_CHAR</code>  <code>module-attribute</code>","text":""},{"location":"templates/#font_color","title":"FONT_COLOR","text":"<p>Font color template can only be used when the text can be displayed in HTML mode. Such as WEB page, Blog, EMail, etc.  You can customize your own color pairs following the template format.</p> Need to wrap surrounding elements <p>It should be noted that all text needs to be wrapped with a layer of elements in  order to obtain a unified style display</p> confusables_chars_key is needed <p>You can choose one of the key to insert the watermark</p>"},{"location":"templates/#textwatermark.templates.font_color.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'black1': ['#000', '#111'], 'black2': ['#000', '#222'], 'black3': ['#000', '#333'], 'black4': ['#000', '#444'], 'black5': ['#000', '#555'], 'black6': ['#000', '#666'], 'white1': ['#fff', '#eee'], 'white2': ['#fff', '#ddd'], 'white3': ['#fff', '#ccc'], 'white4': ['#fff', '#bbb'], 'white5': ['#fff', '#aaa'], 'white6': ['#fff', '#999']}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.font_color.method","title":"<code>method = WMMethod.DECORATE_EACH_CHAR</code>  <code>module-attribute</code>","text":""},{"location":"templates/#font_float","title":"FONT_FLOAT","text":"<p>Font float template can only be used when the text can be displayed in HTML mode. Such as WEB page, Blog, EMail, etc.  You can customize your own float pairs following the template format.</p> Need to wrap surrounding elements <p>It should be noted that all text needs to be wrapped with a layer of elements in  order to obtain a unified style display</p> confusables_chars_key is needed <p>You can choose one of the key to insert the watermark</p>"},{"location":"templates/#textwatermark.templates.font_float.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'up1': ['top:0', 'top:-1px'], 'up2': ['top:0', 'top:-2px'], 'up3': ['top:0', 'top:-3px'], 'up4': ['top:0', 'top:-4px'], 'up5': ['top:0', 'top:-5px'], 'down1': ['bottom:0', 'bottom:-1px'], 'down2': ['bottom:0', 'bottom:-2px'], 'down3': ['bottom:0', 'bottom:-3px'], 'down4': ['bottom:0', 'bottom:-4px'], 'down5': ['bottom:0', 'bottom:-5px'], 'left1': ['left:0', 'left:-1px'], 'left2': ['left:0', 'left:-2px'], 'left3': ['left:0', 'left:-3px'], 'left4': ['left:0', 'left:-4px'], 'left5': ['left:0', 'left:-5px'], 'right1': ['right:0', 'right:-1px'], 'right2': ['right:0', 'right:-2px'], 'right3': ['right:0', 'right:-3px'], 'right4': ['right:0', 'right:-4px'], 'right5': ['right:0', 'right:-5px']}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.font_float.method","title":"<code>method = WMMethod.DECORATE_EACH_CHAR</code>  <code>module-attribute</code>","text":""},{"location":"templates/#font_size","title":"FONT_SIZE","text":"<p>Font size template can only be used when the text can be displayed in HTML mode. Such as WEB page, Blog, EMail, etc. </p> Need to wrap surrounding elements <p>It should be noted that all text needs to be wrapped with a layer of elements in  order to obtain a unified style display</p> confusables_chars_key is needed <p>You can choose one of the key to insert the watermark</p>"},{"location":"templates/#textwatermark.templates.font_size.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'80': ['100%', '80%'], '81': ['100%', '81%'], '82': ['100%', '82%'], '83': ['100%', '83%'], '84': ['100%', '84%'], '85': ['100%', '85%'], '86': ['100%', '86%'], '87': ['100%', '87%'], '88': ['100%', '88%'], '89': ['100%', '89%'], '90': ['100%', '90%'], '91': ['100%', '91%'], '92': ['100%', '92%'], '93': ['100%', '93%'], '94': ['100%', '94%'], '95': ['100%', '95%'], '96': ['100%', '96%'], '97': ['100%', '97%'], '98': ['100%', '98%'], '99': ['100%', '99%'], '101': ['100%', '101%'], '102': ['100%', '102%'], '103': ['100%', '103%'], '104': ['100%', '104%'], '105': ['100%', '105%'], '106': ['100%', '106%'], '107': ['100%', '107%'], '108': ['100%', '108%'], '109': ['100%', '109%'], '110': ['100%', '110%'], '111': ['100%', '111%'], '112': ['100%', '112%'], '113': ['100%', '113%'], '114': ['100%', '114%'], '115': ['100%', '115%'], '116': ['100%', '116%'], '117': ['100%', '117%'], '118': ['100%', '118%'], '119': ['100%', '119%'], '120': ['100%', '120%']}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.font_size.method","title":"<code>method = WMMethod.DECORATE_EACH_CHAR</code>  <code>module-attribute</code>","text":""},{"location":"templates/#font_style","title":"FONT_STYLE","text":"<p>Font style template can only be used when the text can be displayed in HTML mode. Such as WEB page, Blog, EMail, etc.  You can customize your own style pairs following the template format.</p> Need to wrap surrounding elements <p>It should be noted that all text needs to be wrapped with a layer of elements in  order to obtain a unified style display</p> confusables_chars_key is needed <p>You can choose one of the key to insert the watermark</p>"},{"location":"templates/#textwatermark.templates.font_style.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'text-decoration-underline': ['text-decoration:none', 'text-decoration:underline'], 'text-decoration-line-through': ['text-decoration: none', 'text-decoration: line-through'], 'text-decoration-overline': ['text-decoration: none', 'text-decoration: overline'], 'background-color-white-gray-1': ['background-color:#fff', 'background-color:#eee'], 'background-color-white-gray-2': ['background-color:#fff', 'background-color:#ddd'], 'background-color-white-red-1': ['background-color:#fff', 'background-color:#eff'], 'background-color-white-red-2': ['background-color:#fff', 'background-color:#dff'], 'background-color-white-green-1': ['background-color:#fff', 'background-color:#fef'], 'background-color-white-green-2': ['background-color:#fff', 'background-color:#fdf'], 'background-color-white-blue-1': ['background-color:#fff', 'background-color:#ffe'], 'background-color-white-blue-2': ['background-color:#fff', 'background-color:#ffd'], 'background-color-black-gray-1': ['background-color:#000', 'background-color:#111'], 'background-color-black-gray-2': ['background-color:#000', 'background-color:#222'], 'background-color-black-red-1': ['background-color:#000', 'background-color:#100'], 'background-color-black-red-2': ['background-color:#000', 'background-color:#200'], 'background-color-black-green-1': ['background-color:#000', 'background-color:#010'], 'background-color-black-green-2': ['background-color:#000', 'background-color:#020'], 'background-color-black-blue-1': ['background-color:#000', 'background-color:#001'], 'background-color-black-blue-2': ['background-color:#000', 'background-color:#002'], 'border-top-white-dashed-1': ['border-top: ;', 'border-top: 1px dashed #eee;'], 'border-top-white-dashed-2': ['border-top: ;', 'border-top: 1px dashed #ddd;'], 'border-top-white-dashed-3': ['border-top: ;', 'border-top: 1px dashed #ccc;'], 'border-bottom-white-dashed-1': ['border-bottom: ;', 'border-bottom: 1px dashed #eee;'], 'border-bottom-white-dashed-2': ['border-bottom: ;', 'border-bottom: 1px dashed #ddd;'], 'border-bottom-white-dashed-3': ['border-bottom: ;', 'border-bottom: 1px dashed #ccc;'], 'border-left-white-dashed-1': ['border-left: ;', 'border-left: 1px dashed #eee;'], 'border-left-white-dashed-2': ['border-left: ;', 'border-left: 1px dashed #ddd;'], 'border-left-white-dashed-3': ['border-left: ;', 'border-left: 1px dashed #ccc;'], 'border-right-white-dashed-1': ['border-right: ;', 'border-right: 1px dashed #eee;'], 'border-right-white-dashed-2': ['border-right: ;', 'border-right: 1px dashed #ddd;'], 'border-right-white-dashed-3': ['border-right: ;', 'border-right: 1px dashed #ccc;'], 'border-top-white-solid-1': ['border-top: ;', 'border-top: 1px solid #eee;'], 'border-top-white-solid-2': ['border-top: ;', 'border-top: 1px solid #ddd;'], 'border-top-white-solid-3': ['border-top: ;', 'border-top: 1px solid #ccc;'], 'border-bottom-white-solid-1': ['border-bottom: ;', 'border-bottom: 1px solid #eee;'], 'border-bottom-white-solid-2': ['border-bottom: ;', 'border-bottom: 1px solid #ddd;'], 'border-bottom-white-solid-3': ['border-bottom: ;', 'border-bottom: 1px solid #ccc;'], 'border-left-white-solid-1': ['border-left: ;', 'border-left: 1px solid #eee;'], 'border-left-white-solid-2': ['border-left: ;', 'border-left: 1px solid #ddd;'], 'border-left-white-solid-3': ['border-left: ;', 'border-left: 1px solid #ccc;'], 'border-right-white-solid-1': ['border-right: ;', 'border-right: 1px solid #eee;'], 'border-right-white-solid-2': ['border-right: ;', 'border-right: 1px solid #ddd;'], 'border-right-white-solid-3': ['border-right: ;', 'border-right: 1px solid #ccc;'], 'font-style-italic': ['font-style:normal', 'font-style:italic']}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.font_style.method","title":"<code>method = WMMethod.DECORATE_EACH_CHAR</code>  <code>module-attribute</code>","text":""},{"location":"templates/#font_weight","title":"FONT_WEIGHT","text":"<p>Font weight template can only be used when the text can be displayed in HTML mode. Such as WEB page, Blog, EMail, etc. </p> Need to wrap surrounding elements <p>It should be noted that all text needs to be wrapped with a layer of elements in  order to obtain a unified style display</p> confusables_chars_key is needed <p>You can choose one of the key to insert the watermark</p>"},{"location":"templates/#textwatermark.templates.font_weight.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'lighter': ['normal', 'lighter'], 'bolder': ['normal', 'bolder'], 'lighter-bolder': ['lighter', 'bolder'], '100-200': ['100', '200'], '200-300': ['200', '300'], '300-400': ['300', '400'], '400-500': ['400', '500'], '500-600': ['500', '600'], '600-700': ['600', '700'], '700-800': ['700', '800'], '800-900': ['800', '900']}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.font_weight.method","title":"<code>method = WMMethod.DECORATE_EACH_CHAR</code>  <code>module-attribute</code>","text":""},{"location":"templates/#homograph_chinese","title":"HOMOGRAPH_CHINESE","text":"<p>Homographs in Chinese</p> <p>This template uses one character with the same font but different  Unicode encoding to replace another character. The naked eye cannot  see the difference before and after inserting the watermark</p>"},{"location":"templates/#textwatermark.templates.homograph_chinese.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'\u00b0': '\u309c', '\u2033': '\u309b', '\uff0c': '\u066b', '\u3002': '\u02f3', '\uff1a': '\u205a', '\uff01': '!', '\uff1f': '?', '\u3001': '\u02f4', '\uff1b': ';', '\u2014': '-', '\u00b7': '\u2027', '\u6556': '\ufa90', '\u5ed2': '\ufa82', '\u7ffa': '\ud87e\udd79', '\u6160': '\ufa8a', '\u516b': '\u2f0b', '\u62d4': '\ud87e\udcb6', '\u8dcb': '\ud87e\uddda', '\u767d': '\u2f69', '\u97db': '\ufac9', '\u4b33': '\ud87e\ude03', '\u52f9': '\u2f13', '\u5305': '\ud87e\udc29', '\u5b80': '\u2f27', '\u99c2': '\ud87e\ude06', '\u5bf3': '\ud87e\udc70', '\u62b1': '\ud87e\udcb5', '\u5831': '\ud87e\udc57', '\u66b4': '\ufa06', '\u5351': '\ufa35', '\u7891': '\ufa4b', '\u5317': '\uf963', '\u8d1d': '\u2ec9', '\u8c9d': '\u2f99', '\u5099': '\ud87e\udc09', '\u7295': '\ud87e\udd25', '\u7cd2': '\ud87e\udd66', '\u5954': '\ufa7f', '\u6ccd': '\ud87e\udcfd', '\u8cc1': '\ud87e\uddd5', '\u446b': '\ud87e\udd8e', '\u7d63': '\ud87e\udd6c', '\u8df0': '\ud87e\udddc', '\u9f3b': '\u2fd0', '\u5315': '\u2f14', '\u6bd4': '\u2f50', '\u5eb3': '\ud87e\udc8c', '\u5a62': '\ufa80', '\u97e0': '\ud87e\uddfa', '\u91c6': '\u2fa4', '\u4fbf': '\uf965', '\u8b8a': '\ufac0', '\u9adf': '\u2fbd', '\u8cd3': '\ufa64', '\u4ecc': '\ud87e\udc19', '\u681f': '\ud87e\udce5', '\u927c': '\ud87e\uddea', '\u7592': '\u2f67', '\u4f75': '\ud87e\udc07', '\u4e26': '\ufa70', '\u5eb0': '\ud87e\udc8b', '\u6452': '\ufa8f', '\u7676': '\u2f68', '\u78fb': '\uf964', '\u535a': '\ud87e\udc2e', '\u9238': '\ud87e\udde7', '\u535c': '\u2f18', '\u4e0d': '\uf967', '\u5f69': '\ufa84', '\u83dc': '\ud87e\udda3', '\u53c2': '\uf96b', '\u61af': '\ud87e\udcae', '\u8279': '\u2ebe', '\u8278': '\u2f8b', '\u5202': '\u2e89', '\u5c64': '\ufa3b', '\u36fc': '\ud87e\udc68', '\u8336': '\uf9fe', '\u5277': '\ud87e\udc23', '\u5d7c': '\ud87e\udc80', '\u4a76': '\ud87e\uddf9', '\u9578': '\u2ed2', '\u9577': '\u2ed1', '\u5382': '\u2f1a', '\u3ae4': '\ud87e\udcd1', '\u9b2f': '\u2fbf', '\u5de2': '\ud87e\udc82', '\u911b': '\ud87e\udde6', '\u6f6e': '\ud87e\udd0f', '\u7f7a': '\ud87e\udd76', '\u8f66': '\u2ecb', '\u8eca': '\u2f9e', '\u5c6e': '\u2f2c', '\u778b': '\ud87e\udd4a', '\u81e3': '\u2f82', '\u8fb0': '\u2fa0', '\u455d': '\ud87e\uddae', '\u6210': '\ud87e\udcb2', '\u5448': '\ud87e\udc3e', '\u57ce': '\ud87e\udc52', '\u8aa0': '\ud87e\uddcf', '\u61f2': '\ufa40', '\u86a9': '\ud87e\uddb7', '\u55ab': '\ud87e\udc48', '\u9072': '\ufac3', '\u9f7f': '\u2eee', '\u6b6f': '\u2eed', '\u9f52': '\u2fd2', '\u5f73': '\u2f3b', '\u53f1': '\ud87e\udc3a', '\u8d64': '\u2f9a', '\u5145': '\ufa74', '\u866b': '\u2f8d', '\u81ed': '\ufa5c', '\u5ddb': '\u2f2e', '\u821b': '\u2f87', '\u4e32': '\uf905', '\u8fb5': '\u2fa1', '\u6148': '\ud87e\udca6', '\u5832': '\ud87e\udc56', '\u8f9e': '\ud87e\udd8d', '\u7506': '\ufaa2', '\u5b28': '\ufa81', '\u6b21': '\ud87e\udcef', '\u523a': '\uf9ff', '\u8786': '\ud87e\uddbe', '\u45f9': '\ud87e\uddc2', '\u5306': '\ud87e\udc2a', '\u440b': '\ud87e\udd84', '\u719c': '\ud87e\udd1e', '\u8070': '\ud87e\udd7f', '\u7228': '\ud87e\udd20', '\u8103': '\ud87e\udd83', '\u5bf8': '\u2f28', '\u8516': '\ud87e\uddaa', '\u5927': '\u2f24', '\u6b79': '\u2f4d', '\u7447': '\ud87e\udd2e', '\u6234': '\ufa8c', '\u4ebb': '\u2e85', '\u5369': '\u2f19', '\u4e39': '\uf95e', '\u5f53': '\ud87e\udc74', '\u5200': '\u2f11', '\u83e7': '\ud87e\udd9e', '\u58ac': '\ud87e\udc58', '\u5d6e': '\ud87e\udc7e', '\u6ec7': '\ud87e\udd0c', '\u34b9': '\ud87e\udc13', '\u5f6b': '\ud87e\udc9a', '\u8abf': '\ufab9', '\u8728': '\ud87e\uddbc', '\u9f0e': '\u2fcd', '\u51ac': '\ud87e\udc1a', '\u5f9a': '\ud87e\udc9c', '\u6d1e': '\ufa05', '\u90fd': '\ufa26', '\u3a2e': '\ud87e\udcc2', '\u6597': '\u2f43', '\u8c46': '\u2f96', '\u9b25': '\u2fbe', '\u8b80': '\uf95a', '\u5ea6': '\ufa01', '\u7145': '\ud87e\udd1c', '\u60c7': '\ud87e\udca5', '\u591a': '\ud87e\udc5d', '\u6b7a': '\u2e9e', '\u54a2': '\ud87e\udc40', '\u6076': '\uf9b9', '\u9929': '\ud87e\ude04', '\u513f': '\u2f09', '\u800c': '\u2f7d', '\u8033': '\u2f7f', '\u4e8c': '\u2f06', '\u7e41': '\ufa59', '\u72ad': '\u2ea8', '\u6535': '\u2e99', '\u72af': '\ufa9f', '\u6c4e': '\ud87e\udcfa', '\u98ef': '\ufa2a', '\u531a': '\u2f15', '\u65b9': '\u2f45', '\u98de': '\u2edc', '\u975e': '\u2fae', '\u98db': '\u2fb6', '\u9f16': '\ud87e\ude1b', '\u58b3': '\ufa7d', '\u5e69': '\ud87e\udc87', '\u61a4': '\ud87e\udcad', '\u98ce': '\u2edb', '\u98a8': '\u2fb5', '\u5906': '\ud87e\udc5c', '\u7f36': '\u2f78', '\u7236': '\u2f57', '\u798f': '\ufa1b', '\u8f3b': '\ufa07', '\u961c': '\u2fa9', '\u5a66': '\ud87e\udc66', '\u5fa9': '\uf966', '\u8986': '\ufab7', '\u69ea': '\ud87e\udcea', '\u7518': '\u2f62', '\u5e72': '\u2f32', '\u4bce': '\ud87e\ude08', '\u8d1b': '\ud87e\uddd6', '\u7f53': '\u2eb1', '\u6e2f': '\ud87e\udd08', '\u9ad8': '\u2fbc', '\u6208': '\u2f3d', '\u5272': '\ud87e\udc22', '\u9769': '\u2fb0', '\u9b32': '\u2fc0', '\u826e': '\u2f89', '\u66f4': '\uf901', '\u5de5': '\u2f2f', '\u5f13': '\u2f38', '\u5efe': '\u2f36', '\u3eac': '\ud87e\udd2a', '\u8c37': '\u2f95', '\u9aa8': '\u2ee3', '\u9f13': '\u2fce', '\u7a40': '\ufa54', '\u980b': '\ufacb', '\u74dc': '\u2f60', '\u67fa': '\ud87e\udcdf', '\u761d': '\ufaa4', '\u8218': '\ufa6d', '\u9928': '\ufa2c', '\u535d': '\u2ec0', '\u6bcb': '\u2f4f', '\u5e7f': '\u2f34', '\u9f9f': '\u2ef3', '\u4e80': '\u2ef2', '\u5db2': '\ud87e\uddf4', '\u9f9c': '\uf907', '\u9b3c': '\u2ee4', '\u6d77': '\ufa45', '\u6f22': '\ufa47', '\u884c': '\u2f8f', '\u5651': '\ud87e\udc4e', '\u6d69': '\ud87e\udd03', '\u559d': '\ufa36', '\u79be': '\u2f72', '\u3b9d': '\ufad2', '\u8910': '\ufa60', '\u9db4': '\ufa2d', '\u9f43': '\ufad8', '\u9ed1': '\u2fca', '\u58f7': '\ud87e\udc5b', '\u864d': '\u2f8c', '\u864e': '\u2ec1', '\u6237': '\u2f3e', '\u82b1': '\ud87e\udd93', '\u3b49': '\ud87e\udcde', '\u83ef': '\ufab4', '\u6ed1': '\uf904', '\u92d8': '\ud87e\udde9', '\u753b': '\ufaa3', '\u8352': '\ufab3', '\u614c': '\ud87e\udca7', '\u9ec4': '\u2ee9', '\u9ec3': '\u2fc8', '\u393a': '\ud87e\udca1', '\u5164': '\ud87e\udc10', '\u7070': '\ud87e\udc35', '\u6094': '\ufa3d', '\u5349': '\ud87e\udc2c', '\u60e0': '\ufa6b', '\u5599': '\ufa7a', '\u349e': '\ud87e\udc0c', '\u706b': '\u2f55', '\u706c': '\u2ea3', '\u798d': '\ufa52', '\u6785': '\ud87e\udce0', '\u98e2': '\ud87e\ude02', '\u59ec': '\ud87e\udc62', '\u53ca': '\ud87e\udc36', '\u3515': '\ud87e\udc24', '\u5373': '\ud87e\udc2f', '\u537d': '\ud87e\udc30', '\u63e4': '\ud87e\udcbd', '\u4ced': '\ud87e\ude0e', '\u51e0': '\u2f0f', '\u5df1': '\u2f30', '\u5f50': '\u2e95', '\u5f51': '\u2e94', '\u65e1': '\u2e9b', '\u7d00': '\ud87e\udd6a', '\u65e3': '\ufa42', '\u7a4a': '\ud87e\udd5a', '\u4008': '\ud87e\udd3f', '\u5180': '\ufa75', '\u9c40': '\ud87e\ude0b', '\u621b': '\ud87e\udcb3', '\u8cc8': '\uf903', '\u99f1': '\uf91a', '\u412f': '\ud87e\udd58', '\u8dbc': '\ud87e\udddb', '\u89c1': '\u2ec5', '\u898b': '\u2f92', '\u5c06': '\ud87e\udc73', '\u964d': '\ufa09', '\u647e': '\ud87e\udcc4', '\u7ce8': '\ud87e\udd68', '\u7e9f': '\u2eb0', '\u7cf9': '\u2eaf', '\u89d2': '\u2ec6', '\u6477': '\ud87e\udcc6', '\u53eb': '\ud87e\udc39', '\u83ad': '\ud87e\udd9b', '\u4039': '\ufad4', '\u7bc0': '\ufa56', '\u5dfe': '\u2f31', '\u65a4': '\u2f44', '\u9485': '\u2ed0', '\u91d1': '\u2fa6', '\u84f3': '\ud87e\udda9', '\u8b39': '\ufa63', '\u664b': '\ud87e\udccd', '\u6d78': '\ud87e\udd04', '\u6422': '\ud87e\udcbf', '\u7e09': '\ufa58', '\u7cbe': '\ufa1d', '\u656c': '\ud87e\udcc9', '\u9756': '\ufa1c', '\u701e': '\ufa9b', '\u97ed': '\u2fb2', '\u81fc': '\u2f85', '\u4cce': '\ud87e\ude0d', '\u83ca': '\ud87e\udda1', '\u53e5': '\uf906', '\u5177': '\ud87e\udc11', '\u6350': '\ud87e\udcb7', '\u92d7': '\ud87e\udde8', '\u6081': '\ud87e\udca0', '\u774a': '\ufaa9', '\u7235': '\ud87e\udd21', '\u83cc': '\ud87e\udda2', '\u958b': '\ud87e\uddee', '\u6168': '\ufa3e', '\u6bbb': '\ud87e\udcf6', '\u523b': '\ud87e\udc20', '\u53e3': '\u2f1d', '\u625d': '\ud87e\udcb4', '\u82e6': '\ud87e\udd96', '\u51b5': '\ufa71', '\u8667': '\ud87e\uddb5', '\u5914': '\ud87e\uddb2', '\u4ab2': '\ud87e\uddfc', '\u3c4e': '\ud87e\udcf2', '\u5ed3': '\ufa0b', '\u62c9': '\uf925', '\u5587': '\uf90b', '\u81d8': '\uf926', '\u881f': '\uf927', '\u6765': '\uf92d', '\u7669': '\uf90e', '\u5d50': '\uf921', '\u85cd': '\uf923', '\u8964': '\uf924', '\u862d': '\uf91f', '\u6b04': '\uf91d', '\u61f6': '\uf90d', '\u5b3e': '\ud87e\udc6a', '\u6feb': '\uf922', '\u721b': '\uf91e', '\u90ce': '\uf92c', '\u72fc': '\uf92b', '\u5eca': '\uf928', '\u6717': '\uf929', '\u6d6a': '\uf92a', '\u52b3': '\ud87e\udd92', '\u7262': '\uf946', '\u52de': '\uf92f', '\u8002': '\u2eb9', '\u8001': '\u2f7c', '\u70d9': '\uf916', '\u916a': '\uf919', '\u52d2': '\uf952', '\u4e86': '\uf9ba', '\u96f7': '\uf949', '\u8012': '\u2f7e', '\u78ca': '\uf947', '\u58d8': '\uf94a', '\u808b': '\uf953', '\u7c7b': '\ufaae', '\u7d2f': '\uf94f', '\u6dda': '\uf94d', '\u985e': '\uf9d0', '\u7a1c': '\uf956', '\u51b7': '\uf92e', '\u68a8': '\uf9e2', '\u9ece': '\uf989', '\u7f79': '\uf9e6', '\u96e2': '\uf9ea', '\u9a6a': '\uf987', '\u674e': '\uf9e1', '\u91cc': '\u2fa5', '\u7406': '\uf9e4', '\u88e1': '\uf9e8', '\u88cf': '\uf9e7', '\u79ae': '\uf9b6', '\u91b4': '\uf9b7', '\u529b': '\u2f12', '\u7acb': '\u2f74', '\u540f': '\uf9de', '\u4e3d': '\ud87e\udc00', '\u5229': '\uf9dd', '\u4f8b': '\uf9b5', '\u96b6': '\u2faa', '\u6817': '\uf9da', '\u7b20': '\uf9f8', '\u7c92': '\uf9f9', '\u75e2': '\uf9e5', '\u6144': '\uf9d9', '\u96b7': '\uf9b8', '\u52f5': '\uf97f', '\u6b77': '\uf98c', '\u66c6': '\uf98b', '\u9e97': '\uf988', '\u792a': '\uf985', '\u8f62': '\uf98d', '\u601c': '\uf9ac', '\u9023': '\uf99a', '\u84ee': '\uf999', '\u5ec9': '\uf9a2', '\u6f23': '\uf992', '\u6190': '\uf98f', '\u806f': '\uf997', '\u7c3e': '\uf9a6', '\u7489': '\uf994', '\u7149': '\uf993', '\u7df4': '\uf996', '\u6bae': '\uf9a5', '\u934a': '\uf99b', '\u6200': '\uf990', '\u826f': '\uf97c', '\u51c9': '\uf979', '\u6881': '\uf97a', '\u7ce7': '\uf97b', '\u51ab': '\u2f0e', '\u4e24': '\uf978', '\u4eae': '\uf977', '\u91cf': '\uf97e', '\u8ad2': '\uf97d', '\u50da': '\uf9bb', '\u907c': '\uf9c3', '\u5bee': '\uf9bc', '\u71ce': '\uf9c0', '\u7642': '\uf9c1', '\u84fc': '\uf9c2', '\u6599': '\uf9be', '\u5217': '\uf99c', '\u52a3': '\uf99d', '\u70c8': '\uf99f', '\u88c2': '\uf9a0', '\u7375': '\uf9a7', '\u6797': '\uf9f4', '\u6dcb': '\uf9f5', '\u96a3': '\uf9f1', '\u7498': '\uf9ef', '\u71d0': '\uf9ee', '\u81e8': '\uf9f6', '\u9c57': '\uf9f2', '\u9e9f': '\uf9f3', '\u51db': '\uf954', '\u541d': '\uf9ed', '\u85fa': '\uf9f0', '\u56f9': '\uf9a9', '\u73b2': '\uf9ad', '\u51cc': '\uf955', '\u9675': '\uf959', '\u8046': '\uf9b0', '\u83f1': '\uf958', '\u7f9a': '\uf9af', '\u96f6': '\uf9b2', '\u9234': '\uf9b1', '\u7dbe': '\uf957', '\u9748': '\uf9b3', '\u9818': '\uf9b4', '\u5dba': '\uf9ab', '\u4ee4': '\uf9a8', '\u6e9c': '\uf9cb', '\u7559': '\uf9cd', '\u6d41': '\uf9ca', '\u7409': '\uf9cc', '\u786b': '\uf9ce', '\u88d7': '\ud87e\uddc6', '\u5289': '\uf9c7', '\u67f3': '\uf9c9', '\u516d': '\uf9d1', '\u9f99': '\u2ef0', '\u7adc': '\u2eef', '\u9686': '\uf9dc', '\u9f8d': '\u2fd3', '\u7c60': '\uf944', '\u807e': '\uf945', '\u3d33': '\ud87e\udd0a', '\u58df': '\uf942', '\u617a': '\ud87e\udcaa', '\u6a13': '\uf94c', '\u964b': '\uf951', '\u6f0f': '\uf94e', '\u76e7': '\uf933', '\u8606': '\uf935', '\u5eec': '\uf982', '\u7210': '\uf932', '\u5364': '\u2ee7', '\u9e75': '\u2fc4', '\u865c': '\uf936', '\u9b6f': '\uf939', '\u64c4': '\uf930', '\u6ad3': '\uf931', '\u9678': '\uf9d3', '\u83c9': '\uf93e', '\u9e7f': '\u2fc5', '\u797f': '\uf93c', '\u788c': '\uf93b', '\u8cc2': '\uf948', '\u8def': '\uf937', '\u4635': '\ud87e\uddc8', '\u622e': '\uf9d2', '\u9304': '\uf93f', '\u4a6e': '\ud87e\uddf8', '\u9732': '\uf938', '\u9dfa': '\uf93a', '\u9e1e': '\uf920', '\u5375': '\uf91c', '\u4e82': '\uf91b', '\u63a0': '\uf975', '\u502b': '\uf9d4', '\u5d19': '\uf9d5', '\u6dea': '\uf9d6', '\u8f2a': '\uf9d7', '\u8ad6': '\uf941', '\u87ba': '\uf911', '\u7f85': '\uf90f', '\u863f': '\uf910', '\u908f': '\uf913', '\u5246': '\ud87e\udc21', '\u88f8': '\uf912', '\u6d1b': '\uf915', '\u73de': '\uf917', '\u843d': '\uf918', '\u4334': '\ud87e\udd71', '\u95ad': '\uf986', '\u4561': '\ud87e\uddaf', '\u5442': '\uf980', '\u65c5': '\uf983', '\u5c62': '\uf94b', '\u5c65': '\uf9df', '\u7e37': '\uf950', '\u5f8b': '\uf9d8', '\u7387': '\uf961', '\u7da0': '\uf93d', '\u6ffe': '\uf984', '\u7565': '\uf976', '\u9ebb': '\u2fc7', '\u4cf8': '\ud87e\ude11', '\u9a6c': '\u2ee2', '\u99ac': '\u2fba', '\u9ea6': '\u2ee8', '\u58f2': '\ud87e\udc5a', '\u9ea5': '\u2fc6', '\u3862': '\ud87e\udc88', '\u83bd': '\ud87e\udd9d', '\u6bdb': '\u2f51', '\u77db': '\u2f6d', '\u5192': '\ud87e\udcd2', '\u34bb': '\ud87e\uddca', '\u5e3d': '\ud87e\udc86', '\u6885': '\ufa44', '\u4359': '\ud87e\udd74', '\u95e8': '\u2ed4', '\u9580': '\u2fa8', '\u61de': '\ud87e\udcaf', '\u5922': '\ud87e\udc5e', '\u7c73': '\u2f76', '\u7cf8': '\u2f77', '\u6ccc': '\uf968', '\u9f0f': '\ud87e\ude1a', '\u514d': '\ufa32', '\u9efe': '\u2eea', '\u52c9': '\ufa33', '\u5195': '\ud87e\udcd3', '\u9762': '\u2faf', '\u54f6': '\ud87e\udc41', '\u6c11': '\u2ea0', '\u76bf': '\u2f6b', '\u654f': '\ufa41', '\u9efd': '\u2fcc', '\u6469': '\ud87e\udcc3', '\u58a8': '\ufa3a', '\u6bcd': '\u2e9f', '\u6728': '\u2f4a', '\u76ee': '\u2f6c', '\u62cf': '\uf95b', '\u80ad': '\ud87e\udcd6', '\u5948': '\uf90c', '\u96e3': '\ufa68', '\u5185': '\ud87e\udc14', '\u6ce5': '\uf9e3', '\u4f60': '\ud87e\udc04', '\u533f': '\uf9eb', '\u6eba': '\uf9ec', '\u5e74': '\uf98e', '\u79ca': '\uf995', '\u637b': '\uf9a4', '\u8f26': '\uf998', '\u649a': '\uf991', '\u5ff5': '\uf9a3', '\u9e1f': '\u2ee6', '\u9ce5': '\u2fc3', '\u5c3f': '\uf9bd', '\u8080': '\u2eba', '\u6d85': '\ud87e\udd05', '\u5bdc': '\uf95f', '\u5be7': '\ud87e\udc6f', '\u725b': '\u2f5c', '\u677b': '\uf9c8', '\u7d10': '\uf9cf', '\u5f04': '\uf943', '\u6012': '\uf960', '\u8650': '\ud87e\uddb3', '\u8afe': '\uf95d', '\u5973': '\u2f25', '\u6d3e': '\ud87e\udd00', '\u723f': '\u2f59', '\u9f8e': '\ufad9', '\u5674': '\ud87e\udc4f', '\u6fc6': '\ud87e\udd12', '\u4995': '\ud87e\uddef', '\u76ae': '\u2f6a', '\u34df': '\ud87e\udc1f', '\u813e': '\ud87e\udd85', '\u7247': '\u2f5a', '\u62fc': '\ud87e\udcba', '\u59d8': '\ud87e\udc65', '\u983b': '\ufa6a', '\u8060': '\ud87e\udd7d', '\u9829': '\ud87e\ude00', '\u5196': '\u2f0d', '\u90f1': '\ud87e\udde3', '\u8353': '\ud87e\udda0', '\u6d34': '\ud87e\udd07', '\u3eb8': '\ud87e\udd2c', '\u5840': '\ufa39', '\u84f1': '\ud87e\udda8', '\u86e2': '\ud87e\uddba', '\u7f3e': '\ufab1', '\u4202': '\ud87e\udd60', '\u7aee': '\ud87e\udd5f', '\u9d67': '\ud87e\ude0f', '\u6534': '\u2f41', '\u669c': '\ud87e\udcd5', '\u9f50': '\u2eec', '\u6589': '\u2eeb', '\u7948': '\ufa4e', '\u9f4a': '\u2fd1', '\u9094': '\ud87e\udde2', '\u8291': '\ud87e\udd8f', '\u675e': '\ud87e\udcdb', '\u8d77': '\ud87e\uddd7', '\u8c48': '\uf900', '\u5553': '\ud87e\udc43', '\u6c14': '\u2f53', '\u5951': '\uf909', '\u5668': '\ufa38', '\u5c8d': '\ud87e\udc7a', '\u6c67': '\ud87e\udcfe', '\u8688': '\ud87e\uddb8', '\u96c3': '\ud87e\uddf3', '\u9cfd': '\ud87e\ude0c', '\u45d7': '\ud87e\uddbf', '\u704a': '\ud87e\udd17', '\u51f5': '\u2f10', '\u6b20': '\u2f4b', '\u4d56': '\ud87e\ude16', '\u8941': '\ufab6', '\u93f9': '\ud87e\uddeb', '\u77a7': '\ufa9d', '\u5207': '\ufa00', '\u52e4': '\ufa34', '\u9752': '\u2ed8', '\u9751': '\u2fad', '\u537f': '\ud87e\udc32', '\u6674': '\ufa12', '\u8acb': '\ufabb', '\u74ca': '\ud87e\udd32', '\u5168': '\ufa72', '\u72ac': '\u2f5d', '\u5b08': '\ud87e\udc69', '\u4eba': '\u2f08', '\u46be': '\ud87e\uddcd', '\u5fcd': '\ud87e\udc9d', '\u5203': '\ud87e\udc1e', '\u43d5': '\ud87e\udd81', '\u8ed4': '\ud87e\uddde', '\u65e5': '\u2f47', '\u8363': '\ud87e\udd9a', '\u5197': '\ud87e\udc17', '\u8089': '\u2f81', '\u5165': '\u2f0a', '\u962e': '\uf9c6', '\u7524': '\ud87e\udd34', '\u8564': '\ud87e\uddac', '\u82e5': '\uf974', '\u585e': '\uf96c', '\u5f61': '\u2f3a', '\u6c35': '\u2ea1', '\u7ce3': '\ud87e\udd69', '\u6852': '\ud87e\udce1', '\u7e45': '\ud87e\udd70', '\u6383': '\ud87e\udcbc', '\u36ee': '\ud87e\udc67', '\u8272': '\u2f8a', '\u50e7': '\ufa31', '\u6bba': '\uf970', '\u95b7': '\ud87e\uddf0', '\u5c71': '\u2f2d', '\u38e3': '\ud87e\udc9b', '\u5584': '\ud87e\udc46', '\u52fa': '\ud87e\udc28', '\u6753': '\ud87e\udcdc', '\u5962': '\ud87e\udc5f', '\u6aa8': '\ud87e\udceb', '\u820c': '\u2f86', '\u6368': '\ud87e\udcbb', '\u793e': '\ufa4c', '\u8eab': '\u2f9d', '\u4ec0': '\uf9fd', '\u795e': '\ufa19', '\u6c88': '\uf972', '\u614e': '\ufa87', '\u751f': '\u2f63', '\u7701': '\uf96d', '\u76db': '\ufaa7', '\u5c38': '\u2f2b', '\u5341': '\u2f17', '\u9963': '\u2ee0', '\u77f3': '\u2f6f', '\u4096': '\ud87e\udd4c', '\u62fe': '\uf973', '\u98df': '\u2edd', '\u8b58': '\uf9fc', '\u77e2': '\u2f6e', '\u8c55': '\u2f97', '\u58eb': '\u2f20', '\u6c0f': '\u2f52', '\u793b': '\u2ead', '\u793a': '\u2f70', '\u8996': '\ufa61', '\u624b': '\u2f3f', '\u9996': '\u2fb8', '\u5bff': '\ud87e\udc72', '\u6bb3': '\u2f4e', '\u758b': '\u2f66', '\u66f8': '\ud87e\udccc', '\u8f38': '\ud87e\udddf', '\u79eb': '\ud87e\udd57', '\u6691': '\ufa43', '\u9ecd': '\u2fc9', '\u7f72': '\ufa5a', '\u9f20': '\u2fcf', '\u4e28': '\u2f01', '\u5fc4': '\u2e96', '\u5eb6': '\ud87e\udc8d', '\u6578': '\uf969', '\u3d96': '\ud87e\udd16', '\u6c34': '\u2f54', '\u6c3a': '\u2ea2', '\u5e28': '\ud87e\udc85', '\u88de': '\ud87e\uddc7', '\u8aaa': '\uf9a1', '\u8aac': '\uf96f', '\u53b6': '\u2f1b', '\u5df3': '\u2e92', '\u7f52': '\u2eab', '\u98fc': '\ufa2b', '\u641c': '\ufa8e', '\u9199': '\ufac4', '\u53df': '\ud87e\udc37', '\u590a': '\u2f22', '\u6b72': '\ud87e\udcf3', '\u7d22': '\uf96a', '\u737a': '\ud87e\udd28', '\u43d9': '\ud87e\udcd7', '\u70ad': '\ud87e\udd1a', '\u5606': '\ufa37', '\u5510': '\ud87e\udc42', '\u7cd6': '\ufa03', '\u5f22': '\ud87e\udc94', '\u7d5b': '\ufaaf', '\u5555': '\ufa79', '\u624c': '\u2e98', '\u7530': '\u2f65', '\u78cc': '\ufaab', '\u7471': '\ufaa1', '\u7ab1': '\ufaac', '\u5182': '\u2f0c', '\u7a81': '\ufa55', '\u5c60': '\ud87e\udc77', '\u5716': '\ud87e\udc4b', '\u5717': '\ud87e\udc4d', '\u571f': '\u2f1f', '\u5154': '\ud87e\udc0f', '\u580d': '\ud87e\udc54', '\u4fbb': '\ud87e\udc06', '\u5a27': '\ud87e\udc64', '\u99fe': '\ud87e\ude07', '\u62d3': '\ufa02', '\u74e6': '\u2f61', '\u55e2': '\ufa7b', '\u4e38': '\ud87e\udc01', '\u633d': '\ud87e\udcb9', '\u738b': '\ud87e\udd29', '\u7f51': '\u2f79', '\u5ff9': '\ud87e\udc9f', '\u60d8': '\ufa86', '\u671b': '\ufa93', '\u56d7': '\u2f1e', '\u97e6': '\u2ed9', '\u97cb': '\u2fb1', '\u49e6': '\ud87e\uddf2', '\u649d': '\ud87e\udcc5', '\u3b19': '\ud87e\udcce', '\u4227': '\ud87e\udd64', '\u6b9f': '\ud87e\udcf4', '\u3b08': '\ud87e\udcd0', '\u761f': '\ufaa5', '\u6587': '\u2f42', '\u7a4f': '\ud87e\udd5b', '\u65e0': '\u2f46', '\u8323': '\ud87e\udd9c', '\u6d16': '\ud87e\udcff', '\u4fae': '\ufa30', '\u5140': '\u2e8e', '\u5915': '\u2f23', '\u8980': '\u2ec3', '\u897f': '\u2ec4', '\u5438': '\ud87e\udc3d', '\u7280': '\ud87e\udd24', '\u7199': '\ufa6c', '\u51de': '\ufa15', '\u3a6c': '\ud87e\udcc7', '\u5338': '\u2f16', '\u8204': '\ud87e\udd8c', '\u42a0': '\ud87e\udd67', '\u8669': '\ud87e\uddb6', '\u549e': '\ud87e\udc3c', '\u5563': '\ud87e\udc44', '\u61b2': '\ud87e\udcac', '\u9999': '\u2fb9', '\u7965': '\ufa1a', '\u8801': '\ud87e\uddc1', '\u97ff': '\ufa69', '\u50cf': '\ud87e\udc0b', '\u5c0f': '\u2f29', '\u4018': '\ufad3', '\u5fc3': '\u2f3c', '\u8f9b': '\u2f9f', '\u5f62': '\ud87e\udc99', '\u3f1b': '\ud87e\udd33', '\u4f80': '\ufa73', '\u578b': '\ud87e\udc55', '\u784e': '\ud87e\udd4e', '\u9276': '\ufac5', '\u5cc0': '\ud87e\udc79', '\u6b54': '\ud87e\udcf1', '\u7384': '\u2f5e', '\u7a74': '\u2f73', '\u8840': '\u2f8e', '\u391c': '\ud87e\udca2', '\u5de1': '\ud87e\udc81', '\u5dfd': '\ud87e\udc84', '\u7259': '\u2f5b', '\u82bd': '\ud87e\udd95', '\u897e': '\u2f91', '\u54bd': '\uf99e', '\u6df9': '\ud87e\udd0e', '\u6e6e': '\ud87e\udd09', '\u8ba0': '\u2ec8', '\u8a00': '\u2f94', '\u6cbf': '\ud87e\udcfc', '\u3ffc': '\ud87e\udd3e', '\u63c5': '\ud87e\udcc0', '\u5944': '\ufa7e', '\u63a9': '\ud87e\udcc1', '\u5d43': '\ud87e\udc7c', '\u88fa': '\ud87e\uddc9', '\u7f8a': '\u2f7a', '\u7f95': '\ud87e\udd78', '\u5e7a': '\u2e93', '\u5406': '\ud87e\udc3b', '\u4301': '\ud87e\udd6d', '\u723b': '\u2f58', '\u55c2': '\ud87e\udc4a', '\u5fad': '\ufa85', '\u69a3': '\ud87e\udce9', '\u3781': '\ud87e\udc76', '\u9875': '\u2eda', '\u9801': '\u2fb4', '\u8449': '\uf96e', '\u4046': '\ud87e\udd4b', '\u8b01': '\ufa62', '\u4e00': '\u2f00', '\u8864': '\u2ec2', '\u8863': '\u2f90', '\u4e41': '\ud87e\udc02', '\u3c18': '\ud87e\udcee', '\u4e59': '\u2f04', '\u382f': '\ud87e\udc83', '\u5f0b': '\u2f37', '\u9091': '\u2fa2', '\u6613': '\uf9e0', '\u38c7': '\ud87e\udc96', '\u76ca': '\ufa17', '\u7570': '\uf962', '\u9038': '\ufa25', '\u5ed9': '\ufa83', '\u4e5a': '\u2e83', '\u97f3': '\u2fb3', '\u6edb': '\ufa98', '\u5ef4': '\u2f35', '\u7469': '\uf9ae', '\u701b': '\ud87e\udd15', '\u5ab5': '\ud87e\udd86', '\u52c7': '\ufa76', '\u7528': '\u2f64', '\u5c22': '\u2e90', '\u5c23': '\u2e8f', '\u9149': '\u2fa3', '\u53c8': '\u2f1c', '\u7950': '\ufa4f', '\u688e': '\ud87e\udce4', '\u9c7c': '\u2ee5', '\u8201': '\ud87e\udc93', '\u5a1b': '\ud87e\udc63', '\u9b5a': '\u2fc2', '\u63c4': '\ufa8d', '\u745c': '\ud87e\udd2f', '\u7fbd': '\u2f7b', '\u96e8': '\u2fac', '\u387c': '\ud87e\udc8a', '\u7610': '\ud87e\udd3a', '\u7389': '\u2f5f', '\u828b': '\ud87e\udd90', '\u807f': '\u2f80', '\u80b2': '\ud87e\udd82', '\u6108': '\ufa88', '\u8aed': '\ud87e\uddd0', '\u51a4': '\ud87e\udc18', '\u5bc3': '\ud87e\udc6d', '\u870e': '\ud87e\uddb9', '\u46c7': '\ud87e\uddce', '\u66f0': '\u2f48', '\u6708': '\u2f49', '\u73a5': '\ud87e\udd2b', '\u6a02': '\uf914', '\u9fa0': '\u2fd5', '\u7039': '\ud87e\udd13', '\u6688': '\uf9c5', '\u8779': '\ufab5', '\u99a7': '\ud87e\ude05', '\u9723': '\ud87e\uddf5', '\u707d': '\ud87e\udd18', '\u753e': '\ud87e\udd36', '\u518d': '\ud87e\udc15', '\u9415': '\ud87e\uddec', '\u507a': '\ud87e\udc08', '\u7485': '\ud87e\udd31', '\u618e': '\ufa3f', '\u8d08': '\ufa65', '\u55b3': '\ud87e\udc49', '\u6942': '\ud87e\udce8', '\u7250': '\ud87e\udd22', '\u5b85': '\ufa04', '\u957f': '\u2ed3', '\u6756': '\ufa94', '\u722a': '\u2f56', '\u722b': '\u2ea4', '\u4e5b': '\u2e82', '\u8005': '\ufa5b', '\u7740': '\ufaaa', '\u771f': '\ud87e\udd47', '\u798e': '\ufa53', '\u9b12': '\ufacd', '\u652f': '\u2f40', '\u829d': '\ud87e\udd91', '\u9f05': '\ud87e\ude19', '\u76f4': '\ufaa8', '\u57f4': '\ud87e\udc53', '\u5902': '\u2f21', '\u6b62': '\u2f4c', '\u7949': '\ufa4d', '\u831d': '\ud87e\udd99', '\u9ef9': '\u2fcb', '\u81f3': '\u2f84', '\u5fd7': '\ud87e\udc9e', '\u8c78': '\u2f98', '\u7099': '\uf9fb', '\u5bd8': '\ud87e\udc6e', '\u6adb': '\ud87e\udced', '\u585a': '\ufa10', '\u821f': '\u2f88', '\u5468': '\ud87e\udc3f', '\u732a': '\ufa16', '\u876b': '\ud87e\uddbd', '\u8af8': '\ufa22', '\u7af9': '\u2f75', '\u967c': '\ufac6', '\u6e1a': '\ufa46', '\u716e': '\ufa48', '\u795d': '\ufa51', '\u8457': '\ufa5f', '\u7bc9': '\ud87e\udd63', '\u7077': '\ud87e\udd19', '\u7bc6': '\ud87e\udd62', '\u4e2c': '\u2ea6', '\u58ee': '\ud87e\udc51', '\u72c0': '\uf9fa', '\u96b9': '\u2fab', '\u8860': '\ud87e\uddc3', '\u7422': '\ufa4a', '\u9111': '\ud87e\udde4', '\u6914': '\ud87e\udce6', '\u5d6b': '\ud87e\udc7f', '\u6ecb': '\ud87e\udd0b', '\u7dc7': '\ud87e\udd6e', '\u5b50': '\u2f26', '\u81ea': '\u2f83', '\u6721': '\ud87e\udcda', '\u7e02': '\ud87e\udd6f', '\u8fb6': '\u2ecc', '\u8d70': '\u2f9b', '\u8db3': '\u2f9c', '\u7956': '\ufa50', '\u6700': '\ud87e\udcd4', '\u961d': '\u2ed6', '\u34c1': '\u2eb3', '\u452b': '\ud87e\udda7', '\u353e': '\u2e8b', '\u38fa': '\u2e97', '\u98e0': '\u2edf', '\u4e85': '\u2f05', '\u4ea0': '\u2f07', '\u79b8': '\u2f71', '\u301c': '\uff5e', '\u5344': '\u3039', '\u5345': '\u303a', '\u3078': '\u30d8', '\u3588': '\u439b', '\u363d': '\u39b3', '\u3b3b': '\u4420', '\u3a41': '\u6409', '\u3ada': '\u66f6', '\u3b35': '\u80f6', '\u3b3a': '\u5e50', '\u3ba3': '\u69e9', '\u403f': '\u6663', '\u40e3': '\ud87e\udd51', '\u4443': '\u6726', '\u46b6': '\u8a1e', '\u503c': '\u5024', '\u586b': '\u5861', '\u58ab': '\u58ff', '\u5aaf': '\u5b00', '\u5e21': '\u5e32', '\u65e2': '\ufa42', '\u665a': '\u6669', '\u670c': '\u80a6', '\u670f': '\u80d0', '\u6710': '\u80ca', '\u6713': '\u8101', '\u6718': '\u8127', '\u6723': '\u81a7', '\u676e': '\u67ff', '\u699d': '\u6a27', '\u6e88': '\u6f59', '\u771e': '\ud87e\udd45', '\u7814': '\u784f', '\u793c': '\ufa18', '\u7d55': '\u7d76', '\u80fc': '\u8141', '\u82b3': '\ud87e\udd94', '\u848d': '\u853f', '\u8612': '\ufa20', '\u8637': '\u8641', '\u87e1': '\ud87e\uddc0', '\u8a2e': '\u8a7d', '\u8b86': '\u8b8f', '\u8c5c': '\u8c63', '\u8cab': '\ud87e\uddd4', '\u8d7f': '\u8d86', '\u8dfa': '\u8de5', '\u8e97': '\u8e9b', '\u8eff': '\u8f27', '\u93ae': '\u93ad', '\ufad1': '\ud84c\udfd5', '\ufad6': '\ud857\udcd0', '\ud868\udd05': '\ud87e\ude12'}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.homograph_chinese.method","title":"<code>method = WMMethod.FIND_AND_REPLACE</code>  <code>module-attribute</code>","text":""},{"location":"templates/#homograph_letters","title":"HOMOGRAPH_LETTERS","text":"<p>Homographs in letters</p>"},{"location":"templates/#textwatermark.templates.homograph_letters.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'A': '\u0391\u0410\u13aa\ua4ee\ud835\udc00\ud835\udda0\ud835\uddd4', 'B': '\u0392\u0412\u13f4\ua4d0\ud835\udc01\ud835\udda1\ud835\uddd5', 'C': '\u216d\uff23\u0421\u13df\u2ca4\ua4da\u03f9', 'D': '\u216e\u15de\u15ea\u13a0\ua4d3\ud835\udc03\ud835\udda3', 'E': '\u2d39\u0395\u0415\u13ac\ua4f0\ud835\udc04\ud835\udda4', 'F': '\u15b4\u03dc\ua4dd\ud835\udc05\ud835\udda5\ud835\ude75\ud835\udfca', 'G': '\u13c0\ud835\ude76\ua4d6\ud835\udc06\ud835\udda6\ud835\uddda\ud835\udc3a', 'H': '\u157c\u0397\u041d\u13bb\u2c8e\ua4e7\ud835\udda7', 'I': '\u2160\u0399\u0406\u04c0\ud835\udc08\ud835\ude78\ud835\udeb0', 'J': '\u148d\u0408\u13ab\ud835\udc09\ud835\ude79\ud835\udda9\ud835\udddd', 'K': '\u212a\u039a\u041a\u13e6\u2c94\ua4d7\ud835\udc0a', 'L': '\u216c\u14aa\u13de\u2cd0\ua4e1\ud835\udc0b\ud835\ude7b', 'M': '\u216f\uff2d\u039c\u041c\u13b7\ua4df\ud835\udc0c', 'N': '\uff2e\u039d\u2c9a\ua4e0\ud835\udc0d\ud835\uddad\ud835\udde1', 'O': '\u0b20\u2d54\u0555\u2c9e\ua4f3\ud835\udeb6\ud835\udc0e', 'P': '\u03a1\u0420\u13e2\u2ca2\ua4d1\ud835\udc0f\ud835\uddaf', 'Q': '\ud835\udc10\ud835\udc44\ud835\udc78\ud835\uddb0\ud835\udde4\ud835\ude18\ud835\ude4c', 'R': '\u13a1\u13d2\ua4e3\ud835\udc11\ud835\uddb1\ud835\udde5\ud835\ude81', 'S': '\u0405\u054f\u13da\ua4e2\ud835\uddb2\ud835\udde6\ud835\ude82', 'T': '\u03a4\u0422\u13a2\ua4d4\ud835\uddb3\ud835\udde7\ud835\ude83', 'U': '\u054d\ua4f4\ud835\ude84\ud835\udc14\ud835\uddb4\ud835\udde8\ud835\ude1c', 'V': '\u2164\u142f\u2d38\u13d9\ua4e6\ud835\udc15\ud835\uddb5', 'W': '\u051c\u13b3\ua4ea\ud835\udc16\ud835\uddb6\ud835\uddea\ud835\ude1e', 'X': '\u03a7\u0425\u2cac\u2d5d\ua4eb\ud800\ude90\ud800\udeb4', 'Y': '\u03a5\u04ae\u2ca8\ua4ec\ud835\udc18\ud835\uddb8\ud835\uddec', 'Z': '\u0396\u13c3\ua4dc\ua6c9\ud801\udd53\ud806\udca9\u2c8c', 'a': '\u0430\u0251\u03b1\u1972\u237a\ud801\udcdf\uab64', 'b': '\u15af\u042c\u13cf\ud835\udc1b\ud835\uddbb\ud835\uddef\ud835\ude8b', 'c': '\u03f2\u0441\u1974\u1d04\u217d\u2ca5\ud801\udd1b', 'd': '\u217e\u146f\ua4d2\ud835\udc1d\ud835\uddbd\ud835\uddf1\ud835\ude59', 'e': '\u0435\u212f\ud835\udc1e\ud835\uddbe\ud835\uddf2\ud835\ude26\ud835\ude5a', 'f': '\u1e9d\ud835\udc1f\ud835\udd57\ud835\uddbf\ud835\uddf3\ud835\ude5b\ud835\ude27', 'g': '\u0261\u0581\ud835\udc20\ud835\udc54\ud835\udc88\ud835\uddc0\ud835\uddf4', 'h': '\u04bb\u13c2\ud835\udc21\ud835\udd59\ud835\uddc1\ud835\uddf5\ud835\ude91', 'i': '\u0456\u13a5\ud835\udc22\ud835\udd5a\ud835\uddc2\ud835\uddf6\ud835\ude92', 'j': '\u0458\ud835\ude93\u03f3\ud835\udc23\ud835\udd5b\ud835\uddc3\ud835\uddf7', 'k': '\ud835\udc24\ud835\uddc4\ud835\uddf8\ud835\ude60\ud835\ude94\ud835\udc58\ud835\udc8c', 'l': '\ud835\udc59\ud835\udc8d\ud835\udcc1\ud835\udcf5\ud835\uddc5\ud835\uddf9\ud835\ude61', 'm': '\u217f\ud835\udc26\ud835\uddc6\ud835\uddfa\ud835\ude2e\ud835\ude62\ud835\udc5a', 'n': '\u0578\ud835\udc27\ud835\uddc7\ud835\uddfb\ud835\ude97\ud835\ude2f\ud835\ude63', 'o': '\u03bf\u043e\u1d0f\u2c9f\ud801\udcea\u0585\u0be6', 'p': '\u0440\u2ca3\ud835\udc29\ud835\uddc9\ud835\uddfd\ud835\ude99\ud835\udc5d', 'q': '\u051b\u0563\u0566\ud835\udc2a\ud835\uddca\ud835\uddfe\ud835\ude9a', 'r': '\ud835\ude9b\ud835\udc2b\ud835\udc93\ud835\udcc7\ud835\udcfb\ud835\uddff\ud835\uddcb', 's': '\u1949\u0455\uabaa\ua731\ud835\ude9c\ud835\udc2c\ud835\uddcc', 't': '\ud835\ude9d\ud835\udc61\ud835\udcc9\ud835\udcfd\ud835\uddcd\ud835\ude35\ud835\ude69', 'u': '\u1d1c\u057d\ud835\udc2e\ud835\uddce\ud835\ude02\ud835\ude9e\ud835\udc62', 'v': '\u1d20\u2174\u03bd\u0475\ud835\udc2f\u2228\ud835\udf7c', 'w': '\u1d21\u051d\ud835\udc30\ud835\uddd0\ud835\ude04\ud835\ude38\ud835\ude6c', 'x': '\u2179\u0445\ud835\udc31\u166e\ud835\uddd1\ud835\ude05\ud835\ude39', 'y': '\u0443\uab79\ud835\udc32\ud835\udc9a\ud835\uddd2\ud835\ude06\ud835\udea2', 'z': '\u1d22\ud835\udc33\ud835\udc67\ud835\uddd3\ud835\ude07\ud835\ude3b\ud835\ude6f'}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.homograph_letters.method","title":"<code>method = WMMethod.FIND_AND_REPLACE</code>  <code>module-attribute</code>","text":""},{"location":"templates/#homograph_numbers","title":"HOMOGRAPH_NUMBERS","text":"<p>Homographs in numbers</p>"},{"location":"templates/#textwatermark.templates.homograph_numbers.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'0': '\u1c50\ud835\udfd8\ud835\udfce\ud835\udfe2\ud835\udfec\ud835\udff6', '1': '\u04c0\ud835\udfd9\ud835\udfcf\ud835\udfe3\ud835\udfed\ud835\udff7', '2': '\u14bf\ud835\udfda\ud835\udfd0\ud835\udfe4\ud835\udfee\ud835\udff8', '3': '\u2ccc\ud835\udfdb\ud835\udfd1\ud835\udfe5\ud835\udfef\ud835\udff9', '4': '\u13ce\ud835\udfdc\ud835\udfd2\ud835\udfe6\ud835\udff0\ud835\udffa', '5': '\u01bc\ud835\udfdd\ud835\udfd3\ud835\udfe7\ud835\udff1\ud835\udffb', '6': '\u2cd2\ud835\udfde\ud835\udfd4\ud835\udfe8\ud835\udff2\ud835\udffc', '7': '\u1308\ud835\udfdf\ud835\udfd5\ud835\udfe9\ud835\udff3\ud835\udffd', '8': '\u09ea\ud835\udfe0\ud835\udfd6\ud835\udfea\ud835\udff4\ud835\udffe', '9': '\ua76e\ud835\udfe1\ud835\udfd7\ud835\udfeb\ud835\udff5\ud835\udfff', '.': '\u0660\u06f0\ua4f8\u2024\u037a\u1390'}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.homograph_numbers.method","title":"<code>method = WMMethod.FIND_AND_REPLACE</code>  <code>module-attribute</code>","text":""},{"location":"templates/#homograph_punctuations","title":"HOMOGRAPH_PUNCTUATIONS","text":"<p>Homographs in Punctuations</p>"},{"location":"templates/#textwatermark.templates.homograph_punctuations.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = {'!': '\u01c3\uff01', '\"': '\u02ba\uff02', '%': '\u066a\u2052', \"'\": '\ua78c\u1fbd', '*': '\u204e\u2217', ',': '\u066b\u201a', '-': '\u2010\u2011', '.': '\ua4f8\u2024', '/': '\u2cc6\u2215', ':': '\u02f8\u2236', '?': '\u0294\u097d', ';': '\u037e\uff1b', '\\\\': '\u2216\u29f5', '~': '\u2053\u223c', '\u2027': '\u0387\u00b7', '\u00af': '\u02c9\u203e'}</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.homograph_punctuations.method","title":"<code>method = WMMethod.FIND_AND_REPLACE</code>  <code>module-attribute</code>","text":""},{"location":"templates/#html_empty_tags","title":"HTML_EMPTY_TAGS","text":"<p>HTML empty tags template can only be used when the text can be displayed in HTML mode. Such as WEB page, Blog, EMail, etc. </p> <p>All the tags below are inline tags.</p> Some of HTML editor will remove empty or outside of list tags. <p>Therefore, this template is not a relatively stable template,  and it is not recommended to use it in most cases.</p>"},{"location":"templates/#textwatermark.templates.html_empty_tags.CONFUSABLES_CHARS","title":"<code>CONFUSABLES_CHARS = ['&lt;a&gt;&lt;/a&gt;', '&lt;abbr&gt;&lt;/abbr&gt;', '&lt;b&gt;&lt;/b&gt;', '&lt;bdo&gt;&lt;/bdo&gt;', '&lt;big&gt;&lt;/big&gt;', '&lt;cite&gt;&lt;/cite&gt;', '&lt;code&gt;&lt;/code&gt;', '&lt;dfn&gt;&lt;/dfn&gt;', '&lt;em&gt;&lt;/em&gt;', '&lt;i&gt;&lt;/i&gt;', '&lt;kbd&gt;&lt;/kbd&gt;', '&lt;var&gt;&lt;/var&gt;', '&lt;samp&gt;&lt;/samp&gt;', '&lt;span&gt;&lt;/span&gt;', '&lt;strong&gt;&lt;/strong&gt;', '&lt;small&gt;&lt;/small&gt;', '&lt;sub&gt;&lt;/sub&gt;', '&lt;sup&gt;&lt;/sup&gt;', '&lt;tt&gt;&lt;/tt&gt;', '&lt;u&gt;&lt;/u&gt;']</code>  <code>module-attribute</code>","text":""},{"location":"templates/#textwatermark.templates.html_empty_tags.method","title":"<code>method = WMMethod.INSERT_INTO_POSITION</code>  <code>module-attribute</code>","text":""},{"location":"templates/#invisible_chars","title":"INVISIBLE_CHARS","text":"<p>Watermark template of invisible chars.</p> <p>All of the chars below are invisible on most of the text editors and WEB view.</p> <p>In most cases, using this template is a pretty good choice.</p> Python<pre><code>'''Watermark template of invisible chars.\nAll of the chars below are invisible on most of the text editors and WEB view.\nIn most cases, using this template is a pretty good choice.\n'''\nfrom textwatermark.defines import WMMethod\nCONFUSABLES_CHARS = [\n'\\u034f', '\\u061c', '\\u180b', '\\u180c', '\\u180d', '\\u180e', '\\u200b', '\\u200e', '\\u200f',\n'\\u202a', '\\u202b', '\\u202c', '\\u202d', '\\ufe00', '\\ufe01', '\\ufe02', '\\ufe03', '\\ufe04',\n'\\ufe05', '\\ufe06', '\\ufe07', '\\ufe08', '\\ufe09', '\\ufe0a', '\\ufe0b', '\\ufe0c', '\\ufe0d',\n'\\ufe0e', '\\ufe0f'\n]\nmethod = WMMethod.INSERT_INTO_POSITION\n</code></pre>"},{"location":"templates/#textwatermark.templates.invisible_chars.method","title":"<code>method = WMMethod.INSERT_INTO_POSITION</code>  <code>module-attribute</code>","text":""},{"location":"templates/#space_chars","title":"SPACE_CHARS","text":"<p>This template will replace the regular space char with the other width of space chars.</p> <p>Since spaces are rare in Chinese, this template is mainly suitable for English text.</p> Python<pre><code>'''\nThis template will replace the regular space char with the other width of space chars.\nSince spaces are rare in Chinese, this template is mainly suitable for English text.\n'''\nfrom textwatermark.defines import WhiteSpaceChars, WMMethod\n# \u7a7a\u683c\u5b57\u7b26\nCONFUSABLES_CHARS = {\n'\\u0020': [\nWhiteSpaceChars.SPACE_1_4.value,\n# WhiteSpaceChars.NO_BREAK_SPACE_1_4.value,\n# WhiteSpaceChars.EN_QUAD_1_2.value,\n# WhiteSpaceChars.EM_QUAD_1.value,\nWhiteSpaceChars.EN_SPACE_1_2.value,\nWhiteSpaceChars.EM_SPACE_1.value,\nWhiteSpaceChars.THREE_PER_EM_SPACE_1_3.value,\n# WhiteSpaceChars.FOUR_PER_EM_SPACE_1_4.value,\nWhiteSpaceChars.SIX_PER_EM_SPACE_1_6.value,\n# WhiteSpaceChars.FIGURE_SPACE_LIKE_DIGITS.value,\n# WhiteSpaceChars.PUNCTUATION_SPACE_LIKE_DOT.value,\n# WhiteSpaceChars.THIN_SPACE_1_6.value,\nWhiteSpaceChars.HAIR_SPACE_1_8.value,\n# WhiteSpaceChars.NARROW_NO_BREAK_SPACE_1_6.value,\n# WhiteSpaceChars.MEDIUM_MATHEMATICAL_SPACE_2_9.value,\n]\n}\nmethod = WMMethod.FIND_AND_REPLACE\n</code></pre>"},{"location":"templates/#textwatermark.templates.space_chars.method","title":"<code>method = WMMethod.FIND_AND_REPLACE</code>  <code>module-attribute</code>","text":""},{"location":"templates/#whitespace_chars","title":"WHITESPACE_CHARS","text":"<p>The template will generate a watermark into many types of space chars  and then insert it into the specified location.</p> <p>The best usage scenario for this template is to insert the watermark on  an empty line of text or after some lines in the code.</p> Python<pre><code>'''\nThe template will generate a watermark into many types of space chars \nand then insert it into the specified location.\nThe best usage scenario for this template is to insert the watermark on \nan empty line of text or after some lines in the code.\n'''\nfrom textwatermark.defines import WhiteSpaceChars, WMMethod\n# \u7a7a\u683c\u5b57\u7b26\nCONFUSABLES_CHARS = [\n# WhiteSpaceChars.SPACE_1_4.value,\nWhiteSpaceChars.NO_BREAK_SPACE_1_4.value,\nWhiteSpaceChars.EN_QUAD_1_2.value,\nWhiteSpaceChars.EM_QUAD_1.value,\nWhiteSpaceChars.EN_SPACE_1_2.value,\nWhiteSpaceChars.EM_SPACE_1.value,\nWhiteSpaceChars.THREE_PER_EM_SPACE_1_3.value,\nWhiteSpaceChars.FOUR_PER_EM_SPACE_1_4.value,\nWhiteSpaceChars.SIX_PER_EM_SPACE_1_6.value,\nWhiteSpaceChars.FIGURE_SPACE_LIKE_DIGITS.value,\nWhiteSpaceChars.PUNCTUATION_SPACE_LIKE_DOT.value,\nWhiteSpaceChars.THIN_SPACE_1_6.value,\nWhiteSpaceChars.HAIR_SPACE_1_8.value,\nWhiteSpaceChars.NARROW_NO_BREAK_SPACE_1_6.value,\nWhiteSpaceChars.MEDIUM_MATHEMATICAL_SPACE_2_9.value,\n]\nmethod = WMMethod.INSERT_INTO_POSITION\n</code></pre>"},{"location":"templates/#textwatermark.templates.whitespace_chars.method","title":"<code>method = WMMethod.INSERT_INTO_POSITION</code>  <code>module-attribute</code>","text":""},{"location":"usage/","title":"Coding","text":""},{"location":"usage/#_1","title":"\u7528\u6cd5","text":""},{"location":"usage/#_2","title":"\u6574\u4e2a\u793a\u4f8b\u4ee3\u7801","text":"Python<pre><code>'''Sample Example'''\nimport os\nfrom textwatermark.defines import WMMode\nfrom textwatermark.main import TextWatermark\nfrom textwatermark.template_type import WMTemplateType\n# 1.Init TextWatermark instance\nwm_mode = WMMode.REAL_NUMBER\nwm = TextWatermark(wm_mode=wm_mode)\n# 2.Choose a watermark template\nwm.set_tpl_type(tpl_type=WMTemplateType.HOMOGRAPH_NUMBERS)\n# 3.Set the maximum value of the watermark string\nwm_max = '9'*9\nwm.set_wm_max(wm_max=wm_max)\n# 4.Set the text to be watermarked\nwm.set_text_file(path=os.path.abspath('../tests/text/1.txt'))\n# 5.Insert watermark string to text\nwm_str = '123456789'\nwm_text = wm.insert_watermark(wm_str=wm_str)\nprint(wm_text)\n##############################################################\n# Save the parameters to retrieve the watermark\nparams = wm.export_params()\n# retrieve the watermark\nwm_out_str = TextWatermark.retrieve_watermark(wm_text=wm_text, params=params)\nassert wm_out_str == wm_str\n</code></pre> <p>\u5c06\u6c34\u5370\u63d2\u5165\u6587\u672c\u6709 5 \u4e2a\u6b65\u9aa4\u3002</p>"},{"location":"usage/#1textwatermark","title":"1.\u521d\u59cb\u5316TextWatermark\u5b9e\u4f8b","text":"Python<pre><code>from textwatermark.defines import WMMode\nfrom textwatermark.main import TextWatermark\n# \u83b7\u53d6 TextWatermark \u7c7b\u7684\u5b9e\u4f8b\nwm_mode = WMMode.REAL_NUMBER\nwm = TextWatermark(wm_mode=wm_mode)\n</code></pre> <p>TextWatermark \u7684\u521d\u59cb\u5316\u6709 4 \u4e2a\u53c2\u6570\uff1a</p> <p><code>__init__(wm_mode, wm_base=0, start_at=0, wm_loop=False)</code></p> <p><code>wm_mode</code>  \u662f\u5fc5\u9700\u7684\u3002</p> <p><code>wm_mode</code> \u53ef\u4ee5\u8bbe\u7f6e\u4e3a <code>WMMode</code> \u7684\u4efb\u4f55\u5c5e\u6027\uff0c\u8bf7\u53c2\u9605 defines.WMMode \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 \u4e3a\u4ec0\u4e48<code>wm_mode</code>\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff1f</p> <p>\u7528\u4e8e\u7f29\u5c0f\u6c34\u5370\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u3002</p> <p><code>wm_base</code>\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u6307\u5b9a\u6700\u7ec8\u6c34\u5370\u5b57\u7b26\u4e32\u7684\u57fa\u6570\u3002</p> <p>\u5982\u679c\u60a8\u4e0d\u77e5\u9053\u4ec0\u4e48\u610f\u601d\uff0c\u5219\u6ca1\u6709\u5fc5\u8981\u8bbe\u7f6e\u6b64\u503c\u3002 <code>__init__</code>\u4e2d\u7684<code>wm_base</code>\u9ed8\u8ba4\u503c\u4e3a0\uff0c \u7136\u540e\u5728\u8c03\u7528<code>wm.set_tpl_type</code> \u6216<code>wm.set_tpl</code> \u65b9\u6cd5\u65f6\u5c06\u8bbe\u7f6e\u4e3a<code>templates</code> \u6587\u4ef6\u5939\u4e2d\u7684<code>{template}.CONFUSABLES_CHARS</code> \u9879\u76ee\u957f\u5ea6\u3002</p> <p><code>wm_base</code>\u7684\u503c\u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e<code>2</code>\u4e14\u5c0f\u4e8e\u6216\u7b49\u4e8e<code>36</code>\uff0c\u5e76\u4e14\u4e0d\u80fd\u5927\u4e8e\u6240\u9009\u6a21\u677f\u4e2d\u7684<code>CONFUSABLES_CHARS</code>\u9879\u957f\u5ea6\u7684\u503c\u3002</p> <p><code>start_at</code>\u7528\u4e8e\u6307\u5b9a\u63d2\u5165\u6c34\u5370\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u9ed8\u8ba4\u4e3a\u201c0\u201d</p> <p><code>wm_loop</code> \u7528\u4e8e\u6807\u8bc6\u6c34\u5370\u662f\u5426\u9700\u8981\u5faa\u73af\u63d2\u5165\u5230\u6587\u672c\u4e2d\u3002 \u9ed8\u8ba4\u4e3a<code>False</code></p>"},{"location":"usage/#2","title":"2.\u9009\u62e9\u6c34\u5370\u6a21\u677f","text":"Python<pre><code>from textwatermark.template_type import WMTemplateType\n# \u4f7f\u7528set_tpl_type\u65b9\u6cd5\u8bbe\u7f6e\u6c34\u5370\u6a21\u677f\nwm.set_tpl_type(tpl_type=WMTemplateType.HOMOGRAPH_NUMBERS)\n# \u6216\u8005\nfrom textwatermark.templates import homograph_numbers\n# \u4f7f\u7528set_tpl\u65b9\u6cd5\u8bbe\u7f6e\u6c34\u5370\u6a21\u677f\nwm.set_tpl(confusables_chars=homograph_numbers.CONFUSABLES_CHARS, \nmethod=homograph_numbers.method, confusables_chars_key='')\n</code></pre> <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u9009\u62e9\u548c\u8bbe\u7f6e\u6c34\u5370\u6a21\u677f\u3002</p> <p>\u4e00\u79cd\u662f\u4f7f\u7528 <code>TextWatermark</code> \u5b9e\u4f8b\u4e2d\u7684 <code>set_tpl_type(tpl_type, confusables_chars_key='')</code> \u65b9\u6cd5\u3002 \u6b64\u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570\uff1a <code>tpl_type</code> \u53ef\u4ee5\u8bbe\u7f6e\u4e3a <code>WMTemplateType</code> \u7684\u4efb\u4f55\u5c5e\u6027\uff0c\u8bf7\u53c2\u9605 template_type.WMTemplateType \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 <code>confusables_chars_key</code> \u53ea\u6709\u5f53\u6a21\u677f\u7684\u65b9\u6cd5\u662f <code>WMMethod.DECORATE_EACH_CHAR</code> \u6216 <code>WMMethod.APPEND_AS_BINARY</code> \u65f6\u624d\u9700\u8981\u8bbe\u7f6e</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 <code>TextWatermark</code> \u5b9e\u4f8b\u4e2d\u7684 <code>set_tpl(confusables_chars, method, confusables_chars_key='')</code> \u65b9\u6cd5\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u81ea\u5df1\u5b9a\u5236\u6a21\u677f\u3002 <code>set_tpl</code> \u65b9\u6cd5\u6709 3 \u4e2a\u53c2\u6570\uff1a <code>confusables_chars</code> \u662f\u4e00\u4e2a\u5217\u8868\u6216\u5b57\u5178\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> Python<pre><code># confusables_chars \u5217\u8868\u7c7b\u578b\u793a\u4f8b\nconfusables_chars = ['\\u0300', '\\u0301', '\\u0302', '\\u0303', '\\u0304']\n# \u6216\u8005\n# \u5b57\u5178\u7c7b\u578b\u7684 confusables_chars \u793a\u4f8b\nconfusables_chars = {\n'black1': ['#000', '#111'],\n'black2': ['#000', '#222'],\n}\n</code></pre> <p><code>method</code> \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3a <code>WMMethod</code> \u7684\u5c5e\u6027\u4e4b\u4e00\uff0c\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 defines.WMMethod\u3002</p> <p>\u5982\u679c <code>method</code> \u8bbe\u7f6e\u4e3a <code>WMMethod.FIND_AND_REPLACE</code> \u610f\u5473\u7740\u6a21\u677f\u5c06\u4f7f\u7528\u67e5\u627e\u4e00\u4e9b\u4e0e <code>confusables_chars</code> \u7684\u952e\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u5e76\u5c06\u5176\u66ff\u6362\u4e3a\u6392\u5e8f\u4e2d\u7684 <code>confusables_chars</code> \u7684\u503c\u3002 \u6240\u4ee5 <code>confusables_chars</code> \u5fc5\u987b\u662f\u5b57\u5178\u7c7b\u578b\u3002</p> <p>\u5982\u679c <code>method</code> \u8bbe\u7f6e\u4e3a <code>WMMethod.INSERT_INTO_POSITION</code> \u610f\u5473\u7740\u6c34\u5370\u5c06\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5168\u90e8\u63d2\u5165\u5230\u6587\u672c\u7684\u6307\u5b9a\u4f4d\u7f6e\u3002 key \u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u6240\u4ee5 <code>confusables_chars</code> \u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b\u3002</p> <p>\u5982\u679c <code>method</code> \u8bbe\u7f6e\u4e3a <code>WMMethod.DECORATE_EACH_CHAR</code> \u610f\u5473\u7740\u4e0d\u540c\u7684\u88c5\u9970\u5c06\u56f4\u7ed5\u6587\u672c\u7684\u6bcf\u4e2a\u5b57\u7b26\u3002 \u6bcf\u4e2a\u6a21\u677f\u4e2d\u6709\u51e0\u4e2a\u88c5\u9970\uff0c\u4f7f\u7528\u952e\u6765\u533a\u5206\u5b83\u4eec\u3002 \u6240\u4ee5 <code>confusables_chars</code> \u662f\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\u3002</p> <p>\u5982\u679c <code>method</code> \u8bbe\u7f6e\u4e3a <code>WMMethod.APPEND_TO_CHAR</code> \u610f\u5473\u7740\u6a21\u677f\u7684\u4e0d\u540c\u5b57\u7b26\u5c06\u6309\u6392\u5e8f\u9644\u52a0\u5230\u6587\u672c\u7684\u6bcf\u4e2a\u5b57\u7b26\u3002 key \u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u6240\u4ee5 <code>confusables_chars</code> \u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b\u3002</p> <p>\u5982\u679c <code>method</code> \u8bbe\u7f6e\u4e3a <code>WMMethod.APPEND_AS_BINARY</code> \u610f\u5473\u7740\u6a21\u677f\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u5c06\u4ee5\u4e8c\u8fdb\u5236\u6a21\u5f0f\u9644\u52a0\u5230\u6587\u672c\u7684\u67d0\u4e9b\u5b57\u7b26\u3002 \u5982\u679c\u6c34\u5370\u5b57\u7b26\u5728\u6587\u672c\u5b57\u7b26\u540e\u9762\uff0c\u5219\u4ee3\u7801\u4e3a <code>1</code>\uff0c\u5426\u5219\u4e3a <code>0</code>\u3002\u6709\u5f88\u591a\u5b57\u7b26\u53ef\u4ee5\u4ee5\u96be\u4ee5\u5bdf\u89c9\u7684\u5dee\u5f02\u9644\u52a0\u5230\u53e6\u4e00\u4e2a\u5b57\u7b26\u3002 \u6240\u4ee5\u4e00\u4e2a\u952e\u662f\u5fc5\u8981\u7684\uff0c<code>confusables_chars</code>\u662f\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\u3002</p> <p>\u5f53 <code>confusables_chars</code> \u4e3a\u5b57\u5178\u7c7b\u578b\u65f6\uff0c\u5fc5\u987b\u8bbe\u7f6e <code>confusables_chars_key</code> \u4ee5\u4ece <code>confusables_chars</code> \u4e2d\u9009\u62e9\u4e00\u9879\u3002</p>"},{"location":"usage/#3","title":"3.\u8bbe\u7f6e\u6c34\u5370\u5b57\u7b26\u4e32\u7684\u6700\u5927\u503c","text":"Python<pre><code># \u8bbe\u7f6e\u6c34\u5370\u5b57\u7b26\u4e32\u4e2d\u7684\u6700\u5927\u503c\nwm.set_wm_max(wm_max='999999999')\n</code></pre> <p><code>set_wm_max</code> \u7528\u4e8e\u8bbe\u7f6e\u6240\u6709\u6c34\u5370\u4e2d\u6700\u957f\uff08\u6216\u6700\u5927\uff09\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u7531\u4e8e\u8f93\u5165\u7684\u6c34\u5370\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u53ef\u53d8\u7684\uff0c\u8fd9\u4f1a\u7ed9\u6c34\u5370\u7684\u68c0\u7d22\u5e26\u6765\u9ebb\u70e6\uff1a\u96be\u4ee5\u786e\u5b9a\u6c34\u5370\u7684\u8fb9\u754c\u6216\u5224\u65ad\u6c34\u5370\u7684\u4e22\u5931\u3002 \u56e0\u6b64\uff0c\u5728\u8fd9\u4e2a\u5e93\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba1\u7b97\u5e76\u8bbe\u7f6e\u6c34\u5370\u5b57\u7b26\u4e32\u7684\u6700\u957f\uff08\u6216\u6700\u5927\uff09\u957f\u5ea6\u4e3a\u9ed8\u8ba4\u503c\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6c34\u5370\u5b57\u7b26\u4e32\u9884\u7b97\u4e3a <code>1</code> \u5230 <code>999999999</code> \u4e4b\u95f4\u7684 id\uff0c\u6211\u4eec\u9700\u8981\u5c06<code>wm_max</code>\u503c\u8bbe\u7f6e\u4e3a\u5b57\u7b26\u4e32<code>999999999</code>\u3002</p>"},{"location":"usage/#4","title":"4.\u8bbe\u7f6e\u8981\u52a0\u6c34\u5370\u7684\u6587\u5b57","text":"Python<pre><code># \u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u8981\u52a0\u6c34\u5370\u7684\u6587\u672c\nwm.set_text_file(path=os.path.abspath('../tests/text/1.txt'))\n# \u6216\u8005\n# \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bbe\u7f6e\u8981\u52a0\u6c34\u5370\u7684\u6587\u672c\nwm.set_text(text='text string')\n</code></pre> <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4e3a\u8981\u52a0\u6c34\u5370\u7684\u201c\u6587\u672c\u201d\u8bbe\u7f6e\u503c\u3002 \u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u5c06\u6587\u672c\u6587\u4ef6\u8def\u5f84\u8bbe\u7f6e\u4e3a <code>set_text_file</code> \u65b9\u6cd5\uff0c\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5c06\u6587\u672c\u5b57\u7b26\u4e32\u8bbe\u7f6e\u4e3a <code>set_text</code> \u65b9\u6cd5\u3002 \u9009\u62e9\u4f60\u60f3\u8981\u7684\u3002</p>"},{"location":"usage/#5","title":"5.\u5411\u6587\u672c\u63d2\u5165\u6c34\u5370\u5b57\u7b26\u4e32","text":"Python<pre><code># \u5728\u6587\u672c\u4e2d\u63d2\u5165\u6c34\u5370\nwm_text = wm.insert_watermark(wm_str='123456789')\nprint(wm_text)\n</code></pre> <p>\u6700\u540e\u4e00\u6b65\u662f\u4f7f\u7528 insert_watermark \u65b9\u6cd5\u5728\u6587\u672c\u4e2d\u63d2\u5165\u6c34\u5370\u3002</p>"},{"location":"usage/#_3","title":"\u8fd8\u6709\u4e00\u4ef6\u4e8b","text":"<p>\u4fdd\u5b58\u6c34\u5370\u8bbe\u7f6e\u5e76\u627e\u56de\u6c34\u5370</p>"},{"location":"usage/#_4","title":"\u4fdd\u5b58\u6c34\u5370\u8bbe\u7f6e","text":"Python<pre><code>params = wm.export_params()\n</code></pre> <p>\u7531\u4e8e\u53ef\u80fd\u5b58\u5728\u4e0d\u540c\u7684<code>TextWatermark</code>\u5b9e\u4f8b\u548c\u914d\u7f6e\uff0c\u6216\u8005\u7531\u4e8e\u5305\u5347\u7ea7\u5bfc\u81f4\u6a21\u677f\u53d1\u751f\u53d8\u5316\uff0c\u6700\u7ec8\u5bfc\u81f4\u6c34\u5370\u5185\u5bb9\u56e0\u4e22\u5931\u53c2\u6570\u800c\u65e0\u6cd5\u627e\u56de\u3002 \u4e3a\u6b64\uff0c\u672c\u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53c2\u6570\u5bfc\u51fa\u51fd\u6570<code>export_params</code>\uff0c\u60a8\u53ef\u4ee5\u5c06\u5bfc\u51fa\u7684JSON\u5b57\u7b26\u4e32\u5b58\u50a8\u5728\u4efb\u610f\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u60a8\u5728\u9700\u8981\u65f6\u65b9\u4fbf\u5730\u68c0\u7d22\u6587\u672c\u4e2d\u7684\u6c34\u5370\u5185\u5bb9\u3002</p>"},{"location":"usage/#_5","title":"\u627e\u56de\u6c34\u5370","text":"Python<pre><code>wm_out_str = TextWatermark.retrieve_watermark(wm_text=wm_text, params=params)\nassert wm_out_str == wm_str\n</code></pre> <p>\u5bfc\u51fa\u53c2\u6570 JSON \u5b57\u7b26\u4e32\u540e\uff0c\u60a8\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528<code>TextWatermark.retrieve_watermark</code>\u65b9\u6cd5\u4ece\u5e26\u6c34\u5370\u7684\u6587\u672c\u4e2d\u68c0\u7d22\u6c34\u5370\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u662f\u9759\u6001\u7684\uff0c\u4f60\u4e0d\u9700\u8981\u5148\u521d\u59cb\u5316\u4e00\u4e2a <code>TextWatermark</code> \u5b9e\u4f8b\u3002</p>"},{"location":"api/cmdline/","title":"CMD Line","text":""},{"location":"api/cmdline/#cmdline","title":"CMDLine","text":"<p>Command line interface</p>"},{"location":"api/cmdline/#textwatermark.cmdline.main","title":"<code>main(ctx, version, verbose, debug)</code>","text":"<p>Main commands</p> Source code in <code>textwatermark/cmdline.py</code> Python<pre><code>@click.group(invoke_without_command=True)\n@click.pass_context\n@click.option('-V', '--version', is_flag=True, help='Show version and exit.')\n@click.option('-v', '--verbose', is_flag=True, help='Show more info.')\n# If it's true, it will override `settings.VERBOSE`\n@click.option('--debug', is_flag=True, help='Enable debug.')\n# If it's true, it will override `settings.DEBUG`\ndef main(ctx: Context, version: str, verbose: bool, debug: bool):\n'''Main commands'''\nif version:\nclick.echo(__version__)\nelif ctx.invoked_subcommand is None:\nclick.echo(ctx.get_help())\nelse:\nif verbose:\nsettings.set('VERBOSE', True)\nif debug:\nsettings.set('DEBUG', True)\n</code></pre>"},{"location":"api/cmdline/#textwatermark.cmdline.insert","title":"<code>insert(text_file, out_file, wm_mode, template_type, wm_max, wm_str, wm_base, template_chars_key, wm_loop, start_at, export_params, no_flag_bit)</code>","text":"<p>Insert watermark to text</p> <p>Examples:</p> <p>Insert watermark to text file:</p> <p><code>textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999999999 -w 123456789</code></p> <p>Export params to out_file:</p> <p><code>textwatermark -v insert -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS -x 999999999 -w 123456789 -e -o 'out.txt'</code></p> Source code in <code>textwatermark/cmdline.py</code> Python<pre><code>@main.command()\n@click.option('-f', '--text-file',  type=str, required=False,\nhelp='Text file waiting for watermarking')\n@click.option('-o', '--out-file',  type=str, required=False,\nhelp='Watermarked file to be saved')\n@click.option('-m', '--wm-mode',  type=str, required=True,\nhelp='Watermark mode value in defines.WMMode')\n@click.option('-t', '--template-type',  type=str, required=True,\nhelp='Template type in templates')\n@click.option('-x', '--wm-max',  type=str, required=True,\nhelp='Max value or string of the watermark')\n@click.option('-w', '--wm-str',  type=str, required=True,\nhelp='Watermark string')\n@click.option('-b', '--wm-base',  type=int, default=0, required=False,\nhelp='Base conversion of watermark string')\n@click.option('-k', '--template-chars-key', type=str, default='', required=False,\nhelp='Key of template confusables chars')\n@click.option('-l', '--wm-loop',  is_flag=True,\nhelp='If True then inserts watermark in a loop, Defaults to False')\n@click.option('-i', '--start-at',  type=int, default=0, required=False,\nhelp='Index of where the watermark will be inserted. Defaults to 0.')\n@click.option('-e', '--export-params', is_flag=True,\nhelp='If True then export watermark params')\n@click.option('-n', '--no-flag-bit', is_flag=True,\nhelp='If True then do not add a flag bit to watermark')\ndef insert(text_file: str, out_file: str, wm_mode: str, template_type: str, wm_max: int,\nwm_str: str, wm_base: int, template_chars_key: str, wm_loop: bool, start_at: int,\nexport_params: bool, no_flag_bit: bool):\n'''Insert watermark to text\n    Examples:\n    Insert watermark to text file:\n    `textwatermark -v insert -f './tests/text/1.txt' -m ALPHA_NUMERICAL\n    -t HOMOGRAPH_NUMBERS -x 999999999 -w 123456789 `\n    Export params to out_file:\n    `textwatermark -v insert -m ALPHA_NUMERICAL -t HOMOGRAPH_NUMBERS\n    -x 999999999 -w 123456789 -e -o 'out.txt'`\n    '''\nverbose = settings.get('VERBOSE')\ntemplate_type = WMTemplateType[template_type]\nif template_type.value.method == WMMethod.DECORATE_EACH_CHAR and \\\n            template_chars_key == '':\nraise ValueError('template_chars_key is required')\nif re.fullmatch('^\\\\\\\\u[0-9]{4}$', template_chars_key) is not None:\ntemplate_chars_key = chr(int(template_chars_key[2:], 16))\n# # init\nwm = TextWatermark(WMMode[wm_mode].value, wm_base,\nstart_at, wm_loop, wm_flag_bit=not no_flag_bit)\nwm.set_tpl_type(template_type, template_chars_key)\nwm.set_wm_max(wm_max=wm_max)\nif export_params:\n# wm.tpl_type = ''\nif out_file:\nout_file_path = os.path.abspath(out_file)\nwith open(out_file_path, 'w', encoding=\"utf-8\") as f:\nf.write(wm.export_params())\nif verbose:\nprint('Export params save to output file: '+out_file_path)\nelse:\nprint('ok')\nelse:\nprint(wm.export_params())\nreturn\ntext_file = os.path.abspath(text_file)\nwm.set_text_file(text_file)\nwm_text = wm.insert_watermark(wm_str)\nif out_file:\nout_file_path = os.path.abspath(out_file)\nwm.save_to_file(wm_text, out_file_path)\nif verbose:\nprint('Save watermarked text to output file: '+out_file_path)\nprint('Orgin text length is: '+str(len(wm.text)))\nprint('Watermarked text length is: '+str(len(wm_text)))\nelse:\nprint('ok')\nelse:\nprint(wm_text)\n</code></pre>"},{"location":"api/cmdline/#textwatermark.cmdline.retrieve","title":"<code>retrieve(wm_text_file, wm_binary, params_json, dont_check_version)</code>","text":"<p>Retrieve watermark from watermarked text</p> <p>Examples:</p> <p><code>textwatermark retrieve -f ./out.txt -p '{the param json string export by   command:insert and option:--export-params}'</code></p> Source code in <code>textwatermark/cmdline.py</code> Python<pre><code>@main.command()\n@click.option('-f', '--wm-text-file',  type=str, required=False,\nhelp='Text file already be watermarked')\n@click.option('-b', '--wm-binary',  type=str, required=False,\nhelp='Watermark string in binary')\n@click.option('-p', '--params-json',  type=str, required=True,\nhelp='Param json when watermarking text')\n@click.option('-F', '--dont-check-version',  is_flag=True,\nhelp='Don\\'t check versions between params and library')\ndef retrieve(wm_text_file: str, wm_binary: str, params_json: str,\ndont_check_version: bool):\n'''Retrieve watermark from watermarked text\n    Examples:\n    `textwatermark retrieve -f ./out.txt -p '{the param json string export by  \n    command:insert and option:--export-params}'`\n    '''\nverbose = settings.get('VERBOSE')\nif not wm_text_file and not wm_binary:\nraise ValueError(\n'No watermarked text file or watermark binary string set')\nif wm_binary:\nwm_out_str = TextWatermark.retrieve_watermark_from_bin(\nwm_binary, params_json, dont_check_version)\nelse:\nwm_text_file = os.path.abspath(wm_text_file)\nif not os.path.exists(wm_text_file):\nraise ValueError(f'ERROR: file {wm_text_file} does not exist')\ntry:\nwith open(wm_text_file, 'r', encoding='utf-8') as f:\nwm_text = f.read()\nexcept OSError as err:\nprint(\nf'ERROR: cannot read file {wm_text_file}, err is {err.strerror}')\nsys.exit()\nwm_out_str = TextWatermark.retrieve_watermark(wm_text, params_json,\ndont_check_version)\nif verbose:\nprint(f'The retrieved watermark is: {wm_out_str}')\nelse:\nprint(wm_out_str)\n</code></pre>"},{"location":"api/conversion/","title":"WMConversion","text":""},{"location":"api/conversion/#wmconversion","title":"WMConversion","text":"<p>Class of Conversion</p>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion","title":"<code>WMConversion</code>","text":"<p>A class to insert watermark into plain text</p>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion--example","title":"Example:","text":"Python<pre><code>wm_base = 0\nwm_str = '123'\nwmc = WMConversion(WMMode.REAL_NUMBER, wm_base)\nwm_final = wmc.wm_convert_to_arbitrary_base(wm_str)\nwm_out_str = wmc.wm_restore_from_arbitrary_base(wm_final)\nassert wm_str == wm_out_str\nprint(wmc.calc_max_wm_length(wm_str+wm_str), wm_final, wm_str, wm_out_str)\n</code></pre> Source code in <code>textwatermark/conversion.py</code> Python<pre><code>class WMConversion:\n'''\n    A class to insert watermark into plain text\n    Example:\n    --------\n    ```py\n    wm_base = 0\n    wm_str = '123'\n    wmc = WMConversion(WMMode.REAL_NUMBER, wm_base)\n    wm_final = wmc.wm_convert_to_arbitrary_base(wm_str)\n    wm_out_str = wmc.wm_restore_from_arbitrary_base(wm_final)\n    assert wm_str == wm_out_str\n    print(wmc.calc_max_wm_length(wm_str+wm_str), wm_final, wm_str, wm_out_str)\n    ```\n    '''\ndef __init__(self, wm_mode: WMMode, wm_base: int):\n'''Class TextWatermark init\n        If debug is set to True, the watermark processing will be printed.\n        Args:\n            wm_mode (WMMode): Set watermark encoding mode. \n            wm_base (int): Watermark's conversion base\n        Raises:\n            ValueError: If `base` is not in the range [2, 36]\n        '''\nself.wm_mode = wm_mode\n'''Setting different watermark modes will effectively reduce the size of \n        the watermark string.'''\nif wm_base &lt; 2 or wm_base &gt; 36:\nraise ValueError(\nf'watermark convert base must be between 2 and 36: {wm_base}')\nself.wm_base = wm_base\n'''watermark conversion base must be between 2 and 36'''\ndef calc_max_wm_length(self, wm_max: str):\n'''Calculate the watermark length in target base\n        This method usually be used with `wm.set_fixed_wm_length` method.\n        This method will calculate the length of the longest (or largest) \n        watermark string in the input string. Then call `wm.set_fixed_wm_length` \n        method set the return value to wm.wm_fixed_len.\n        **It should be noted that:** *the length calculated by this method will \n        add 1 to the original length. The purpose is to quickly locate the \n        starting position of the watermark string when filling the watermark \n        string with 0, so as to ensure that the correct value is obtained and \n        restored. *\n        Args:\n            wm_max (str): Maximum watermark string in target base\n        Returns:\n            (int): Returns the length of the watermark string in the specified base\n        '''\nwm_final = self.wm_convert_to_arbitrary_base(wm_max)\nreturn len(wm_final)\ndef wm_convert_to_arbitrary_base(self, wm_str: str):\n'''Convert watermark to arbitrary base string\n        Args:\n            wm_str (str): Watermark string\n        Returns:\n            (str): Returns watermark string in arbitrary base\n        Raises:\n            ValueError: if `wm_str` type is not match `wm_mode`\n            ValueError: if invalid watermark `wm_mode`\n            ValueError: if invalid watermark `wm_base`\n        '''\nif not isinstance(wm_str, str):\nwm_str = str(wm_str)\nwm_bin = ''\nmatch self.wm_mode:\ncase WMMode.REAL_NUMBER:\nif not re.fullmatch(r'[0-9]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} is not numerical ')\nwm_bin = str(bin(int(wm_str)))[2:]\ncase WMMode.LETTERS_LOWER_CASE:\nif not re.fullmatch(r'[a-z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not lower case letters ')\nwm_bin = ''.join(\nformat(ord(i)-ord('a')+1, '05b') for i in wm_str)\ncase WMMode.LETTERS_UPPER_CASE:\nif not re.fullmatch(r'[A-Z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not upper case letters ')\nwm_bin = ''.join(\nformat(ord(i)-ord('A')+1, '05b') for i in wm_str)\ncase WMMode.LETTERS_MIXED_CASE:\nif not re.fullmatch(r'[a-zA-Z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not mixed case letters ')\nwm_bin = ''.join(\nformat(ord(i)-ord('A')+1, '06b') for i in wm_str)\ncase WMMode.ALPHA_NUMERICAL:\nif not re.fullmatch(r'[0-9a-zA-Z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not mixed case letters ')\nfor i in wm_str:\nord_i = ord(i)\nif ord('0') &lt;= ord_i &lt;= ord('9'):\nwm_bin += format(ord_i - ord('0') + 1, '06b')\nelif ord('A') &lt;= ord_i &lt;= ord('Z'):\nwm_bin += format(ord_i - ord('A') + 1 + 10, '06b')\nelif ord('a') &lt;= ord_i &lt;= ord('z'):\nwm_bin += format(ord_i - ord('a') + 1 + 36, '06b')\ncase WMMode.ALPHA_NUMERICAL_SPECIAL:\nif not re.fullmatch(r'[!-~]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not mixed case letters ')\nwm_bin = ''.join(format(ord(i), '07b') for i in wm_str)\ncase WMMode.UNICODE:\nwm_bin = BitArray(wm_str.encode('UTF-8')).bin\ncase _:\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {self.wm_mode}')\n# convert wm_bin to arbitrary base string\nif self.wm_base &lt; 2 or self.wm_base &gt; 36:\nraise ValueError(\nf'Error: Unsupported base value. Must be between 2 and 16: {self.wm_base}')\nnum = np.base_repr(int(wm_bin, 2), self.wm_base)\nreturn str(num)\ndef _get_str_from_bin(self, wm_bin: str, bin_len: int, offset: int):\n'''Generate the watermark string from binary string.\n        Args:\n            wm_bin (str): watermark binary string\n            bin_len (int): The number of bytes representing a watermark character\n            offset (int): The number of leading bits of the binary string\n        Returns:\n            (str): restored watermark string\n        '''\nwm_str = ''\nif len(wm_bin) % bin_len != 0:\nwm_bin = wm_bin.zfill(bin_len - len(wm_bin) %\nbin_len + len(wm_bin))\nfor i in range(0, len(wm_bin), bin_len):\nwm_str += chr(int(wm_bin[i:i + bin_len], 2) + offset)\nreturn wm_str\ndef wm_restore_from_arbitrary_base(self, wm_final: str):\n'''Restore watermark from arbitrary base string\n        Args:\n            wm_final (str): Arbitrary base watermark string\n        Returns:\n            (str): restored watermark string\n        Raises:\n            Error: If Invalid WMMode\n        '''\n# convert wm_bin from arbitrary base string\nwm_bin = str(bin(int(wm_final, self.wm_base)))[2:]\nwm_str = ''\nmatch self.wm_mode:\ncase WMMode.REAL_NUMBER:\nwm_str = str(int(wm_bin, 2))\ncase WMMode.LETTERS_LOWER_CASE:\nwm_str = self._get_str_from_bin(wm_bin, 5, ord('a')-1)\ncase WMMode.LETTERS_UPPER_CASE:\nwm_str = self._get_str_from_bin(wm_bin, 5, ord('A')-1)\ncase WMMode.LETTERS_MIXED_CASE:\nwm_str = self._get_str_from_bin(wm_bin, 6, ord('A')-1)\ncase WMMode.ALPHA_NUMERICAL:\nif len(wm_bin) % 6 != 0:\nwm_bin = wm_bin.zfill(6 - len(wm_bin) % 6 + len(wm_bin))\nfor i in range(0, len(wm_bin), 6):\nnum = int(wm_bin[i:i + 6], 2)\nif num &lt;= 10:\nwm_str += chr(num + ord('0') - 1)\nelif 10 &lt; num &lt;= 36:\nwm_str += chr(num + ord('A') - 1 - 10)\nelif 36 &lt; num &lt;= 62:\nwm_str += chr(num + ord('a') - 1 - 36)\ncase WMMode.ALPHA_NUMERICAL_SPECIAL:\nwm_str = self._get_str_from_bin(wm_bin, 7, 0)\ncase WMMode.UNICODE:\nwm_str = BitArray(bin=wm_bin).bytes.decode(encoding='UTF-8')\ncase _:\nraise ValueError(f'ERROR: Invalid WMMode: {self.wm_mode}')\nreturn wm_str\n</code></pre>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion.wm_base","title":"<code>wm_base = wm_base</code>  <code>instance-attribute</code>","text":"<p>watermark conversion base must be between 2 and 36</p>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion.wm_mode","title":"<code>wm_mode = wm_mode</code>  <code>instance-attribute</code>","text":"<p>Setting different watermark modes will effectively reduce the size of  the watermark string.</p>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion.__init__","title":"<code>__init__(wm_mode, wm_base)</code>","text":"<p>Class TextWatermark init</p> <p>If debug is set to True, the watermark processing will be printed.</p> <p>Parameters:</p> Name Type Description Default <code>wm_mode</code> <code>WMMode</code> <p>Set watermark encoding mode. </p> required <code>wm_base</code> <code>int</code> <p>Watermark's conversion base</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>base</code> is not in the range [2, 36]</p> Source code in <code>textwatermark/conversion.py</code> Python<pre><code>def __init__(self, wm_mode: WMMode, wm_base: int):\n'''Class TextWatermark init\n    If debug is set to True, the watermark processing will be printed.\n    Args:\n        wm_mode (WMMode): Set watermark encoding mode. \n        wm_base (int): Watermark's conversion base\n    Raises:\n        ValueError: If `base` is not in the range [2, 36]\n    '''\nself.wm_mode = wm_mode\n'''Setting different watermark modes will effectively reduce the size of \n    the watermark string.'''\nif wm_base &lt; 2 or wm_base &gt; 36:\nraise ValueError(\nf'watermark convert base must be between 2 and 36: {wm_base}')\nself.wm_base = wm_base\n'''watermark conversion base must be between 2 and 36'''\n</code></pre>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion.calc_max_wm_length","title":"<code>calc_max_wm_length(wm_max)</code>","text":"<p>Calculate the watermark length in target base</p> <p>This method usually be used with <code>wm.set_fixed_wm_length</code> method. This method will calculate the length of the longest (or largest)  watermark string in the input string. Then call <code>wm.set_fixed_wm_length</code>  method set the return value to wm.wm_fixed_len.</p> <p>It should be noted that: *the length calculated by this method will  add 1 to the original length. The purpose is to quickly locate the  starting position of the watermark string when filling the watermark  string with 0, so as to ensure that the correct value is obtained and  restored. *</p> <p>Parameters:</p> Name Type Description Default <code>wm_max</code> <code>str</code> <p>Maximum watermark string in target base</p> required <p>Returns:</p> Type Description <code>int</code> <p>Returns the length of the watermark string in the specified base</p> Source code in <code>textwatermark/conversion.py</code> Python<pre><code>def calc_max_wm_length(self, wm_max: str):\n'''Calculate the watermark length in target base\n    This method usually be used with `wm.set_fixed_wm_length` method.\n    This method will calculate the length of the longest (or largest) \n    watermark string in the input string. Then call `wm.set_fixed_wm_length` \n    method set the return value to wm.wm_fixed_len.\n    **It should be noted that:** *the length calculated by this method will \n    add 1 to the original length. The purpose is to quickly locate the \n    starting position of the watermark string when filling the watermark \n    string with 0, so as to ensure that the correct value is obtained and \n    restored. *\n    Args:\n        wm_max (str): Maximum watermark string in target base\n    Returns:\n        (int): Returns the length of the watermark string in the specified base\n    '''\nwm_final = self.wm_convert_to_arbitrary_base(wm_max)\nreturn len(wm_final)\n</code></pre>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion.wm_convert_to_arbitrary_base","title":"<code>wm_convert_to_arbitrary_base(wm_str)</code>","text":"<p>Convert watermark to arbitrary base string</p> <p>Parameters:</p> Name Type Description Default <code>wm_str</code> <code>str</code> <p>Watermark string</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns watermark string in arbitrary base</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>wm_str</code> type is not match <code>wm_mode</code></p> <code>ValueError</code> <p>if invalid watermark <code>wm_mode</code></p> <code>ValueError</code> <p>if invalid watermark <code>wm_base</code></p> Source code in <code>textwatermark/conversion.py</code> Python<pre><code>def wm_convert_to_arbitrary_base(self, wm_str: str):\n'''Convert watermark to arbitrary base string\n    Args:\n        wm_str (str): Watermark string\n    Returns:\n        (str): Returns watermark string in arbitrary base\n    Raises:\n        ValueError: if `wm_str` type is not match `wm_mode`\n        ValueError: if invalid watermark `wm_mode`\n        ValueError: if invalid watermark `wm_base`\n    '''\nif not isinstance(wm_str, str):\nwm_str = str(wm_str)\nwm_bin = ''\nmatch self.wm_mode:\ncase WMMode.REAL_NUMBER:\nif not re.fullmatch(r'[0-9]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} is not numerical ')\nwm_bin = str(bin(int(wm_str)))[2:]\ncase WMMode.LETTERS_LOWER_CASE:\nif not re.fullmatch(r'[a-z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not lower case letters ')\nwm_bin = ''.join(\nformat(ord(i)-ord('a')+1, '05b') for i in wm_str)\ncase WMMode.LETTERS_UPPER_CASE:\nif not re.fullmatch(r'[A-Z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not upper case letters ')\nwm_bin = ''.join(\nformat(ord(i)-ord('A')+1, '05b') for i in wm_str)\ncase WMMode.LETTERS_MIXED_CASE:\nif not re.fullmatch(r'[a-zA-Z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not mixed case letters ')\nwm_bin = ''.join(\nformat(ord(i)-ord('A')+1, '06b') for i in wm_str)\ncase WMMode.ALPHA_NUMERICAL:\nif not re.fullmatch(r'[0-9a-zA-Z]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not mixed case letters ')\nfor i in wm_str:\nord_i = ord(i)\nif ord('0') &lt;= ord_i &lt;= ord('9'):\nwm_bin += format(ord_i - ord('0') + 1, '06b')\nelif ord('A') &lt;= ord_i &lt;= ord('Z'):\nwm_bin += format(ord_i - ord('A') + 1 + 10, '06b')\nelif ord('a') &lt;= ord_i &lt;= ord('z'):\nwm_bin += format(ord_i - ord('a') + 1 + 36, '06b')\ncase WMMode.ALPHA_NUMERICAL_SPECIAL:\nif not re.fullmatch(r'[!-~]+', wm_str):\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {wm_str} are not mixed case letters ')\nwm_bin = ''.join(format(ord(i), '07b') for i in wm_str)\ncase WMMode.UNICODE:\nwm_bin = BitArray(wm_str.encode('UTF-8')).bin\ncase _:\nraise ValueError(\nf'ERROR: invalid watermark wm_mode: {self.wm_mode}')\n# convert wm_bin to arbitrary base string\nif self.wm_base &lt; 2 or self.wm_base &gt; 36:\nraise ValueError(\nf'Error: Unsupported base value. Must be between 2 and 16: {self.wm_base}')\nnum = np.base_repr(int(wm_bin, 2), self.wm_base)\nreturn str(num)\n</code></pre>"},{"location":"api/conversion/#textwatermark.conversion.WMConversion.wm_restore_from_arbitrary_base","title":"<code>wm_restore_from_arbitrary_base(wm_final)</code>","text":"<p>Restore watermark from arbitrary base string</p> <p>Parameters:</p> Name Type Description Default <code>wm_final</code> <code>str</code> <p>Arbitrary base watermark string</p> required <p>Returns:</p> Type Description <code>str</code> <p>restored watermark string</p> <p>Raises:</p> Type Description <code>Error</code> <p>If Invalid WMMode</p> Source code in <code>textwatermark/conversion.py</code> Python<pre><code>def wm_restore_from_arbitrary_base(self, wm_final: str):\n'''Restore watermark from arbitrary base string\n    Args:\n        wm_final (str): Arbitrary base watermark string\n    Returns:\n        (str): restored watermark string\n    Raises:\n        Error: If Invalid WMMode\n    '''\n# convert wm_bin from arbitrary base string\nwm_bin = str(bin(int(wm_final, self.wm_base)))[2:]\nwm_str = ''\nmatch self.wm_mode:\ncase WMMode.REAL_NUMBER:\nwm_str = str(int(wm_bin, 2))\ncase WMMode.LETTERS_LOWER_CASE:\nwm_str = self._get_str_from_bin(wm_bin, 5, ord('a')-1)\ncase WMMode.LETTERS_UPPER_CASE:\nwm_str = self._get_str_from_bin(wm_bin, 5, ord('A')-1)\ncase WMMode.LETTERS_MIXED_CASE:\nwm_str = self._get_str_from_bin(wm_bin, 6, ord('A')-1)\ncase WMMode.ALPHA_NUMERICAL:\nif len(wm_bin) % 6 != 0:\nwm_bin = wm_bin.zfill(6 - len(wm_bin) % 6 + len(wm_bin))\nfor i in range(0, len(wm_bin), 6):\nnum = int(wm_bin[i:i + 6], 2)\nif num &lt;= 10:\nwm_str += chr(num + ord('0') - 1)\nelif 10 &lt; num &lt;= 36:\nwm_str += chr(num + ord('A') - 1 - 10)\nelif 36 &lt; num &lt;= 62:\nwm_str += chr(num + ord('a') - 1 - 36)\ncase WMMode.ALPHA_NUMERICAL_SPECIAL:\nwm_str = self._get_str_from_bin(wm_bin, 7, 0)\ncase WMMode.UNICODE:\nwm_str = BitArray(bin=wm_bin).bytes.decode(encoding='UTF-8')\ncase _:\nraise ValueError(f'ERROR: Invalid WMMode: {self.wm_mode}')\nreturn wm_str\n</code></pre>"},{"location":"api/defines/","title":"Defines","text":""},{"location":"api/defines/#defines","title":"Defines","text":"<p>Template type define</p> <p>Defines</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType","title":"<code>WMTemplateType</code>","text":"<p>         Bases: <code>Enum</code></p> <p>watermark template types</p> Source code in <code>textwatermark/template_type.py</code> Python<pre><code>@unique\nclass WMTemplateType(Enum):\n'''watermark template types'''\n# WMMethod.INSERT_INTO_POSITION\n# \u4e0d\u53ef\u89c1\u5b57\u7b26\nINVISIBLE_CHARS = invisible_chars\n'''Invisible characters\n    Notes: WMMethod.INSERT_INTO_POSITION\n        WMMethod.INSERT_INTO_POSITION'''\n# \u7a7a\u767d\u5b57\u7b26\nWHITESPACE_CHARS = whitespace_chars\n'''White space characters\n    Notes: WMMethod.INSERT_INTO_POSITION\n        WMMethod.INSERT_INTO_POSITION'''\n# HTML\u7a7a\u767d\u6807\u7b7e\nHTML_EMPTY_TAGS = html_empty_tags\n'''HTML empty tags\n    Notes: WMMethod.INSERT_INTO_POSITION\n        WMMethod.INSERT_INTO_POSITION'''\n# WMMethod.FIND_AND_REPLACE\nSPACE_CHARS = space_chars\n'''Space characters\n    Notes: WMMethod.FIND_AND_REPLACE\n        WMMethod.FIND_AND_REPLACE'''\n# \u540c\u5f62\u5f02\u4e49\u5b57-\u6570\u5b57\nHOMOGRAPH_NUMBERS = homograph_numbers\n'''Homograph numbers\n    Notes: WMMethod.FIND_AND_REPLACE\n        WMMethod.FIND_AND_REPLACE'''\n# \u540c\u5f62\u5f02\u4e49\u5b57-\u82f1\u6587\nHOMOGRAPH_LETTERS = homograph_letters\n'''Homograph letters\n    Notes: WMMethod.FIND_AND_REPLACE\n        WMMethod.FIND_AND_REPLACE'''\n# \u540c\u5f62\u5f02\u4e49\u5b57-\u7b26\u53f7\nHOMOGRAPH_PUNCTUATIONS = homograph_punctuations\n'''Homograph punctuations\n    Notes: WMMethod.FIND_AND_REPLACE\n        WMMethod.FIND_AND_REPLACE'''\n# \u540c\u5f62\u5f02\u4e49\u5b57-\u6c49\u5b57\nHOMOGRAPH_CHINESE = homograph_chinese\n'''Homograph Chinese\n    Notes: WMMethod.FIND_AND_REPLACE\n        WMMethod.FIND_AND_REPLACE'''\n# \u7e41\u4f53\u5b57\n# TRADITIONAL_CHINESE = 3007\n# \u9519\u522b\u5b57-\u6c49\u5b57\n# WRONG_CHINESE = 3008\n# \u9519\u522b\u5b57-\u5355\u8bcd\n# WRONG_WORDS = 3009\n# \u540c\u4e49\u66ff\u6362-\u6570\u5b57\n# SYNONYM_NUMBERS = 3010\n# \u540c\u4e49\u66ff\u6362-\u6c49\u5b57\n# SYNONYM_CHINESE = 3011\n# \u540c\u4e49\u66ff\u6362-\u5355\u8bcd\n# SYNONYM_WORDS = 3012\n# WMMethod.APPEND_TO_CHAR\n# \u7ec4\u5408\u5b57\u7b26\nCOMBINING_CHARS = combining_chars\n'''Combining characters\n    Notes: WMMethod.APPEND_TO_CHAR\n        WMMethod.APPEND_TO_CHAR'''\n# WMMethod.DECORATE_EACH_CHAR\n# \u5b57\u4f53\u989c\u8272\nFONT_COLOR = font_color\n'''Font color\n    Notes: WMMethod.DECORATE_EACH_CHAR\n        WMMethod.DECORATE_EACH_CHAR'''\n# \u5b57\u4f53\u5927\u5c0f\nFONT_SIZE = font_size\n'''Font size\n    Notes: WMMethod.DECORATE_EACH_CHAR\n        WMMethod.DECORATE_EACH_CHAR'''\n# \u5b57\u4f53\u7c97\u7ec6\nFONT_WEIGHT = font_weight\n'''Font weight\n    Notes: WMMethod.DECORATE_EACH_CHAR\n        WMMethod.DECORATE_EACH_CHAR'''\n# \u5b57\u4f53\u6d6e\u52a8\nFONT_FLOAT = font_float\n'''Font float\n    Notes: WMMethod.DECORATE_EACH_CHAR\n        WMMethod.DECORATE_EACH_CHAR'''\n# \u5b57\u4f53\u6837\u5f0f\nFONT_STYLE = font_style\n'''Font style\n    Notes: WMMethod.DECORATE_EACH_CHAR\n        WMMethod.DECORATE_EACH_CHAR'''\n# WMMethod.APPEND_AS_BINARY\nBINARY_REPRESENTATION = binary_representation\n'''Delete character\n    Notes: WMMethod.APPEND_AS_BINARY\n        WMMethod.APPEND_AS_BINARY'''\n</code></pre>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.INVISIBLE_CHARS","title":"<code>INVISIBLE_CHARS = invisible_chars</code>  <code>class-attribute</code>","text":"<p>Invisible characters</p> WMMethod.INSERT_INTO_POSITION <p>WMMethod.INSERT_INTO_POSITION</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.WHITESPACE_CHARS","title":"<code>WHITESPACE_CHARS = whitespace_chars</code>  <code>class-attribute</code>","text":"<p>White space characters</p> WMMethod.INSERT_INTO_POSITION <p>WMMethod.INSERT_INTO_POSITION</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.HTML_EMPTY_TAGS","title":"<code>HTML_EMPTY_TAGS = html_empty_tags</code>  <code>class-attribute</code>","text":"<p>HTML empty tags</p> WMMethod.INSERT_INTO_POSITION <p>WMMethod.INSERT_INTO_POSITION</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.SPACE_CHARS","title":"<code>SPACE_CHARS = space_chars</code>  <code>class-attribute</code>","text":"<p>Space characters</p> WMMethod.FIND_AND_REPLACE <p>WMMethod.FIND_AND_REPLACE</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.HOMOGRAPH_NUMBERS","title":"<code>HOMOGRAPH_NUMBERS = homograph_numbers</code>  <code>class-attribute</code>","text":"<p>Homograph numbers</p> WMMethod.FIND_AND_REPLACE <p>WMMethod.FIND_AND_REPLACE</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.HOMOGRAPH_LETTERS","title":"<code>HOMOGRAPH_LETTERS = homograph_letters</code>  <code>class-attribute</code>","text":"<p>Homograph letters</p> WMMethod.FIND_AND_REPLACE <p>WMMethod.FIND_AND_REPLACE</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.HOMOGRAPH_PUNCTUATIONS","title":"<code>HOMOGRAPH_PUNCTUATIONS = homograph_punctuations</code>  <code>class-attribute</code>","text":"<p>Homograph punctuations</p> WMMethod.FIND_AND_REPLACE <p>WMMethod.FIND_AND_REPLACE</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.HOMOGRAPH_CHINESE","title":"<code>HOMOGRAPH_CHINESE = homograph_chinese</code>  <code>class-attribute</code>","text":"<p>Homograph Chinese</p> WMMethod.FIND_AND_REPLACE <p>WMMethod.FIND_AND_REPLACE</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.COMBINING_CHARS","title":"<code>COMBINING_CHARS = combining_chars</code>  <code>class-attribute</code>","text":"<p>Combining characters</p> WMMethod.APPEND_TO_CHAR <p>WMMethod.APPEND_TO_CHAR</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.FONT_COLOR","title":"<code>FONT_COLOR = font_color</code>  <code>class-attribute</code>","text":"<p>Font color</p> WMMethod.DECORATE_EACH_CHAR <p>WMMethod.DECORATE_EACH_CHAR</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.FONT_SIZE","title":"<code>FONT_SIZE = font_size</code>  <code>class-attribute</code>","text":"<p>Font size</p> WMMethod.DECORATE_EACH_CHAR <p>WMMethod.DECORATE_EACH_CHAR</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.FONT_WEIGHT","title":"<code>FONT_WEIGHT = font_weight</code>  <code>class-attribute</code>","text":"<p>Font weight</p> WMMethod.DECORATE_EACH_CHAR <p>WMMethod.DECORATE_EACH_CHAR</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.FONT_FLOAT","title":"<code>FONT_FLOAT = font_float</code>  <code>class-attribute</code>","text":"<p>Font float</p> WMMethod.DECORATE_EACH_CHAR <p>WMMethod.DECORATE_EACH_CHAR</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.FONT_STYLE","title":"<code>FONT_STYLE = font_style</code>  <code>class-attribute</code>","text":"<p>Font style</p> WMMethod.DECORATE_EACH_CHAR <p>WMMethod.DECORATE_EACH_CHAR</p>"},{"location":"api/defines/#textwatermark.template_type.WMTemplateType.BINARY_REPRESENTATION","title":"<code>BINARY_REPRESENTATION = binary_representation</code>  <code>class-attribute</code>","text":"<p>Delete character</p> WMMethod.APPEND_AS_BINARY <p>WMMethod.APPEND_AS_BINARY</p>"},{"location":"api/defines/#textwatermark.defines.WMMode","title":"<code>WMMode</code>","text":"<p>         Bases: <code>IntEnum</code></p> <p>An enumerarion of watermark mode</p> Source code in <code>textwatermark/defines.py</code> Python<pre><code>@unique\nclass WMMode(IntEnum):\n'''An enumerarion of watermark mode'''\nREAL_NUMBER = 1\n'''Real numbers, which will be represented directly by binary values, \n        with the smallest length'''\nLETTERS_LOWER_CASE = 2\n'''Lowercase letters, each letter is represented by 5 binary bytes'''\nLETTERS_UPPER_CASE = 3\n'''Uppercase letters, each letter is represented by 5 binary bytes'''\nLETTERS_MIXED_CASE = 4\n'''Mixed case letters, each character is represented by 6 binary bytes'''\nALPHA_NUMERICAL = 5\n'''Uppercase and lowercase letters + numbers, each character is represented by 6 binary bytes'''\nALPHA_NUMERICAL_SPECIAL = 6\n'''Uppercase and lowercase letters + numbers + special symbols, \n        each character is represented by 7 binary bytes'''\nUNICODE = 7\n'''Arbitrary Unicode characters, expressed in UTF-8 encoding'''\n</code></pre>"},{"location":"api/defines/#textwatermark.defines.WMMode.REAL_NUMBER","title":"<code>REAL_NUMBER = 1</code>  <code>class-attribute</code>","text":"<p>Real numbers, which will be represented directly by binary values,  with the smallest length</p>"},{"location":"api/defines/#textwatermark.defines.WMMode.LETTERS_LOWER_CASE","title":"<code>LETTERS_LOWER_CASE = 2</code>  <code>class-attribute</code>","text":"<p>Lowercase letters, each letter is represented by 5 binary bytes</p>"},{"location":"api/defines/#textwatermark.defines.WMMode.LETTERS_UPPER_CASE","title":"<code>LETTERS_UPPER_CASE = 3</code>  <code>class-attribute</code>","text":"<p>Uppercase letters, each letter is represented by 5 binary bytes</p>"},{"location":"api/defines/#textwatermark.defines.WMMode.LETTERS_MIXED_CASE","title":"<code>LETTERS_MIXED_CASE = 4</code>  <code>class-attribute</code>","text":"<p>Mixed case letters, each character is represented by 6 binary bytes</p>"},{"location":"api/defines/#textwatermark.defines.WMMode.ALPHA_NUMERICAL","title":"<code>ALPHA_NUMERICAL = 5</code>  <code>class-attribute</code>","text":"<p>Uppercase and lowercase letters + numbers, each character is represented by 6 binary bytes</p>"},{"location":"api/defines/#textwatermark.defines.WMMode.ALPHA_NUMERICAL_SPECIAL","title":"<code>ALPHA_NUMERICAL_SPECIAL = 6</code>  <code>class-attribute</code>","text":"<p>Uppercase and lowercase letters + numbers + special symbols,  each character is represented by 7 binary bytes</p>"},{"location":"api/defines/#textwatermark.defines.WMMode.UNICODE","title":"<code>UNICODE = 7</code>  <code>class-attribute</code>","text":"<p>Arbitrary Unicode characters, expressed in UTF-8 encoding</p>"},{"location":"api/defines/#textwatermark.defines.WMMethod","title":"<code>WMMethod</code>","text":"<p>         Bases: <code>IntEnum</code></p> <p>Watermark insert methods</p> Source code in <code>textwatermark/defines.py</code> Python<pre><code>@unique\nclass WMMethod(IntEnum):\n'''Watermark insert methods'''\n# \u67e5\u627e\u7279\u5b9a\u5b57\u7b26\u5e76\u66ff\u6362\u6210\u6c34\u5370\u5b57\u7b26\nFIND_AND_REPLACE = 1\n'''Find specific characters and replace with watermark characters'''\n# \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e0d\u53ef\u89c1\u6c34\u5370\nINSERT_INTO_POSITION = 2\n'''Insert an invisible watermark at the specified position'''\n# \u5bf9\u6587\u672c\u4e2d\u7684\u5b57\u7b26\u8fdb\u884c\u4fee\u9970\nDECORATE_EACH_CHAR = 3\n'''Decorate characters in text'''\n# \u5728\u5b57\u7b26\u540e\u6dfb\u52a0\u5355\u4e2a\u6c34\u5370\nAPPEND_TO_CHAR = 4\n'''Add one watermark byte after one character'''\n# \u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5728\u5b57\u7b26\u540e\u9762\u6dfb\u52a0\u6c34\u5370\u5b57\u7b26\nAPPEND_AS_BINARY = 5\n'''Add one watermark byte after one character, in binary'''\n</code></pre>"},{"location":"api/defines/#textwatermark.defines.WMMethod.FIND_AND_REPLACE","title":"<code>FIND_AND_REPLACE = 1</code>  <code>class-attribute</code>","text":"<p>Find specific characters and replace with watermark characters</p>"},{"location":"api/defines/#textwatermark.defines.WMMethod.INSERT_INTO_POSITION","title":"<code>INSERT_INTO_POSITION = 2</code>  <code>class-attribute</code>","text":"<p>Insert an invisible watermark at the specified position</p>"},{"location":"api/defines/#textwatermark.defines.WMMethod.DECORATE_EACH_CHAR","title":"<code>DECORATE_EACH_CHAR = 3</code>  <code>class-attribute</code>","text":"<p>Decorate characters in text</p>"},{"location":"api/defines/#textwatermark.defines.WMMethod.APPEND_TO_CHAR","title":"<code>APPEND_TO_CHAR = 4</code>  <code>class-attribute</code>","text":"<p>Add one watermark byte after one character</p>"},{"location":"api/defines/#textwatermark.defines.WMMethod.APPEND_AS_BINARY","title":"<code>APPEND_AS_BINARY = 5</code>  <code>class-attribute</code>","text":"<p>Add one watermark byte after one character, in binary</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars","title":"<code>WhiteSpaceChars</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Defines of white space chars</p> <p>From: https://jkorpela.fi/chars/spaces.html</p> Source code in <code>textwatermark/defines.py</code> Python<pre><code>@unique\nclass WhiteSpaceChars(Enum):\n'''Defines of white space chars\n    From: &lt;https://jkorpela.fi/chars/spaces.html&gt;\n    '''\nSPACE_1_4 = '\\u0020'\n'''Depends on font, typically 1/4 em, often adjusted'''\nNO_BREAK_SPACE_1_4 = '\\u00A0'\n'''As a space, but often not adjusted'''\nEN_QUAD_1_2 = '\\u2000'\n'''1 en (= 1/2 em)'''\nEM_QUAD_1 = '\\u2001'\n'''\t1 em (nominally, the height of the font)'''\nEN_SPACE_1_2 = '\\u2002'\n'''1 en (= 1/2 em)'''\nEM_SPACE_1 = '\\u2003'\n'''1 em'''\nTHREE_PER_EM_SPACE_1_3 = '\\u2004'\n'''1/3 em'''\nFOUR_PER_EM_SPACE_1_4 = '\\u2005'\n'''1/4 em'''\nSIX_PER_EM_SPACE_1_6 = '\\u2006'\n'''1/6 em'''\nFIGURE_SPACE_LIKE_DIGITS = '\\u2007'\n'''\u201cTabular width\u201d, the width of digits'''\nPUNCTUATION_SPACE_LIKE_DOT = '\\u2008'\n'''The width of a period \u201c.\u201d'''\nTHIN_SPACE_1_6 = '\\u2009'\n'''\t1/5 em (or sometimes 1/6 em)'''\nHAIR_SPACE_1_8 = '\\u200A'\n'''Narrower than `THIN SPACE`'''\nNARROW_NO_BREAK_SPACE_1_6 = '\\u202F'\n'''Narrower than `NO-BREAK SPACE` (or `SPACE`), \n    \u201ctypically the width of a thin space or a mid space\u201d'''\nMEDIUM_MATHEMATICAL_SPACE_2_9 = '\\u205F'\n'''4/18 em'''\n</code></pre>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.SPACE_1_4","title":"<code>SPACE_1_4 = ' '</code>  <code>class-attribute</code>","text":"<p>Depends on font, typically 1/4 em, often adjusted</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.NO_BREAK_SPACE_1_4","title":"<code>NO_BREAK_SPACE_1_4 = '\\xa0'</code>  <code>class-attribute</code>","text":"<p>As a space, but often not adjusted</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.EN_QUAD_1_2","title":"<code>EN_QUAD_1_2 = '\\u2000'</code>  <code>class-attribute</code>","text":"<p>1 en (= 1/2 em)</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.EM_QUAD_1","title":"<code>EM_QUAD_1 = '\\u2001'</code>  <code>class-attribute</code>","text":"<p>1 em (nominally, the height of the font)</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.EN_SPACE_1_2","title":"<code>EN_SPACE_1_2 = '\\u2002'</code>  <code>class-attribute</code>","text":"<p>1 en (= 1/2 em)</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.EM_SPACE_1","title":"<code>EM_SPACE_1 = '\\u2003'</code>  <code>class-attribute</code>","text":"<p>1 em</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.THREE_PER_EM_SPACE_1_3","title":"<code>THREE_PER_EM_SPACE_1_3 = '\\u2004'</code>  <code>class-attribute</code>","text":"<p>1/3 em</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.FOUR_PER_EM_SPACE_1_4","title":"<code>FOUR_PER_EM_SPACE_1_4 = '\\u2005'</code>  <code>class-attribute</code>","text":"<p>1/4 em</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.SIX_PER_EM_SPACE_1_6","title":"<code>SIX_PER_EM_SPACE_1_6 = '\\u2006'</code>  <code>class-attribute</code>","text":"<p>1/6 em</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.FIGURE_SPACE_LIKE_DIGITS","title":"<code>FIGURE_SPACE_LIKE_DIGITS = '\\u2007'</code>  <code>class-attribute</code>","text":"<p>\u201cTabular width\u201d, the width of digits</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.PUNCTUATION_SPACE_LIKE_DOT","title":"<code>PUNCTUATION_SPACE_LIKE_DOT = '\\u2008'</code>  <code>class-attribute</code>","text":"<p>The width of a period \u201c.\u201d</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.THIN_SPACE_1_6","title":"<code>THIN_SPACE_1_6 = '\\u2009'</code>  <code>class-attribute</code>","text":"<p>1/5 em (or sometimes 1/6 em)</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.HAIR_SPACE_1_8","title":"<code>HAIR_SPACE_1_8 = '\\u200a'</code>  <code>class-attribute</code>","text":"<p>Narrower than <code>THIN SPACE</code></p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.NARROW_NO_BREAK_SPACE_1_6","title":"<code>NARROW_NO_BREAK_SPACE_1_6 = '\\u202f'</code>  <code>class-attribute</code>","text":"<p>Narrower than <code>NO-BREAK SPACE</code> (or <code>SPACE</code>),  \u201ctypically the width of a thin space or a mid space\u201d</p>"},{"location":"api/defines/#textwatermark.defines.WhiteSpaceChars.MEDIUM_MATHEMATICAL_SPACE_2_9","title":"<code>MEDIUM_MATHEMATICAL_SPACE_2_9 = '\\u205f'</code>  <code>class-attribute</code>","text":"<p>4/18 em</p>"},{"location":"api/main/","title":"TextWatermark","text":""},{"location":"api/main/#textwatermark","title":"TextWatermark","text":"<p>Main Class of TextWatermark</p>"},{"location":"api/main/#textwatermark.main.TextWatermark","title":"<code>TextWatermark</code>","text":"<p>A class to insert watermark into plain text</p>"},{"location":"api/main/#textwatermark.main.TextWatermark--example","title":"Example:","text":"Python<pre><code>import os\nfrom textwatermark.defines import WMMode\nfrom textwatermark.main import TextWatermark\nfrom textwatermark.templates import homograph_numbers\nwm_mode = WMMode.REAL_NUMBER\ntemplate = homograph_numbers\nwm_max = '9'*9\nconfusables_chars_key = ''\n# init\nwm = TextWatermark(wm_mode)\nwm = set_tpl(template.CONFUSABLES_CHARS,\ntemplate.method,\nconfusables_chars_key)\nwm.set_wm_max(wm_max)\nwm.set_text_file(os.path.abspath(\nos.path.dirname(__file__)+'/../tests/text/1.txt'))\n# Insert watermark to text\nwm_str = '123456789'\nwm_text = wm.insert_watermark(wm_str)\n# Save the parameters to retrieve the watermark\nparams = wm.export_params()\n# retrieve the watermark\nwm_out_str = TextWatermark.retrieve_watermark(wm_text, params)\nprint(wm_text)\nassert wm_out_str == wm_str\n</code></pre> Source code in <code>textwatermark/main.py</code> Python<pre><code>class TextWatermark:\n'''\n    A class to insert watermark into plain text\n    Example:\n    --------\n    ```py\n    import os\n    from textwatermark.defines import WMMode\n    from textwatermark.main import TextWatermark\n    from textwatermark.templates import homograph_numbers\n    wm_mode = WMMode.REAL_NUMBER\n    template = homograph_numbers\n    wm_max = '9'*9\n    confusables_chars_key = ''\n    # init\n    wm = TextWatermark(wm_mode)\n    wm = set_tpl(template.CONFUSABLES_CHARS,\n                 template.method,\n                 confusables_chars_key)\n    wm.set_wm_max(wm_max)\n    wm.set_text_file(os.path.abspath(\n        os.path.dirname(__file__)+'/../tests/text/1.txt'))\n    # Insert watermark to text\n    wm_str = '123456789'\n    wm_text = wm.insert_watermark(wm_str)\n    # Save the parameters to retrieve the watermark\n    params = wm.export_params()\n    # retrieve the watermark\n    wm_out_str = TextWatermark.retrieve_watermark(wm_text, params)\n    print(wm_text)\n    assert wm_out_str == wm_str\n    ```\n    '''\ntext: str\n'''Text to be watermarked.\n        Set text by `self.set_text(text)` or `self.set_text_file(file_path)`\n    '''\nwmc: WMConversion\n'''Instance of WMConverison'''\nwmt: WMTemplate\n'''Instance of WMTemplate'''\nwm_max: str\n'''Maximum watermark string.'''\nwm_fixed_len: int = 0\n'''The longest (or largest) watermark string.\n        When wm_flag_bit is true,\n        The value of wm_max_len is 1 larger the actual value '''\ntpl_type: str = ''\n'''template type in WMTemplateType'''\nwm_flag_bit: bool = True\n'''If set a flag bit when insert watermark or not'''\ndef __init__(self, wm_mode: WMMode, wm_base: int = 0, start_at: int = 0,\nwm_loop: bool = False, wm_flag_bit: bool = True):\n'''Class TextWatermark init\n        Args:\n            wm_mode (WMMode): WMMode to be set\n            wm_base (int): Watermark convert base.\n            start_at (int, optional): index where the watermark will be inserted. Defaults to 0.\n            wm_loop (bool, optional): If watermark will be repeated until it is inserted to end.\n                Defaults to False.\n            wm_flag_bit (bool, optional): If True, add a flag bit to watermark. Defaults to True.\n        Raises:\n            ValueError: if `base` is not in the range [2, 36]\n        '''\nself.wm_mode = wm_mode\n'''Watermark encoding mode. Setting different watermark modes will effectively\n        reduce the size of the watermark string.'''\nself.wm_base = wm_base\n'''watermark convert base must be between 2 and 36,\n            and less or euqal than len(list({template}.CONFUSABLES_CHARS.values())[0])\n        '''\nself.start_at = start_at\n'''index where the watermark will be inserted. Defaults to 0.'''\nself.wm_loop = wm_loop\n'''If watermark will be repeated until it is inserted to end.\n                Defaults to False.'''\nself.wm_flag_bit = wm_flag_bit\n'''If True, add a flag bit to watermark. Defaults to True.'''\ndef set_tpl(self, confusables_chars: Union[dict, list],\nmethod: WMMethod, confusables_chars_key: str = ''):\n'''Set template arguments and get instance of WMTemplate\n        Args:\n            confusables_chars (Union[dict, list]): Confusables chars\n            method (WMMethod): Method of watermark\n            confusables_chars_key (str): Confusables chars key\n        '''\nself.wmt = WMTemplate(\nconfusables_chars, self.wm_base, method, confusables_chars_key)\nif self.wm_base == 0:\nself.wm_base = self.wmt.wm_base\ndef set_tpl_type(self, tpl_type: WMTemplateType, confusables_chars_key: str = ''):\n'''Set template type\n        Args:\n            tpl_type (WMTemplateType): Template type\n            confusables_chars_key (str): Confusables chars key\n        '''\ntemplate = tpl_type.value\nself.wmt = WMTemplate(template.CONFUSABLES_CHARS, self.wm_base,\ntemplate.method, confusables_chars_key)\nif self.wm_base == 0:\nself.wm_base = self.wmt.wm_base\nself.tpl_type = tpl_type.name\ndef set_wm_max(self, wm_max: str):\n'''Set the length of the longest (or largest) watermark string.\n            Since the input watermark string is variable in length,\n            this will bring trouble to the retrieval of the watermark:\n            it will be difficult for us to determine the boundary of the watermark,\n            or judge the loss of the watermark. Therefore, in this library,\n            we will calculate and set the length of the longest (or largest)\n            watermark string as the default length of the watermark string.\n        Args:\n            wm_max (str): The longest (or largest) watermark string.\n        '''\nif not hasattr(self, 'wmt') or not self.wmt:\nraise ValueError(\n'Set up template with set_tpl or set_tpl_type first please.')\nself.wmc = WMConversion(self.wm_mode, self.wmt.wm_base)\nself.wm_max = wm_max\nwm_max_len = self.wmc.calc_max_wm_length(wm_max)\nif self.wm_flag_bit:\nself.wm_fixed_len = wm_max_len + 1\nelse:\nself.wm_fixed_len = wm_max_len\ndef set_text(self, text: str):\n'''Set text string to watermark\n        Args:\n            text (str): text to be watermarked\n        '''\nself.text = text\ndef set_text_file(self, path: str):\n'''Set text string from read file.\n        Args:\n            path (str): Text file path\n        Raises:\n            ValueError: If file not found\n            OSError: If file cannnot by read\n        '''\npath = os.path.abspath(path)\nif not os.path.exists(path):\nraise ValueError(f'ERROR: file {path} does not exist')\ntry:\nwith open(path, 'r', encoding='utf-8') as file:\nself.set_text(file.read())\nexcept OSError as err:\nprint(f'ERROR: cannot read file {path}, err is {err.strerror}')\nsys.exit()\ndef insert_watermark(self,  wm_str: str):\n'''Insert watermark to text\n        Args:\n            wm_str (str): Watermark string\n        Returns:\n            (str): Watermarked text\n        Raises:\n            ValueError: If watermark string is larger than wm_max\n            ValueError: If there is not enough space to insert a watermark\n        '''\nwm_final = self.wmc.wm_convert_to_arbitrary_base(wm_str)\nif self.wm_flag_bit:\nwm_final = wm_final.zfill(self.wm_fixed_len-1)\nelse:\nwm_final = wm_final.zfill(self.wm_fixed_len)\nwm_final_max = self.wmc.wm_convert_to_arbitrary_base(self.wm_max)\nif self.wm_flag_bit:\nwm_final_max = wm_final_max.zfill(self.wm_fixed_len-1)\nelse:\nwm_final_max = wm_final_max.zfill(self.wm_fixed_len)\nif wm_final &gt; wm_final_max:\nraise ValueError(\nf'ERROR: watermark:{wm_str} is larger than wm_max: {self.wm_max}')\nif self.wm_flag_bit:\nwm_final = '1' + wm_final\nif len(wm_final) &gt; self.wm_fixed_len:\nraise ValueError(\nf'ERROR: watermark {wm_str} (convert to: {wm_final}) \\\n                    is too long: {len(wm_final)}, max length is {self.wm_fixed_len}')\n#\nwm_text = self.wmt.insert_watermark(\ntext=self.text,\nwm_final=wm_final,\nstart_at=self.start_at,\nloop=self.wm_loop)\nreturn wm_text\ndef save_to_file(self, wm_text: str, path: str):\n'''Save watermarked text string to a file\n        Args:\n            wm_text (str): text to be watermarked\n            path (str): save to text file path\n        Raises:\n            OSError: If file cannnot be created\n        '''\npath = os.path.abspath(path)\ntry:\nwith open(path, 'w', encoding='utf-8') as file:\nfile.write(wm_text)\nexcept OSError as err:\nprint(f'ERROR: cannot write to file {path}, err is {err.strerror}')\nsys.exit()\ndef export_params(self):\n'''Export watermark params to json string\n        Returns:\n            (str): Exported JSON string\n        '''\nif self.tpl_type != '' and self.wmt.confusables_chars \\\n                == WMTemplateType[self.tpl_type].value.CONFUSABLES_CHARS:\nconfusables_chars = []\nelse:\nconfusables_chars = self.wmt.confusables_chars\nparams = {\n'tpl_type': self.tpl_type,\n'confusables_chars': confusables_chars,\n'confusables_chars_key': self.wmt.confusables_chars_key,\n'wm_base': self.wmt.wm_base,\n'method': self.wmt.method.value,\n'wm_mode': self.wm_mode,\n'wm_len': self.wm_fixed_len,\n'wm_flag_bit': self.wm_flag_bit,\n'wm_loop': self.wm_loop,\n'wm_max': self.wm_max,\n'start_at': self.start_at,\n'version': __version__,\n}\n# print(params)\nreturn json.dumps(params, ensure_ascii=False)\n@ staticmethod\ndef init_from_params(params: json, text: str, dont_check_version: bool = False):\n'''Import watermark params from json string\n        Args:\n            params (str): Exported JSON string\n            text (str): Text to be watermarked\n        Returns:\n            (Watermark): Watermark object\n        Raises:\n            ValueError: If version mismatch\n        '''\nif isinstance(params, str):\nparams = json.loads(params)\nif not dont_check_version and __version__ != params['version']:\nraise ValueError(\nf'Version mismatch: {__version__}!= {params[\"version\"]}')\nwm_init = TextWatermark(\nwm_mode=params['wm_mode'],\nwm_base=params['wm_base'],\nstart_at=params['start_at'],\nwm_loop=params['wm_loop'],\nwm_flag_bit=params['wm_flag_bit'])\nif params['tpl_type']:\nwm_init.set_tpl_type(tpl_type=WMTemplateType[params['tpl_type']])\nelse:\nwm_init.set_tpl(\nconfusables_chars=params['confusables_chars'],\nmethod=params['method'],\nconfusables_chars_key=params['confusables_chars_key'])\nwm_init.wm_fixed_len = params['wm_len']\nwm_init.set_wm_max(params['wm_max'])\nwm_init.set_text(text=text)\nreturn wm_init\n@ staticmethod\ndef retrieve_watermark_from_bin(wm_bin: str, params: json,\ndont_check_version: bool = False):\n'''\n        Retrieve watermark from binary string.\n        Args:\n            wm_bin (str): watermark binary string\n            params (json): params containing the watermark options\n        Returns:\n            (str): watermark string.\n        '''\nparams = json.loads(params)\nwm_len = params['wm_len']\nwmc = WMConversion(params['wm_mode'], params['wm_base'])\nver = params['version']\nif not dont_check_version and ver != __version__:\nraise ValueError(f'Not the same version, params version is {ver},'\nf' library version is {__version__}.'\n'If you confirm that you want to use a different version to'\n' retrieve the watermark, please set dont_check_version to True')\nif len(wm_bin) &lt; wm_len:\nraise ValueError(f'Watermark length is short than {wm_len}')\nif params['wm_flag_bit'] is True:\nwm_temp = wm_bin[1:wm_len]\nelse:\nwm_temp = wm_bin[0:wm_len]\nwm_temp = wm_temp.lstrip('0')\nwm_out_str = wmc.wm_restore_from_arbitrary_base(wm_temp)\nreturn wm_out_str\n@ staticmethod\ndef retrieve_watermark(wm_text: str, params: json,\ndont_check_version: bool = False):\n'''Retrieve watermark from watermarked text\n        Note: This is a static method\n            You can call this method by `TextWatermark.retrieve_watermark`\n        Warning: Retrieve watermark method is not a silver bullet\n            In many cases, the watermarked text may be transferred several times,\n            which may cause the watermark to change or disappear. At this time,\n            the watermark information cannot be retrieved through this function.\n            In the case of screen capture and screen capture, manual judgment is\n            required to find out the watermark information.\n        Args:\n            wm_text (str): watermarked text\n            params (json): params containing the watermark options\n        Returns:\n            (str): Watermark string.\n        '''\nparams = json.loads(params)\n# print(params)\nwm_len = params['wm_len']\nver = params['version']\nif len(wm_text) &lt; wm_len:\nraise ValueError(f'Watermark length is too short: '\nf'len of wm_text is {len(wm_text)}, wm_len is {wm_len}')\nif not dont_check_version and ver != __version__:\nraise ValueError(f'Not the same version, params version is {ver},'\nf' library version is {__version__}.'\n'If you confirm that you want to use a different version to'\n' retrieve the watermark, please set dont_check_version to True')\nwmc = WMConversion(params['wm_mode'], params['wm_base'])\nif not params['confusables_chars']:\ntpl_type = params['tpl_type']\nif tpl_type not in WMTemplateType.__members__:\nraise ValueError(f'Invalid WMTemplateType: {tpl_type}')\nparams['confusables_chars'] = WMTemplateType[tpl_type].value.CONFUSABLES_CHARS\nwmt = WMTemplate(\nparams['confusables_chars'],\nparams['wm_base'],\nparams['method'],\nparams['confusables_chars_key'])\nwm_out = wmt.retrieve_watermark(\nwm_text=wm_text,\nwm_base=wmt.wm_base,\nwm_len=wm_len,\nstart_at=params['start_at'])\n# print((wm_out))\nif params['wm_flag_bit'] is True:\nwm_temp = wm_out[1:wm_len]\nelse:\nwm_temp = wm_out[0:wm_len]\nwm_temp = wm_temp.lstrip('0')\nwm_out_str = wmc.wm_restore_from_arbitrary_base(wm_temp)\nreturn wm_out_str\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.text","title":"<code>text: str</code>  <code>class-attribute</code>","text":"<p>Text to be watermarked.</p> <p>Set text by <code>self.set_text(text)</code> or <code>self.set_text_file(file_path)</code></p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wmc","title":"<code>wmc: WMConversion</code>  <code>class-attribute</code>","text":"<p>Instance of WMConverison</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wmt","title":"<code>wmt: WMTemplate</code>  <code>class-attribute</code>","text":"<p>Instance of WMTemplate</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wm_max","title":"<code>wm_max: str</code>  <code>class-attribute</code>","text":"<p>Maximum watermark string.</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wm_fixed_len","title":"<code>wm_fixed_len: int = 0</code>  <code>class-attribute</code>","text":"<p>The longest (or largest) watermark string. When wm_flag_bit is true, The value of wm_max_len is 1 larger the actual value</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.tpl_type","title":"<code>tpl_type: str = ''</code>  <code>class-attribute</code>","text":"<p>template type in WMTemplateType</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wm_mode","title":"<code>wm_mode = wm_mode</code>  <code>instance-attribute</code>","text":"<p>Watermark encoding mode. Setting different watermark modes will effectively reduce the size of the watermark string.</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wm_base","title":"<code>wm_base = wm_base</code>  <code>instance-attribute</code>","text":"<p>watermark convert base must be between 2 and 36, and less or euqal than len(list({template}.CONFUSABLES_CHARS.values())[0])</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.start_at","title":"<code>start_at = start_at</code>  <code>instance-attribute</code>","text":"<p>index where the watermark will be inserted. Defaults to 0.</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wm_loop","title":"<code>wm_loop = wm_loop</code>  <code>instance-attribute</code>","text":"<p>If watermark will be repeated until it is inserted to end. Defaults to False.</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.wm_flag_bit","title":"<code>wm_flag_bit = wm_flag_bit</code>  <code>instance-attribute</code>","text":"<p>If True, add a flag bit to watermark. Defaults to True.</p>"},{"location":"api/main/#textwatermark.main.TextWatermark.__init__","title":"<code>__init__(wm_mode, wm_base=0, start_at=0, wm_loop=False, wm_flag_bit=True)</code>","text":"<p>Class TextWatermark init</p> <p>Parameters:</p> Name Type Description Default <code>wm_mode</code> <code>WMMode</code> <p>WMMode to be set</p> required <code>wm_base</code> <code>int</code> <p>Watermark convert base.</p> <code>0</code> <code>start_at</code> <code>int</code> <p>index where the watermark will be inserted. Defaults to 0.</p> <code>0</code> <code>wm_loop</code> <code>bool</code> <p>If watermark will be repeated until it is inserted to end. Defaults to False.</p> <code>False</code> <code>wm_flag_bit</code> <code>bool</code> <p>If True, add a flag bit to watermark. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>base</code> is not in the range [2, 36]</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>def __init__(self, wm_mode: WMMode, wm_base: int = 0, start_at: int = 0,\nwm_loop: bool = False, wm_flag_bit: bool = True):\n'''Class TextWatermark init\n    Args:\n        wm_mode (WMMode): WMMode to be set\n        wm_base (int): Watermark convert base.\n        start_at (int, optional): index where the watermark will be inserted. Defaults to 0.\n        wm_loop (bool, optional): If watermark will be repeated until it is inserted to end.\n            Defaults to False.\n        wm_flag_bit (bool, optional): If True, add a flag bit to watermark. Defaults to True.\n    Raises:\n        ValueError: if `base` is not in the range [2, 36]\n    '''\nself.wm_mode = wm_mode\n'''Watermark encoding mode. Setting different watermark modes will effectively\n    reduce the size of the watermark string.'''\nself.wm_base = wm_base\n'''watermark convert base must be between 2 and 36,\n        and less or euqal than len(list({template}.CONFUSABLES_CHARS.values())[0])\n    '''\nself.start_at = start_at\n'''index where the watermark will be inserted. Defaults to 0.'''\nself.wm_loop = wm_loop\n'''If watermark will be repeated until it is inserted to end.\n            Defaults to False.'''\nself.wm_flag_bit = wm_flag_bit\n'''If True, add a flag bit to watermark. Defaults to True.'''\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.set_tpl","title":"<code>set_tpl(confusables_chars, method, confusables_chars_key='')</code>","text":"<p>Set template arguments and get instance of WMTemplate</p> <p>Parameters:</p> Name Type Description Default <code>confusables_chars</code> <code>Union[dict, list]</code> <p>Confusables chars</p> required <code>method</code> <code>WMMethod</code> <p>Method of watermark</p> required <code>confusables_chars_key</code> <code>str</code> <p>Confusables chars key</p> <code>''</code> Source code in <code>textwatermark/main.py</code> Python<pre><code>def set_tpl(self, confusables_chars: Union[dict, list],\nmethod: WMMethod, confusables_chars_key: str = ''):\n'''Set template arguments and get instance of WMTemplate\n    Args:\n        confusables_chars (Union[dict, list]): Confusables chars\n        method (WMMethod): Method of watermark\n        confusables_chars_key (str): Confusables chars key\n    '''\nself.wmt = WMTemplate(\nconfusables_chars, self.wm_base, method, confusables_chars_key)\nif self.wm_base == 0:\nself.wm_base = self.wmt.wm_base\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.set_tpl_type","title":"<code>set_tpl_type(tpl_type, confusables_chars_key='')</code>","text":"<p>Set template type</p> <p>Parameters:</p> Name Type Description Default <code>tpl_type</code> <code>WMTemplateType</code> <p>Template type</p> required <code>confusables_chars_key</code> <code>str</code> <p>Confusables chars key</p> <code>''</code> Source code in <code>textwatermark/main.py</code> Python<pre><code>def set_tpl_type(self, tpl_type: WMTemplateType, confusables_chars_key: str = ''):\n'''Set template type\n    Args:\n        tpl_type (WMTemplateType): Template type\n        confusables_chars_key (str): Confusables chars key\n    '''\ntemplate = tpl_type.value\nself.wmt = WMTemplate(template.CONFUSABLES_CHARS, self.wm_base,\ntemplate.method, confusables_chars_key)\nif self.wm_base == 0:\nself.wm_base = self.wmt.wm_base\nself.tpl_type = tpl_type.name\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.set_wm_max","title":"<code>set_wm_max(wm_max)</code>","text":"<p>Set the length of the longest (or largest) watermark string.</p> Text Only<pre><code>Since the input watermark string is variable in length,\nthis will bring trouble to the retrieval of the watermark:\nit will be difficult for us to determine the boundary of the watermark,\nor judge the loss of the watermark. Therefore, in this library,\nwe will calculate and set the length of the longest (or largest)\nwatermark string as the default length of the watermark string.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>wm_max</code> <code>str</code> <p>The longest (or largest) watermark string.</p> required Source code in <code>textwatermark/main.py</code> Python<pre><code>def set_wm_max(self, wm_max: str):\n'''Set the length of the longest (or largest) watermark string.\n        Since the input watermark string is variable in length,\n        this will bring trouble to the retrieval of the watermark:\n        it will be difficult for us to determine the boundary of the watermark,\n        or judge the loss of the watermark. Therefore, in this library,\n        we will calculate and set the length of the longest (or largest)\n        watermark string as the default length of the watermark string.\n    Args:\n        wm_max (str): The longest (or largest) watermark string.\n    '''\nif not hasattr(self, 'wmt') or not self.wmt:\nraise ValueError(\n'Set up template with set_tpl or set_tpl_type first please.')\nself.wmc = WMConversion(self.wm_mode, self.wmt.wm_base)\nself.wm_max = wm_max\nwm_max_len = self.wmc.calc_max_wm_length(wm_max)\nif self.wm_flag_bit:\nself.wm_fixed_len = wm_max_len + 1\nelse:\nself.wm_fixed_len = wm_max_len\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.set_text","title":"<code>set_text(text)</code>","text":"<p>Set text string to watermark</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>text to be watermarked</p> required Source code in <code>textwatermark/main.py</code> Python<pre><code>def set_text(self, text: str):\n'''Set text string to watermark\n    Args:\n        text (str): text to be watermarked\n    '''\nself.text = text\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.set_text_file","title":"<code>set_text_file(path)</code>","text":"<p>Set text string from read file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Text file path</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If file not found</p> <code>OSError</code> <p>If file cannnot by read</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>def set_text_file(self, path: str):\n'''Set text string from read file.\n    Args:\n        path (str): Text file path\n    Raises:\n        ValueError: If file not found\n        OSError: If file cannnot by read\n    '''\npath = os.path.abspath(path)\nif not os.path.exists(path):\nraise ValueError(f'ERROR: file {path} does not exist')\ntry:\nwith open(path, 'r', encoding='utf-8') as file:\nself.set_text(file.read())\nexcept OSError as err:\nprint(f'ERROR: cannot read file {path}, err is {err.strerror}')\nsys.exit()\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.insert_watermark","title":"<code>insert_watermark(wm_str)</code>","text":"<p>Insert watermark to text</p> <p>Parameters:</p> Name Type Description Default <code>wm_str</code> <code>str</code> <p>Watermark string</p> required <p>Returns:</p> Type Description <code>str</code> <p>Watermarked text</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If watermark string is larger than wm_max</p> <code>ValueError</code> <p>If there is not enough space to insert a watermark</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>def insert_watermark(self,  wm_str: str):\n'''Insert watermark to text\n    Args:\n        wm_str (str): Watermark string\n    Returns:\n        (str): Watermarked text\n    Raises:\n        ValueError: If watermark string is larger than wm_max\n        ValueError: If there is not enough space to insert a watermark\n    '''\nwm_final = self.wmc.wm_convert_to_arbitrary_base(wm_str)\nif self.wm_flag_bit:\nwm_final = wm_final.zfill(self.wm_fixed_len-1)\nelse:\nwm_final = wm_final.zfill(self.wm_fixed_len)\nwm_final_max = self.wmc.wm_convert_to_arbitrary_base(self.wm_max)\nif self.wm_flag_bit:\nwm_final_max = wm_final_max.zfill(self.wm_fixed_len-1)\nelse:\nwm_final_max = wm_final_max.zfill(self.wm_fixed_len)\nif wm_final &gt; wm_final_max:\nraise ValueError(\nf'ERROR: watermark:{wm_str} is larger than wm_max: {self.wm_max}')\nif self.wm_flag_bit:\nwm_final = '1' + wm_final\nif len(wm_final) &gt; self.wm_fixed_len:\nraise ValueError(\nf'ERROR: watermark {wm_str} (convert to: {wm_final}) \\\n                is too long: {len(wm_final)}, max length is {self.wm_fixed_len}')\n#\nwm_text = self.wmt.insert_watermark(\ntext=self.text,\nwm_final=wm_final,\nstart_at=self.start_at,\nloop=self.wm_loop)\nreturn wm_text\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.save_to_file","title":"<code>save_to_file(wm_text, path)</code>","text":"<p>Save watermarked text string to a file</p> <p>Parameters:</p> Name Type Description Default <code>wm_text</code> <code>str</code> <p>text to be watermarked</p> required <code>path</code> <code>str</code> <p>save to text file path</p> required <p>Raises:</p> Type Description <code>OSError</code> <p>If file cannnot be created</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>def save_to_file(self, wm_text: str, path: str):\n'''Save watermarked text string to a file\n    Args:\n        wm_text (str): text to be watermarked\n        path (str): save to text file path\n    Raises:\n        OSError: If file cannnot be created\n    '''\npath = os.path.abspath(path)\ntry:\nwith open(path, 'w', encoding='utf-8') as file:\nfile.write(wm_text)\nexcept OSError as err:\nprint(f'ERROR: cannot write to file {path}, err is {err.strerror}')\nsys.exit()\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.export_params","title":"<code>export_params()</code>","text":"<p>Export watermark params to json string</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported JSON string</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>def export_params(self):\n'''Export watermark params to json string\n    Returns:\n        (str): Exported JSON string\n    '''\nif self.tpl_type != '' and self.wmt.confusables_chars \\\n            == WMTemplateType[self.tpl_type].value.CONFUSABLES_CHARS:\nconfusables_chars = []\nelse:\nconfusables_chars = self.wmt.confusables_chars\nparams = {\n'tpl_type': self.tpl_type,\n'confusables_chars': confusables_chars,\n'confusables_chars_key': self.wmt.confusables_chars_key,\n'wm_base': self.wmt.wm_base,\n'method': self.wmt.method.value,\n'wm_mode': self.wm_mode,\n'wm_len': self.wm_fixed_len,\n'wm_flag_bit': self.wm_flag_bit,\n'wm_loop': self.wm_loop,\n'wm_max': self.wm_max,\n'start_at': self.start_at,\n'version': __version__,\n}\n# print(params)\nreturn json.dumps(params, ensure_ascii=False)\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.init_from_params","title":"<code>init_from_params(params, text, dont_check_version=False)</code>  <code>staticmethod</code>","text":"<p>Import watermark params from json string</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>str</code> <p>Exported JSON string</p> required <code>text</code> <code>str</code> <p>Text to be watermarked</p> required <p>Returns:</p> Type Description <code>Watermark</code> <p>Watermark object</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If version mismatch</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>@ staticmethod\ndef init_from_params(params: json, text: str, dont_check_version: bool = False):\n'''Import watermark params from json string\n    Args:\n        params (str): Exported JSON string\n        text (str): Text to be watermarked\n    Returns:\n        (Watermark): Watermark object\n    Raises:\n        ValueError: If version mismatch\n    '''\nif isinstance(params, str):\nparams = json.loads(params)\nif not dont_check_version and __version__ != params['version']:\nraise ValueError(\nf'Version mismatch: {__version__}!= {params[\"version\"]}')\nwm_init = TextWatermark(\nwm_mode=params['wm_mode'],\nwm_base=params['wm_base'],\nstart_at=params['start_at'],\nwm_loop=params['wm_loop'],\nwm_flag_bit=params['wm_flag_bit'])\nif params['tpl_type']:\nwm_init.set_tpl_type(tpl_type=WMTemplateType[params['tpl_type']])\nelse:\nwm_init.set_tpl(\nconfusables_chars=params['confusables_chars'],\nmethod=params['method'],\nconfusables_chars_key=params['confusables_chars_key'])\nwm_init.wm_fixed_len = params['wm_len']\nwm_init.set_wm_max(params['wm_max'])\nwm_init.set_text(text=text)\nreturn wm_init\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.retrieve_watermark_from_bin","title":"<code>retrieve_watermark_from_bin(wm_bin, params, dont_check_version=False)</code>  <code>staticmethod</code>","text":"<p>Retrieve watermark from binary string.</p> <p>Parameters:</p> Name Type Description Default <code>wm_bin</code> <code>str</code> <p>watermark binary string</p> required <code>params</code> <code>json</code> <p>params containing the watermark options</p> required <p>Returns:</p> Type Description <code>str</code> <p>watermark string.</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>@ staticmethod\ndef retrieve_watermark_from_bin(wm_bin: str, params: json,\ndont_check_version: bool = False):\n'''\n    Retrieve watermark from binary string.\n    Args:\n        wm_bin (str): watermark binary string\n        params (json): params containing the watermark options\n    Returns:\n        (str): watermark string.\n    '''\nparams = json.loads(params)\nwm_len = params['wm_len']\nwmc = WMConversion(params['wm_mode'], params['wm_base'])\nver = params['version']\nif not dont_check_version and ver != __version__:\nraise ValueError(f'Not the same version, params version is {ver},'\nf' library version is {__version__}.'\n'If you confirm that you want to use a different version to'\n' retrieve the watermark, please set dont_check_version to True')\nif len(wm_bin) &lt; wm_len:\nraise ValueError(f'Watermark length is short than {wm_len}')\nif params['wm_flag_bit'] is True:\nwm_temp = wm_bin[1:wm_len]\nelse:\nwm_temp = wm_bin[0:wm_len]\nwm_temp = wm_temp.lstrip('0')\nwm_out_str = wmc.wm_restore_from_arbitrary_base(wm_temp)\nreturn wm_out_str\n</code></pre>"},{"location":"api/main/#textwatermark.main.TextWatermark.retrieve_watermark","title":"<code>retrieve_watermark(wm_text, params, dont_check_version=False)</code>  <code>staticmethod</code>","text":"<p>Retrieve watermark from watermarked text</p> This is a static method <p>You can call this method by <code>TextWatermark.retrieve_watermark</code></p> Retrieve watermark method is not a silver bullet <p>In many cases, the watermarked text may be transferred several times, which may cause the watermark to change or disappear. At this time, the watermark information cannot be retrieved through this function. In the case of screen capture and screen capture, manual judgment is required to find out the watermark information.</p> <p>Parameters:</p> Name Type Description Default <code>wm_text</code> <code>str</code> <p>watermarked text</p> required <code>params</code> <code>json</code> <p>params containing the watermark options</p> required <p>Returns:</p> Type Description <code>str</code> <p>Watermark string.</p> Source code in <code>textwatermark/main.py</code> Python<pre><code>@ staticmethod\ndef retrieve_watermark(wm_text: str, params: json,\ndont_check_version: bool = False):\n'''Retrieve watermark from watermarked text\n    Note: This is a static method\n        You can call this method by `TextWatermark.retrieve_watermark`\n    Warning: Retrieve watermark method is not a silver bullet\n        In many cases, the watermarked text may be transferred several times,\n        which may cause the watermark to change or disappear. At this time,\n        the watermark information cannot be retrieved through this function.\n        In the case of screen capture and screen capture, manual judgment is\n        required to find out the watermark information.\n    Args:\n        wm_text (str): watermarked text\n        params (json): params containing the watermark options\n    Returns:\n        (str): Watermark string.\n    '''\nparams = json.loads(params)\n# print(params)\nwm_len = params['wm_len']\nver = params['version']\nif len(wm_text) &lt; wm_len:\nraise ValueError(f'Watermark length is too short: '\nf'len of wm_text is {len(wm_text)}, wm_len is {wm_len}')\nif not dont_check_version and ver != __version__:\nraise ValueError(f'Not the same version, params version is {ver},'\nf' library version is {__version__}.'\n'If you confirm that you want to use a different version to'\n' retrieve the watermark, please set dont_check_version to True')\nwmc = WMConversion(params['wm_mode'], params['wm_base'])\nif not params['confusables_chars']:\ntpl_type = params['tpl_type']\nif tpl_type not in WMTemplateType.__members__:\nraise ValueError(f'Invalid WMTemplateType: {tpl_type}')\nparams['confusables_chars'] = WMTemplateType[tpl_type].value.CONFUSABLES_CHARS\nwmt = WMTemplate(\nparams['confusables_chars'],\nparams['wm_base'],\nparams['method'],\nparams['confusables_chars_key'])\nwm_out = wmt.retrieve_watermark(\nwm_text=wm_text,\nwm_base=wmt.wm_base,\nwm_len=wm_len,\nstart_at=params['start_at'])\n# print((wm_out))\nif params['wm_flag_bit'] is True:\nwm_temp = wm_out[1:wm_len]\nelse:\nwm_temp = wm_out[0:wm_len]\nwm_temp = wm_temp.lstrip('0')\nwm_out_str = wmc.wm_restore_from_arbitrary_base(wm_temp)\nreturn wm_out_str\n</code></pre>"},{"location":"api/template/","title":"WMTemplate","text":""},{"location":"api/template/#wmtemplate","title":"WMTemplate","text":"<p>WMTemplate is mainly used to load template, set related parameters,  and insert watermark into text</p>"},{"location":"api/template/#textwatermark.template.WMTemplate","title":"<code>WMTemplate</code>","text":"<p>Class of WMTemplate</p>"},{"location":"api/template/#textwatermark.template.WMTemplate--example","title":"Example","text":"Python<pre><code>wmt = WMTemplate(\ntemplate.confusables_chars,\ntemplate.confusables_chars_length,\ntemplate.method,\nconfusables_chars_key)\nwm_text = wmt.insert_watermark(\ntext=text,\nwm_final=wm_final,\nstart_at=start_at,\nloop=False)\nwm_final = wmt.retrieve_watermark(\nwm_text=wm_text,\nwm_base=wmt.wm_base,\nwm_len=len(wm_final),\nstart_at=start_at)\n</code></pre> Source code in <code>textwatermark/template.py</code> Python<pre><code>class WMTemplate:\n'''Class of WMTemplate\n    Example\n    --------\n    ```py \n    wmt = WMTemplate(\n        template.confusables_chars,\n        template.confusables_chars_length,\n        template.method,\n        confusables_chars_key)\n    wm_text = wmt.insert_watermark(\n        text=text,\n        wm_final=wm_final,\n        start_at=start_at,\n        loop=False)\n    wm_final = wmt.retrieve_watermark(\n        wm_text=wm_text,\n        wm_base=wmt.wm_base,\n        wm_len=len(wm_final),\n        start_at=start_at)\n    ```\n    '''\ndef __init__(self, confusables_chars: Union[dict, list], wm_base: int, method: WMMethod,\nconfusables_chars_key: str = ''):\n'''Init of WMTemplate\n        Args:\n            confusables_chars (Union[dict, list]): The default template is in templates, \n                you can your the modified custom template \n            wm_base (int): Watermark convert base. Must be less than \n                or equal to confusables_chars_length \n            method (WMMethod):  Watermark insertion method, \n                see defines.WMMethod for details \n            confusables_chars_key (str): Key must be set when\n                WMMethod is DECORATE_EACH_CHAR\n        Note: Note of wm_base\n            The value of wm_base will affect the range of watermark characters taken \n                from confusables_chars\n        '''\nself.confusables_chars = confusables_chars\n'''The default template is in templates, \n                you can your the modified custom template '''\nif wm_base == 0:\nself.wm_base = WMTemplate.get_wm_base_from_tpl(\nself.confusables_chars)\n'''Watermark convert base. Must be less than or equal to confusables_chars_length '''\nelse:\nself.wm_base = wm_base\nself.method = method\n'''Watermark insertion method, see defines.WMMethod for details '''\nif self.method in [WMMethod.DECORATE_EACH_CHAR, WMMethod.APPEND_AS_BINARY] and \\\n                confusables_chars_key not in self.confusables_chars:\nraise ValueError(\n'When WMMethod in [DECORATE_EACH_CHAR,APPEND_AS_BINARY], confusables_chars_key: '\nf'{confusables_chars_key} must can be found in confusables_chars\\'s keys.')\nself.confusables_chars_key = confusables_chars_key\n'''Key must be set when WMMethod is DECORATE_EACH_CHAR'''\n@ staticmethod\ndef get_wm_base_from_tpl(confusables_chars):\n'''get wm_base from template's confusables chars\n        Args:\n            confusables_chars (dict): confusables chars template\n        Returns:\n            (int): wm_base\n        '''\nif isinstance(confusables_chars, list):\nwm_base = len(confusables_chars)\nelif isinstance(confusables_chars, dict):\nwm_base = len(list(confusables_chars.values())[0])\nelse:\nraise TypeError('confusables_chars must be list or dict')\nwm_base = max(wm_base, 2)\nwm_base = min(wm_base, 36)\nreturn wm_base\n################################# Clean watermark#################################\ndef clean_html_tags(self, html):\n'''Clean html tags from watermark.\n        Args:\n            html (str): HTML code\n        Returns:\n            (str): Cleaned HTML code\n        '''\nreturn re.sub(r'&lt;[^&lt;]+?&gt;', '', html)\ndef clean_text(self, text: str):\n'''clean confusables chars from text\n        Args:\n            text (str): Text to clean\n        Returns:\n            (str): Cleaned text\n        Raises:\n            ValueError: If unknown method\n        '''\ntext = self.clean_html_tags(text)\nmatch self.method:\ncase WMMethod.FIND_AND_REPLACE:\nfor key, vals in self.confusables_chars.items():\nif isinstance(vals, list):\nvals = ''.join(vals)\nvals = vals.replace(key, '')\nfor val in vals:\ntext = text.replace(val, key)\ncase WMMethod.DECORATE_EACH_CHAR:\n# use self.clean_html_tags by default\npass\ncase WMMethod.INSERT_INTO_POSITION | WMMethod.APPEND_TO_CHAR:\nfor val in self.confusables_chars:\ntext = text.replace(val, '')\ncase WMMethod.APPEND_AS_BINARY:\ntext = text.replace(\nself.confusables_chars[self.confusables_chars_key], '')\ncase _:\nraise ValueError(f'Unknown WMMethod: {self.method}')\n# print(text)\nreturn text\n################################# Insert watermark#################################\ndef insert_watermark(self, text: str, wm_final: str, start_at: int = 0, loop: bool = False):\n'''Insert watermark into text\n        Args:\n            text (str): Text to be watermarked\n            wm_final (str): The final watermark string\n            start_at (int): The offset position for insert watermark\n            loop (bool): Whether to insert the watermark in a loop\n        Returns:\n            (str): Watermarked text\n        Raises:\n            ValueError: If start_at is larger than text length\n            ValueError: If there is not enough space to insert a watermark\n            VaueError: If unknown watermark method\n        '''\nif start_at &gt; len(text):\nraise ValueError(\nf'Start_at is {start_at}, larger than text length: {len(text)}')\ntext = self.clean_text(text=text)\nif start_at &gt; 0:\nout_text = text[0:start_at]\ntext = text[start_at:]\nelse:\nout_text = ''\nmatch self.method:\ncase WMMethod.FIND_AND_REPLACE:\ntimes = self.check_find_and_replace_space(\ntext, len(wm_final))\nif times &lt; 1:\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._find_and_replace(\ntext=text, wm_final=wm_final, loop=loop)\ncase WMMethod.DECORATE_EACH_CHAR:\nif len(wm_final) &gt; len(text):\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._decorate_each_char(\ntext=text, wm_final=wm_final, loop=loop)\ncase WMMethod.INSERT_INTO_POSITION:\nout_text += self._insert_into_position(\ntext=text, wm_final=wm_final)\ncase WMMethod.APPEND_TO_CHAR:\nif len(wm_final) &gt; len(text):\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._append_to_char(\ntext=text, wm_final=wm_final, loop=loop)\ncase WMMethod.APPEND_AS_BINARY:\nif len(wm_final) &gt; len(text):\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._append_as_binary(\ntext=text, wm_final=wm_final, loop=loop)\ncase _:\nraise ValueError(f'Unknown watermark method: {self.method}')\nreturn out_text\ndef check_find_and_replace_space(self, text: str, wm_len: int):\n'''Check if enough space for insert watermark\n        Args:\n            text (str): text to check\n            wm_len (int): watermark length\n        Returns:\n            (int): number of times can insert watermark\n        Note: Why use this method?\n            Because WMMethod.FIND_AND_REPLACE mode must need enough space \n            to find special char and replace to watermarked char\n        '''\nactual_len = 0\nconfusables_chars_keys = ''.join(self.confusables_chars.keys())\n# \u8ba1\u7b97\u53ef\u63d2\u5165\u7684\u6c34\u5370\u7a7a\u95f4\u5927\u5c0f\nfor char in text:\nif confusables_chars_keys.find(char) != -1:\nactual_len += 1\ntimes = actual_len // wm_len\nreturn times\ndef _find_and_replace(self, text: str, wm_final: str, loop: bool):\nconfusables_chars_keys = ''.join(self.confusables_chars.keys())\nwm_idx = 0\nwm_text = ''\nfor idx in range(len(text)):\nif not loop and wm_idx &gt;= len(wm_final):\nwm_text += text[idx:]\nbreak\n# \u67e5\u627e\u5e76\u66ff\u6362\u6210\u6c34\u5370\u5b57\u7b26\nif confusables_chars_keys.find(text[idx]) != -1:\noffset = wm_final[wm_idx % len(wm_final)]\nwm_text += self.confusables_chars[text[idx]][int(offset)]\nwm_idx += 1\nelse:\nwm_text += text[idx]\nreturn wm_text\ndef _decorate_each_char(self, text: str, wm_final: str, loop: bool):\nwm_idx = 0\nwm_text = ''\nfor idx in range(len(text)):\nif not loop and wm_idx &gt;= len(wm_final):\nwm_text += text[idx:]\nbreak\noffset = wm_final[wm_idx % len(wm_final)]\nwm_text += self.confusables_chars[self.confusables_chars_key][int(\noffset)].replace('{char}', text[idx])\nwm_idx += 1\nreturn wm_text\ndef _insert_into_position(self, text: str, wm_final: str):\nwm_out_str = ''\nfor wm_char in wm_final:\nwm_out_str += self.confusables_chars[int(\nwm_char, self.wm_base)]\nreturn wm_out_str + text\ndef _append_to_char(self, text: str, wm_final: str, loop: bool):\nwm_idx = 0\nwm_text = ''\nfor idx in range(len(text)):\nif not loop and wm_idx &gt;= len(wm_final):\nwm_text += text[idx:]\nbreak\n# \u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u540e\u6dfb\u52a0\u5b57\u7b26\noffset = wm_final[wm_idx % len(wm_final)]\nwm_text += text[idx] + \\\n                self.confusables_chars[int(str(offset), self.wm_base)]\nwm_idx += 1\nreturn wm_text\ndef _append_as_binary(self, text: str, wm_final: str, loop: bool):\nwm_idx = 0\nwm_text = ''\nfor idx in range(len(text)):\nif not loop and wm_idx &gt;= len(wm_final):\nwm_text += text[idx:]\nbreak\n# \u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u540e\u6dfb\u52a0\u5b57\u7b26\noffset = wm_final[wm_idx % len(wm_final)]\nif offset == '0':\nwm_text += text[idx]\nelse:\nwm_text += text[idx] + \\\n                    self.confusables_chars[self.confusables_chars_key]\nwm_idx += 1\nreturn wm_text\n################################# Retrieve watermark#################################\ndef retrieve_watermark(self, wm_text: str, wm_base: int, wm_len: int, start_at: int = 0):\n'''Retrieve watermark from watermarked text\n        Args:\n            wm_text (str): Text which has be watermarked\n            wm_base (int): The encoding base of the watermark string\n            wm_len (int): The fixed length of watermark\n            start_at (int): The offset position of insert watermark\n        Returns:\n            (str): The final watermark retrieved from text\n        Raises:\n            ValueError: If `start_at` is larger than `wm_text` length\n            ValueError: If the length of retrieve watermark is not larger then `wm_len`\n            ValueError: If unknown watermark method\n        '''\nif start_at &gt; len(wm_text):\nraise ValueError(\nf'start_at: {start_at} is larger than wm_text length: {len(wm_text)}')\nif start_at &gt; 0:\nwm_text = wm_text[start_at:]\nwm_str = ''\nmatch self.method:\ncase WMMethod.FIND_AND_REPLACE:\nwm_str = self._retrieve_find_and_replace(\nwm_text, wm_len)\ncase WMMethod.DECORATE_EACH_CHAR:\nwm_str = self._retrieve_decorate_each_char(\nwm_text, wm_base, wm_len)\ncase WMMethod.INSERT_INTO_POSITION:\nwm_str = self._retrieve_insert_into_position(\nwm_text, wm_base, wm_len)\ncase WMMethod.APPEND_TO_CHAR:\nwm_str = self._retrieve_append_to_char(\nwm_text, wm_base, wm_len)\ncase WMMethod.APPEND_AS_BINARY:\nwm_str = self._retrieve_append_as_binary(\nwm_text, wm_len)\ncase _:\nraise ValueError(f'Unknown watermark method: {self.method}')\nif len(wm_str) &lt; wm_len:\nraise ValueError(\nf'Watermark is: {wm_str}, length is less than {wm_len}')\nreturn wm_str[0: wm_len]\ndef _retrieve_find_and_replace(self, wm_text: str, wm_len: int):\nvals = self.confusables_chars.values()\nconfusables_chars_length = len(list(vals)[0])\nconfusables_chars_values = ''\nfor val in vals:\nif isinstance(val, list):\nconfusables_chars_values += ''.join(val)\nif isinstance(val, str):\nconfusables_chars_values += val\nwm_temp = ''\nfor char in wm_text:\ndistances = confusables_chars_values.find(char)\nif distances != -1:\noffset = int(distances % confusables_chars_length)\n# print(distances, offset)\nwm_temp += str(offset)\nif len(wm_temp) &gt; wm_len:\nbreak\nreturn wm_temp\ndef _retrieve_decorate_each_char(self, wm_text: str, wm_base: int, wm_len: int):\nconfusables_chars = self.confusables_chars[self.confusables_chars_key]\nfor idx in range(len(confusables_chars)):\noffset = int(idx % wm_base)\nregex = confusables_chars[idx].replace('{char}', '.*?')\nwm_text = re.sub(regex, f'&lt;wm_char&gt;{offset}&lt;/wm_char&gt;', wm_text)\nmatched = re.findall(r'&lt;wm_char&gt;(.*?)&lt;/wm_char&gt;', wm_text)\nreturn ''.join(matched)[0:wm_len]\ndef _retrieve_insert_into_position(self, wm_text: str, wm_base: int, wm_len: int):\nfor idx in range(len(self.confusables_chars)):\nwm_val = np.base_repr(idx, wm_base)\nwm_text = wm_text.replace(\nself.confusables_chars[idx], f'&lt;wm_char&gt;{wm_val}&lt;/wm_char&gt;')\nmatched = re.findall(r'&lt;wm_char&gt;(.*?)&lt;/wm_char&gt;', wm_text)\nreturn ''.join(matched)[0:wm_len]\ndef _retrieve_append_to_char(self, wm_text: str, wm_base: int, wm_len: int):\n'''retrieve watermark from append to char'''\nreturn self._retrieve_insert_into_position(wm_text, wm_base, wm_len)\ndef _retrieve_append_as_binary(self, wm_text: str, wm_len: int):\n'''retrieve watermark from append char as binary'''\nconfusables_char = self.confusables_chars[self.confusables_chars_key]\nwm_start = False\nwm_final = ''\nfor idx, char in enumerate(wm_text):\nif len(wm_final) == wm_len:\nbreak\nif char == confusables_char and wm_start is False:\nwm_start = True\nif wm_start is False:\ncontinue\nif char == confusables_char:\nwm_final += '1'\ncontinue\nif char != confusables_char and \\\n                    (idx+1 &gt;= len(wm_text) or wm_text[idx+1] != confusables_char):\nwm_final += '0'\ncontinue\nif len(wm_final) != wm_len:\nraise ValueError(\nf'Retrieved watermark {wm_final}, length is not equal to {wm_len}')\nreturn wm_final\n</code></pre>"},{"location":"api/template/#textwatermark.template.WMTemplate.confusables_chars","title":"<code>confusables_chars = confusables_chars</code>  <code>instance-attribute</code>","text":"<p>The default template is in templates,  you can your the modified custom template</p>"},{"location":"api/template/#textwatermark.template.WMTemplate.confusables_chars_key","title":"<code>confusables_chars_key = confusables_chars_key</code>  <code>instance-attribute</code>","text":"<p>Key must be set when WMMethod is DECORATE_EACH_CHAR</p>"},{"location":"api/template/#textwatermark.template.WMTemplate.method","title":"<code>method = method</code>  <code>instance-attribute</code>","text":"<p>Watermark insertion method, see defines.WMMethod for details</p>"},{"location":"api/template/#textwatermark.template.WMTemplate.wm_base","title":"<code>wm_base = WMTemplate.get_wm_base_from_tpl(self.confusables_chars)</code>  <code>instance-attribute</code>","text":"<p>Watermark convert base. Must be less than or equal to confusables_chars_length</p>"},{"location":"api/template/#textwatermark.template.WMTemplate.__init__","title":"<code>__init__(confusables_chars, wm_base, method, confusables_chars_key='')</code>","text":"<p>Init of WMTemplate</p> <p>Parameters:</p> Name Type Description Default <code>confusables_chars</code> <code>Union[dict, list]</code> <p>The default template is in templates,  you can your the modified custom template </p> required <code>wm_base</code> <code>int</code> <p>Watermark convert base. Must be less than  or equal to confusables_chars_length </p> required <code>method</code> <code>WMMethod</code> <p>Watermark insertion method,  see defines.WMMethod for details </p> required <code>confusables_chars_key</code> <code>str</code> <p>Key must be set when WMMethod is DECORATE_EACH_CHAR</p> <code>''</code> Note of wm_base <p>The value of wm_base will affect the range of watermark characters taken      from confusables_chars</p> Source code in <code>textwatermark/template.py</code> Python<pre><code>def __init__(self, confusables_chars: Union[dict, list], wm_base: int, method: WMMethod,\nconfusables_chars_key: str = ''):\n'''Init of WMTemplate\n    Args:\n        confusables_chars (Union[dict, list]): The default template is in templates, \n            you can your the modified custom template \n        wm_base (int): Watermark convert base. Must be less than \n            or equal to confusables_chars_length \n        method (WMMethod):  Watermark insertion method, \n            see defines.WMMethod for details \n        confusables_chars_key (str): Key must be set when\n            WMMethod is DECORATE_EACH_CHAR\n    Note: Note of wm_base\n        The value of wm_base will affect the range of watermark characters taken \n            from confusables_chars\n    '''\nself.confusables_chars = confusables_chars\n'''The default template is in templates, \n            you can your the modified custom template '''\nif wm_base == 0:\nself.wm_base = WMTemplate.get_wm_base_from_tpl(\nself.confusables_chars)\n'''Watermark convert base. Must be less than or equal to confusables_chars_length '''\nelse:\nself.wm_base = wm_base\nself.method = method\n'''Watermark insertion method, see defines.WMMethod for details '''\nif self.method in [WMMethod.DECORATE_EACH_CHAR, WMMethod.APPEND_AS_BINARY] and \\\n            confusables_chars_key not in self.confusables_chars:\nraise ValueError(\n'When WMMethod in [DECORATE_EACH_CHAR,APPEND_AS_BINARY], confusables_chars_key: '\nf'{confusables_chars_key} must can be found in confusables_chars\\'s keys.')\nself.confusables_chars_key = confusables_chars_key\n'''Key must be set when WMMethod is DECORATE_EACH_CHAR'''\n</code></pre>"},{"location":"api/template/#textwatermark.template.WMTemplate.check_find_and_replace_space","title":"<code>check_find_and_replace_space(text, wm_len)</code>","text":"<p>Check if enough space for insert watermark</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>text to check</p> required <code>wm_len</code> <code>int</code> <p>watermark length</p> required <p>Returns:</p> Type Description <code>int</code> <p>number of times can insert watermark</p> Why use this method? <p>Because WMMethod.FIND_AND_REPLACE mode must need enough space  to find special char and replace to watermarked char</p> Source code in <code>textwatermark/template.py</code> Python<pre><code>def check_find_and_replace_space(self, text: str, wm_len: int):\n'''Check if enough space for insert watermark\n    Args:\n        text (str): text to check\n        wm_len (int): watermark length\n    Returns:\n        (int): number of times can insert watermark\n    Note: Why use this method?\n        Because WMMethod.FIND_AND_REPLACE mode must need enough space \n        to find special char and replace to watermarked char\n    '''\nactual_len = 0\nconfusables_chars_keys = ''.join(self.confusables_chars.keys())\n# \u8ba1\u7b97\u53ef\u63d2\u5165\u7684\u6c34\u5370\u7a7a\u95f4\u5927\u5c0f\nfor char in text:\nif confusables_chars_keys.find(char) != -1:\nactual_len += 1\ntimes = actual_len // wm_len\nreturn times\n</code></pre>"},{"location":"api/template/#textwatermark.template.WMTemplate.clean_html_tags","title":"<code>clean_html_tags(html)</code>","text":"<p>Clean html tags from watermark.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>HTML code</p> required <p>Returns:</p> Type Description <code>str</code> <p>Cleaned HTML code</p> Source code in <code>textwatermark/template.py</code> Python<pre><code>def clean_html_tags(self, html):\n'''Clean html tags from watermark.\n    Args:\n        html (str): HTML code\n    Returns:\n        (str): Cleaned HTML code\n    '''\nreturn re.sub(r'&lt;[^&lt;]+?&gt;', '', html)\n</code></pre>"},{"location":"api/template/#textwatermark.template.WMTemplate.clean_text","title":"<code>clean_text(text)</code>","text":"<p>clean confusables chars from text</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to clean</p> required <p>Returns:</p> Type Description <code>str</code> <p>Cleaned text</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If unknown method</p> Source code in <code>textwatermark/template.py</code> Python<pre><code>def clean_text(self, text: str):\n'''clean confusables chars from text\n    Args:\n        text (str): Text to clean\n    Returns:\n        (str): Cleaned text\n    Raises:\n        ValueError: If unknown method\n    '''\ntext = self.clean_html_tags(text)\nmatch self.method:\ncase WMMethod.FIND_AND_REPLACE:\nfor key, vals in self.confusables_chars.items():\nif isinstance(vals, list):\nvals = ''.join(vals)\nvals = vals.replace(key, '')\nfor val in vals:\ntext = text.replace(val, key)\ncase WMMethod.DECORATE_EACH_CHAR:\n# use self.clean_html_tags by default\npass\ncase WMMethod.INSERT_INTO_POSITION | WMMethod.APPEND_TO_CHAR:\nfor val in self.confusables_chars:\ntext = text.replace(val, '')\ncase WMMethod.APPEND_AS_BINARY:\ntext = text.replace(\nself.confusables_chars[self.confusables_chars_key], '')\ncase _:\nraise ValueError(f'Unknown WMMethod: {self.method}')\n# print(text)\nreturn text\n</code></pre>"},{"location":"api/template/#textwatermark.template.WMTemplate.get_wm_base_from_tpl","title":"<code>get_wm_base_from_tpl(confusables_chars)</code>  <code>staticmethod</code>","text":"<p>get wm_base from template's confusables chars</p> <p>Parameters:</p> Name Type Description Default <code>confusables_chars</code> <code>dict</code> <p>confusables chars template</p> required <p>Returns:</p> Type Description <code>int</code> <p>wm_base</p> Source code in <code>textwatermark/template.py</code> Python<pre><code>@ staticmethod\ndef get_wm_base_from_tpl(confusables_chars):\n'''get wm_base from template's confusables chars\n    Args:\n        confusables_chars (dict): confusables chars template\n    Returns:\n        (int): wm_base\n    '''\nif isinstance(confusables_chars, list):\nwm_base = len(confusables_chars)\nelif isinstance(confusables_chars, dict):\nwm_base = len(list(confusables_chars.values())[0])\nelse:\nraise TypeError('confusables_chars must be list or dict')\nwm_base = max(wm_base, 2)\nwm_base = min(wm_base, 36)\nreturn wm_base\n</code></pre>"},{"location":"api/template/#textwatermark.template.WMTemplate.insert_watermark","title":"<code>insert_watermark(text, wm_final, start_at=0, loop=False)</code>","text":"<p>Insert watermark into text</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be watermarked</p> required <code>wm_final</code> <code>str</code> <p>The final watermark string</p> required <code>start_at</code> <code>int</code> <p>The offset position for insert watermark</p> <code>0</code> <code>loop</code> <code>bool</code> <p>Whether to insert the watermark in a loop</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Watermarked text</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If start_at is larger than text length</p> <code>ValueError</code> <p>If there is not enough space to insert a watermark</p> <code>VaueError</code> <p>If unknown watermark method</p> Source code in <code>textwatermark/template.py</code> Python<pre><code>def insert_watermark(self, text: str, wm_final: str, start_at: int = 0, loop: bool = False):\n'''Insert watermark into text\n    Args:\n        text (str): Text to be watermarked\n        wm_final (str): The final watermark string\n        start_at (int): The offset position for insert watermark\n        loop (bool): Whether to insert the watermark in a loop\n    Returns:\n        (str): Watermarked text\n    Raises:\n        ValueError: If start_at is larger than text length\n        ValueError: If there is not enough space to insert a watermark\n        VaueError: If unknown watermark method\n    '''\nif start_at &gt; len(text):\nraise ValueError(\nf'Start_at is {start_at}, larger than text length: {len(text)}')\ntext = self.clean_text(text=text)\nif start_at &gt; 0:\nout_text = text[0:start_at]\ntext = text[start_at:]\nelse:\nout_text = ''\nmatch self.method:\ncase WMMethod.FIND_AND_REPLACE:\ntimes = self.check_find_and_replace_space(\ntext, len(wm_final))\nif times &lt; 1:\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._find_and_replace(\ntext=text, wm_final=wm_final, loop=loop)\ncase WMMethod.DECORATE_EACH_CHAR:\nif len(wm_final) &gt; len(text):\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._decorate_each_char(\ntext=text, wm_final=wm_final, loop=loop)\ncase WMMethod.INSERT_INTO_POSITION:\nout_text += self._insert_into_position(\ntext=text, wm_final=wm_final)\ncase WMMethod.APPEND_TO_CHAR:\nif len(wm_final) &gt; len(text):\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._append_to_char(\ntext=text, wm_final=wm_final, loop=loop)\ncase WMMethod.APPEND_AS_BINARY:\nif len(wm_final) &gt; len(text):\nraise ValueError(\nf'There is not enough space to insert a watermark: {wm_final}')\nout_text += self._append_as_binary(\ntext=text, wm_final=wm_final, loop=loop)\ncase _:\nraise ValueError(f'Unknown watermark method: {self.method}')\nreturn out_text\n</code></pre>"},{"location":"api/template/#textwatermark.template.WMTemplate.retrieve_watermark","title":"<code>retrieve_watermark(wm_text, wm_base, wm_len, start_at=0)</code>","text":"<p>Retrieve watermark from watermarked text</p> <p>Parameters:</p> Name Type Description Default <code>wm_text</code> <code>str</code> <p>Text which has be watermarked</p> required <code>wm_base</code> <code>int</code> <p>The encoding base of the watermark string</p> required <code>wm_len</code> <code>int</code> <p>The fixed length of watermark</p> required <code>start_at</code> <code>int</code> <p>The offset position of insert watermark</p> <code>0</code> <p>Returns:</p> Type Description <code>str</code> <p>The final watermark retrieved from text</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>start_at</code> is larger than <code>wm_text</code> length</p> <code>ValueError</code> <p>If the length of retrieve watermark is not larger then <code>wm_len</code></p> <code>ValueError</code> <p>If unknown watermark method</p> Source code in <code>textwatermark/template.py</code> Python<pre><code>def retrieve_watermark(self, wm_text: str, wm_base: int, wm_len: int, start_at: int = 0):\n'''Retrieve watermark from watermarked text\n    Args:\n        wm_text (str): Text which has be watermarked\n        wm_base (int): The encoding base of the watermark string\n        wm_len (int): The fixed length of watermark\n        start_at (int): The offset position of insert watermark\n    Returns:\n        (str): The final watermark retrieved from text\n    Raises:\n        ValueError: If `start_at` is larger than `wm_text` length\n        ValueError: If the length of retrieve watermark is not larger then `wm_len`\n        ValueError: If unknown watermark method\n    '''\nif start_at &gt; len(wm_text):\nraise ValueError(\nf'start_at: {start_at} is larger than wm_text length: {len(wm_text)}')\nif start_at &gt; 0:\nwm_text = wm_text[start_at:]\nwm_str = ''\nmatch self.method:\ncase WMMethod.FIND_AND_REPLACE:\nwm_str = self._retrieve_find_and_replace(\nwm_text, wm_len)\ncase WMMethod.DECORATE_EACH_CHAR:\nwm_str = self._retrieve_decorate_each_char(\nwm_text, wm_base, wm_len)\ncase WMMethod.INSERT_INTO_POSITION:\nwm_str = self._retrieve_insert_into_position(\nwm_text, wm_base, wm_len)\ncase WMMethod.APPEND_TO_CHAR:\nwm_str = self._retrieve_append_to_char(\nwm_text, wm_base, wm_len)\ncase WMMethod.APPEND_AS_BINARY:\nwm_str = self._retrieve_append_as_binary(\nwm_text, wm_len)\ncase _:\nraise ValueError(f'Unknown watermark method: {self.method}')\nif len(wm_str) &lt; wm_len:\nraise ValueError(\nf'Watermark is: {wm_str}, length is less than {wm_len}')\nreturn wm_str[0: wm_len]\n</code></pre>"}]}